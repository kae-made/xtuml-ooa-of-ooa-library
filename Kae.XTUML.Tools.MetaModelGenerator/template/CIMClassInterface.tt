<#
  // Copyright (c) Knowledge & Experience. All rights reserved.
  // Licensed under the MIT license. See LICENSE file in the project root for full license information.
#>
<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : <#= version #>
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System.Collections.Generic;

namespace Kae.CIM.MetaModel.CIMofCIM
{
<#
    foreach (var ck in repository.Classes.Keys)
    {
        var classDef = repository.Classes[ck];
        var className = RuleOfNamesForTransfrom.GetCIMInterfaceClassName(classDef);
        var superSubRels = repository.Relationships.Values.Where(r => r.Kind == XTUMLOOAofOOA.KindOfRelatioship.SuperSub);
        var baseClassName = "CIClassDef";
        foreach (var ssRel in superSubRels)
        {
            var ssRelC = (XTUMLOOAofOOA.SuperSubRelationshipOfOOA)ssRel;
            var superSubRelSub = ssRelC.SubEdges.Where(r => r.Edge.Name == ck);
            foreach(var subrel in superSubRelSub)
            {
                var subClassIFName = RuleOfNamesForTransfrom.GetCIMSubClassName(ssRel);
                baseClassName += $", {subClassIFName}";
            }
        }
#>
    public interface <#= className #> : <#= baseClassName #>
    {
<#
        foreach(var attrName in classDef.Attributes.Keys)
        {
            var attrTypeName = repository.DataTypes[classDef.Attributes[attrName]].CodeTypeName;
            var attrPropertyName = RuleOfNamesForTransfrom.GetAttrPropertyName(attrName);
#>
        public <#= attrTypeName #> <#= attrPropertyName #> { get; set; }
<#
        }
#>

<#
        var binaryRels = repository.Relationships.Values.Where(r => r.Kind == XTUMLOOAofOOA.KindOfRelatioship.Binary);
        var relObjRels = repository.Relationships.Values.Where(r => r.Kind == XTUMLOOAofOOA.KindOfRelatioship.RelationshipClass);

        var binaryRelFrom = binaryRels.Where(r => r.FromEdge.Edge.Name == ck);
        foreach( var brel in binaryRelFrom)
        {
            var linkedToTypeName = RuleOfNamesForTransfrom.GetLinkedMethodReturnTypeName(brel, RuleOfNamesForTransfrom.RelationshipEdgeSide.To);
            var linkedToMethodName = RuleOfNamesForTransfrom.GetLinkedMethodName(brel, RuleOfNamesForTransfrom.RelationshipEdgeSide.To);
#>
        public <#= linkedToTypeName #> <#= linkedToMethodName #>();
<#
        }

        var binaryRelTo = binaryRels.Where(r => r.ToEdge.Edge.Name == ck);
        foreach(var brel in binaryRelTo)
        {
            var linkedFromTypeName = RuleOfNamesForTransfrom.GetLinkedMethodReturnTypeName(brel, RuleOfNamesForTransfrom.RelationshipEdgeSide.From);
            var linkedFromMethodName = RuleOfNamesForTransfrom.GetLinkedMethodName(brel, RuleOfNamesForTransfrom.RelationshipEdgeSide.From);
#>
        public <#= linkedFromTypeName #> <#= linkedFromMethodName #>();
<#
        }

        var superSubRelSuper = superSubRels.Where(r => r.ToEdge.Edge.Name == ck);
        foreach (var superrel in superSubRelSuper)
        {
            var subClassName = RuleOfNamesForTransfrom.GetCIMSubClassName(superrel);
            var subClassGetMethodName = RuleOfNamesForTransfrom.GetCIMSubClassMethodName(superrel);
#>
        public <#= subClassName #> <#= subClassGetMethodName #>();
<#
        }

        foreach (var ssRel in superSubRels)
        {
            var ssRelC = (XTUMLOOAofOOA.SuperSubRelationshipOfOOA)ssRel;
            var superSubRelSub = ssRelC.SubEdges.Where(r => r.Edge.Name == ck);
            foreach(var subrel in superSubRelSub)
            {
                var superClassName = RuleOfNamesForTransfrom.GetCIMInterfaceClassName(ssRel.ToEdge.Edge);
                var getSuperClassMethodName = RuleOfNamesForTransfrom.GetCIMSuperClassMethodName(ssRel.ToEdge.Edge);
        

            }
        }

        var relObjRelOne = relObjRels.Where(r => ((XTUMLOOAofOOA.RelationshipClassRelationOfOOA)r).OneSideEdge.Edge.Name == ck);
        foreach(var onerel in relObjRelOne)
        {
            var relobjrel = (XTUMLOOAofOOA.RelationshipClassRelationOfOOA)onerel;
            var linkedOtherTypeName = RuleOfNamesForTransfrom.GetMethodReturnType(relobjrel.RelationshipClass, relobjrel.RelationshipClass.OneSideEdge.Mult);
            var linkedOtherMethodName = RuleOfNamesForTransfrom.GetLinkedOOMethodName(relobjrel, RuleOfNamesForTransfrom.RelationshipEdgeSide.OtherSide);
#>
        public <#= linkedOtherTypeName #> <#= linkedOtherMethodName #>();
<#
        }


        var relObjRelOther = relObjRels.Where(r => ((XTUMLOOAofOOA.RelationshipClassRelationOfOOA)r).OtherSideEdge.Edge.Name == ck);
        foreach(var otherrel in relObjRelOther)
        {
            var relobjrel = (XTUMLOOAofOOA.RelationshipClassRelationOfOOA)otherrel;
            var linkedOneTypeName = RuleOfNamesForTransfrom.GetMethodReturnType(relobjrel.RelationshipClass, relobjrel.RelationshipClass.OtherSideEdge.Mult);
            var linkedOneMethodName = RuleOfNamesForTransfrom.GetLinkedOOMethodName(relobjrel, RuleOfNamesForTransfrom.RelationshipEdgeSide.OneSide);
#>
        public <#= linkedOneTypeName #> <#= linkedOneMethodName #>();
<#
        }

#>

<#
        if (classDef is XTUMLOOAofOOA.RelationshipClassOfOOA)
        {
            var relClassDef = (XTUMLOOAofOOA.RelationshipClassOfOOA)classDef;
            var linkedOneSideMethodName = RuleOfNamesForTransfrom.GetLinkedOOMethodName(relClassDef, RuleOfNamesForTransfrom.RelationshipEdgeSide.OneSide);
            var linkedOneSideReturnTypeName = RuleOfNamesForTransfrom.GetMethodReturnType(relClassDef.Relationship.OneSideEdge.Edge, XTUMLOOAofOOA.RelationshpEdgeOfOOA.Multiplicity.MULT_1);
#>
        public <#= linkedOneSideReturnTypeName #> <#= linkedOneSideMethodName #>();
<#
            var linkedOtherSideMethodName = RuleOfNamesForTransfrom.GetLinkedOOMethodName(relClassDef, RuleOfNamesForTransfrom.RelationshipEdgeSide.OtherSide);
            var linkedOtherSideReturnTypeName = RuleOfNamesForTransfrom.GetMethodReturnType(relClassDef.Relationship.OtherSideEdge.Edge, XTUMLOOAofOOA.RelationshpEdgeOfOOA.Multiplicity.MULT_1);
#>
        public <#= linkedOtherSideReturnTypeName #> <#= linkedOtherSideMethodName #>();
<#
        }

#>
    }

<#
    }
    foreach (var rk in repository.Relationships.Keys)
    {
        var relationship = repository.Relationships[rk];
        if (relationship is XTUMLOOAofOOA.SuperSubRelationshipOfOOA)
        {
            var className = RuleOfNamesForTransfrom.GetCIMSubClassName(relationship);
            var superClassName = RuleOfNamesForTransfrom.GetCIMInterfaceClassName(relationship.ToEdge.Edge);
            var getSuperClassMethodName = RuleOfNamesForTransfrom.GetCIMSuperClassMethodName(relationship.ToEdge.Edge);
#>
    public interface <#= className #>
    {
        public <#= superClassName #> <#= getSuperClassMethodName #>();
    }
<#
        }
    }
#>
}
