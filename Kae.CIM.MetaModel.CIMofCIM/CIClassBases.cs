// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 0.1.0
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System.Linq;
using System.Collections.Generic;

namespace Kae.CIM.MetaModel.CIMofCIM
{
    public class CIMClassACT_ACTBase : CIMOOAofOOAClass, CIMClassACT_ACT
    {
        public string Attr_Action_ID { get; set; }
        public string Attr_Type { get; set; }
        public int Attr_LoopLevel { get; set; }
        public string Attr_Block_ID { get; set; }
        public string Attr_CurrentScope_ID { get; set; }
        public int Attr_return_value { get; set; }
        public string Attr_Label { get; set; }
        public string Attr_Parsed_Block_ID { get; set; }

        public CIMClassACT_ACTBase(CIModelRepository repository, string Action_ID, string Type, int LoopLevel, string Block_ID, string CurrentScope_ID, int return_value, string Label, string Parsed_Block_ID ) : base(repository, "ACT_ACT")
        {
            Attr_Action_ID = Action_ID;
            Attr_Type = Type;
            Attr_LoopLevel = LoopLevel;
            Attr_Block_ID = Block_ID;
            Attr_CurrentScope_ID = CurrentScope_ID;
            Attr_return_value = return_value;
            Attr_Label = Label;
            Attr_Parsed_Block_ID = Parsed_Block_ID;
        }

        public CIMClassACT_ACTBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Action_ID"], (string)attrArgs["Type"], (int)attrArgs["LoopLevel"], (string)attrArgs["Block_ID"], (string)attrArgs["CurrentScope_ID"], (int)attrArgs["return_value"], (string)attrArgs["Label"], (string)attrArgs["Parsed_Block_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassACT_BLK LinkedToR650()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_BLK").Where(i => ((CIMClassACT_BLK)i).Attr_Block_ID == this.Attr_Parsed_Block_ID);
            CIMClassACT_BLK linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_BLK)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_BLK LinkedToR666()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_BLK").Where(i => ((CIMClassACT_BLK)i).Attr_Block_ID == this.Attr_Block_ID);
            CIMClassACT_BLK linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_BLK)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_BLK LinkedToR699()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_BLK").Where(i => ((CIMClassACT_BLK)i).Attr_Block_ID == this.Attr_CurrentScope_ID);
            CIMClassACT_BLK linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_BLK)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_BLK> LinkedFromR601()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_BLK").Where(i => ((CIMClassACT_BLK)i).Attr_Action_ID == this.Attr_Action_ID);
            var linked = new List<CIMClassACT_BLK>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_BLK)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_BLK> LinkedFromR612()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_BLK").Where(i => ((CIMClassACT_BLK)i).Attr_Parsed_Action_ID == this.Attr_Action_ID);
            var linked = new List<CIMClassACT_BLK>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_BLK)c);
            }
            return linked;

        }

        public CIMSubClassR698 SubClassR698()
        {
            var subClassNames = new List<string>() { "ACT_SAB", "ACT_DAB", "ACT_FNB", "ACT_OPB", "ACT_BRB", "ACT_POB", "ACT_PSB", "ACT_ROB", "ACT_RSB", "ACT_TAB" };
            CIMSubClassR698 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR698)i).CIMSuperClassACT_ACT() != null && (((CIMSubClassR698)i).CIMSuperClassACT_ACT().Attr_Action_ID == this.Attr_Action_ID));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR698)candidates.First();
                    break;
                }
            }
            return subClass;

        }

        public CIMClassACT_BIE LinkedOtherSideR640()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_BIE").Where(i => ((CIMClassACT_BIE)i).Attr_Action_ID == this.Attr_Action_ID);
            CIMClassACT_BIE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_BIE)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_BIC LinkedOneSideR694()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_BIC").Where(i => ((CIMClassACT_BIC)i).Attr_Action_ID == this.Attr_Action_ID);
            CIMClassACT_BIC linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_BIC)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassACT_AIBase : CIMOOAofOOAClass, CIMClassACT_AI
    {
        public string Attr_Statement_ID { get; set; }
        public string Attr_r_Value_ID { get; set; }
        public string Attr_l_Value_ID { get; set; }
        public int Attr_attributeLineNumber { get; set; }
        public int Attr_attributeColumn { get; set; }

        public CIMClassACT_AIBase(CIModelRepository repository, string Statement_ID, string r_Value_ID, string l_Value_ID, int attributeLineNumber, int attributeColumn ) : base(repository, "ACT_AI")
        {
            Attr_Statement_ID = Statement_ID;
            Attr_r_Value_ID = r_Value_ID;
            Attr_l_Value_ID = l_Value_ID;
            Attr_attributeLineNumber = attributeLineNumber;
            Attr_attributeColumn = attributeColumn;
        }

        public CIMClassACT_AIBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"], (string)attrArgs["r_Value_ID"], (string)attrArgs["l_Value_ID"], (int)attrArgs["attributeLineNumber"], (int)attrArgs["attributeColumn"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassV_VAL LinkedToR609()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_r_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAL LinkedToR689()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_l_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_SMT CIMSuperClassACT_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SMT").Where(i => ((CIMClassACT_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassACT_BICBase : CIMOOAofOOAClass, CIMClassACT_BIC
    {
        public string Attr_Component_Id { get; set; }
        public string Attr_Action_ID { get; set; }

        public CIMClassACT_BICBase(CIModelRepository repository, string Component_Id, string Action_ID ) : base(repository, "ACT_BIC")
        {
            Attr_Component_Id = Component_Id;
            Attr_Action_ID = Action_ID;
        }

        public CIMClassACT_BICBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Component_Id"], (string)attrArgs["Action_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

         public CIMClassC_C LinkedOneSideR694()
         {
            var candidates = repository.GetCIInstances(domainName, "C_C").Where(i => ((CIMClassC_C)i).Attr_Id == this.Attr_Component_Id);
            CIMClassC_C linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_C)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_ACT LinkedOtherSideR694()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_ACT").Where(i => ((CIMClassACT_ACT)i).Attr_Action_ID == this.Attr_Action_ID);
            CIMClassACT_ACT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_ACT)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassACT_BIEBase : CIMOOAofOOAClass, CIMClassACT_BIE
    {
        public string Attr_Element_ID { get; set; }
        public string Attr_Action_ID { get; set; }

        public CIMClassACT_BIEBase(CIModelRepository repository, string Element_ID, string Action_ID ) : base(repository, "ACT_BIE")
        {
            Attr_Element_ID = Element_ID;
            Attr_Action_ID = Action_ID;
        }

        public CIMClassACT_BIEBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Element_ID"], (string)attrArgs["Action_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

         public CIMClassACT_ACT LinkedOneSideR640()
         {
            var candidates = repository.GetCIInstances(domainName, "ACT_ACT").Where(i => ((CIMClassACT_ACT)i).Attr_Action_ID == this.Attr_Action_ID);
            CIMClassACT_ACT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_ACT)candidates.First();
            }
            return linked;

        }

        public CIMClassPE_PE LinkedOtherSideR640()
        {
            var candidates = repository.GetCIInstances(domainName, "PE_PE").Where(i => ((CIMClassPE_PE)i).Attr_Element_ID == this.Attr_Element_ID);
            CIMClassPE_PE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassPE_PE)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassACT_BLKBase : CIMOOAofOOAClass, CIMClassACT_BLK
    {
        public string Attr_Block_ID { get; set; }
        public bool Attr_WhereSpecOK { get; set; }
        public bool Attr_InWhereSpec { get; set; }
        public bool Attr_SelectedFound { get; set; }
        public string Attr_TempBuffer { get; set; }
        public string Attr_SupData1 { get; set; }
        public string Attr_SupData2 { get; set; }
        public int Attr_CurrentLine { get; set; }
        public int Attr_CurrentCol { get; set; }
        public int Attr_currentKeyLettersLineNumber { get; set; }
        public int Attr_currentKeyLettersColumn { get; set; }
        public int Attr_currentParameterAssignmentNameLineNumber { get; set; }
        public int Attr_currentParameterAssignmentNameColumn { get; set; }
        public int Attr_currentAssociationNumberLineNumber { get; set; }
        public int Attr_currentAssociationNumberColumn { get; set; }
        public int Attr_currentAssociationPhraseLineNumber { get; set; }
        public int Attr_currentAssociationPhraseColumn { get; set; }
        public int Attr_currentDataTypeNameLineNumber { get; set; }
        public int Attr_currentDataTypeNameColumn { get; set; }
        public bool Attr_blockInStackFrameCreated { get; set; }
        public string Attr_Action_ID { get; set; }
        public string Attr_Parsed_Action_ID { get; set; }

        public CIMClassACT_BLKBase(CIModelRepository repository, string Block_ID, bool WhereSpecOK, bool InWhereSpec, bool SelectedFound, string TempBuffer, string SupData1, string SupData2, int CurrentLine, int CurrentCol, int currentKeyLettersLineNumber, int currentKeyLettersColumn, int currentParameterAssignmentNameLineNumber, int currentParameterAssignmentNameColumn, int currentAssociationNumberLineNumber, int currentAssociationNumberColumn, int currentAssociationPhraseLineNumber, int currentAssociationPhraseColumn, int currentDataTypeNameLineNumber, int currentDataTypeNameColumn, bool blockInStackFrameCreated, string Action_ID, string Parsed_Action_ID ) : base(repository, "ACT_BLK")
        {
            Attr_Block_ID = Block_ID;
            Attr_WhereSpecOK = WhereSpecOK;
            Attr_InWhereSpec = InWhereSpec;
            Attr_SelectedFound = SelectedFound;
            Attr_TempBuffer = TempBuffer;
            Attr_SupData1 = SupData1;
            Attr_SupData2 = SupData2;
            Attr_CurrentLine = CurrentLine;
            Attr_CurrentCol = CurrentCol;
            Attr_currentKeyLettersLineNumber = currentKeyLettersLineNumber;
            Attr_currentKeyLettersColumn = currentKeyLettersColumn;
            Attr_currentParameterAssignmentNameLineNumber = currentParameterAssignmentNameLineNumber;
            Attr_currentParameterAssignmentNameColumn = currentParameterAssignmentNameColumn;
            Attr_currentAssociationNumberLineNumber = currentAssociationNumberLineNumber;
            Attr_currentAssociationNumberColumn = currentAssociationNumberColumn;
            Attr_currentAssociationPhraseLineNumber = currentAssociationPhraseLineNumber;
            Attr_currentAssociationPhraseColumn = currentAssociationPhraseColumn;
            Attr_currentDataTypeNameLineNumber = currentDataTypeNameLineNumber;
            Attr_currentDataTypeNameColumn = currentDataTypeNameColumn;
            Attr_blockInStackFrameCreated = blockInStackFrameCreated;
            Attr_Action_ID = Action_ID;
            Attr_Parsed_Action_ID = Parsed_Action_ID;
        }

        public CIMClassACT_BLKBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Block_ID"], (bool)attrArgs["WhereSpecOK"], (bool)attrArgs["InWhereSpec"], (bool)attrArgs["SelectedFound"], (string)attrArgs["TempBuffer"], (string)attrArgs["SupData1"], (string)attrArgs["SupData2"], (int)attrArgs["CurrentLine"], (int)attrArgs["CurrentCol"], (int)attrArgs["currentKeyLettersLineNumber"], (int)attrArgs["currentKeyLettersColumn"], (int)attrArgs["currentParameterAssignmentNameLineNumber"], (int)attrArgs["currentParameterAssignmentNameColumn"], (int)attrArgs["currentAssociationNumberLineNumber"], (int)attrArgs["currentAssociationNumberColumn"], (int)attrArgs["currentAssociationPhraseLineNumber"], (int)attrArgs["currentAssociationPhraseColumn"], (int)attrArgs["currentDataTypeNameLineNumber"], (int)attrArgs["currentDataTypeNameColumn"], (bool)attrArgs["blockInStackFrameCreated"], (string)attrArgs["Action_ID"], (string)attrArgs["Parsed_Action_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassACT_ACT LinkedToR601()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_ACT").Where(i => ((CIMClassACT_ACT)i).Attr_Action_ID == this.Attr_Action_ID);
            CIMClassACT_ACT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_ACT)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_ACT LinkedToR612()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_ACT").Where(i => ((CIMClassACT_ACT)i).Attr_Action_ID == this.Attr_Parsed_Action_ID);
            CIMClassACT_ACT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_ACT)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_BLK LinkedFromR2016()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_BLK").Where(i => ((CIMClassTE_BLK)i).Attr_Block_ID == this.Attr_Block_ID);
            CIMClassTE_BLK linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_BLK)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_SMT> LinkedFromR602()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SMT").Where(i => ((CIMClassACT_SMT)i).Attr_Block_ID == this.Attr_Block_ID);
            var linked = new List<CIMClassACT_SMT>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_SMT)c);
            }
            return linked;

        }

        public CIMClassACT_FOR LinkedFromR605()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_FOR").Where(i => ((CIMClassACT_FOR)i).Attr_Block_ID == this.Attr_Block_ID);
            CIMClassACT_FOR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_FOR)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_E LinkedFromR606()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_E").Where(i => ((CIMClassACT_E)i).Attr_Block_ID == this.Attr_Block_ID);
            CIMClassACT_E linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_E)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_IF LinkedFromR607()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_IF").Where(i => ((CIMClassACT_IF)i).Attr_Block_ID == this.Attr_Block_ID);
            CIMClassACT_IF linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_IF)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_WHL LinkedFromR608()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_WHL").Where(i => ((CIMClassACT_WHL)i).Attr_Block_ID == this.Attr_Block_ID);
            CIMClassACT_WHL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_WHL)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_ACT LinkedFromR650()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_ACT").Where(i => ((CIMClassACT_ACT)i).Attr_Parsed_Block_ID == this.Attr_Block_ID);
            CIMClassACT_ACT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_ACT)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_EL LinkedFromR658()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_EL").Where(i => ((CIMClassACT_EL)i).Attr_Block_ID == this.Attr_Block_ID);
            CIMClassACT_EL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_EL)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_ACT LinkedFromR666()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_ACT").Where(i => ((CIMClassACT_ACT)i).Attr_Block_ID == this.Attr_Block_ID);
            CIMClassACT_ACT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_ACT)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_ACT LinkedFromR699()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_ACT").Where(i => ((CIMClassACT_ACT)i).Attr_CurrentScope_ID == this.Attr_Block_ID);
            CIMClassACT_ACT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_ACT)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassV_VAR> LinkedFromR823()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAR").Where(i => ((CIMClassV_VAR)i).Attr_Block_ID == this.Attr_Block_ID);
            var linked = new List<CIMClassV_VAR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_VAR)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassV_VAL> LinkedFromR826()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Block_ID == this.Attr_Block_ID);
            var linked = new List<CIMClassV_VAL>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_VAL)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassI_BSF> LinkedOtherSideR2923()
        {
            var candidates = repository.GetCIInstances(domainName, "I_BSF").Where(i => ((CIMClassI_BSF)i).Attr_Block_ID == this.Attr_Block_ID);
            var linked = new List<CIMClassI_BSF>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_BSF)c);
            }
            return linked;

        }

    }
    public class CIMClassACT_BRBBase : CIMOOAofOOAClass, CIMClassACT_BRB
    {
        public string Attr_Action_ID { get; set; }
        public string Attr_Brg_ID { get; set; }

        public CIMClassACT_BRBBase(CIModelRepository repository, string Action_ID, string Brg_ID ) : base(repository, "ACT_BRB")
        {
            Attr_Action_ID = Action_ID;
            Attr_Brg_ID = Brg_ID;
        }

        public CIMClassACT_BRBBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Action_ID"], (string)attrArgs["Brg_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassS_BRG LinkedToR697()
        {
            var candidates = repository.GetCIInstances(domainName, "S_BRG").Where(i => ((CIMClassS_BRG)i).Attr_Brg_ID == this.Attr_Brg_ID);
            CIMClassS_BRG linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_BRG)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_ACT CIMSuperClassACT_ACT()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_ACT").Where(i => ((CIMClassACT_ACT)i).Attr_Action_ID == this.Attr_Action_ID);
            CIMClassACT_ACT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_ACT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassACT_BRGBase : CIMOOAofOOAClass, CIMClassACT_BRG
    {
        public string Attr_Statement_ID { get; set; }
        public string Attr_Brg_ID { get; set; }
        public int Attr_bridgeNameLineNumber { get; set; }
        public int Attr_bridgeNameColumn { get; set; }
        public int Attr_externalEntityKeyLettersLineNumber { get; set; }
        public int Attr_externalEntityKeyLettersColumn { get; set; }

        public CIMClassACT_BRGBase(CIModelRepository repository, string Statement_ID, string Brg_ID, int bridgeNameLineNumber, int bridgeNameColumn, int externalEntityKeyLettersLineNumber, int externalEntityKeyLettersColumn ) : base(repository, "ACT_BRG")
        {
            Attr_Statement_ID = Statement_ID;
            Attr_Brg_ID = Brg_ID;
            Attr_bridgeNameLineNumber = bridgeNameLineNumber;
            Attr_bridgeNameColumn = bridgeNameColumn;
            Attr_externalEntityKeyLettersLineNumber = externalEntityKeyLettersLineNumber;
            Attr_externalEntityKeyLettersColumn = externalEntityKeyLettersColumn;
        }

        public CIMClassACT_BRGBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"], (string)attrArgs["Brg_ID"], (int)attrArgs["bridgeNameLineNumber"], (int)attrArgs["bridgeNameColumn"], (int)attrArgs["externalEntityKeyLettersLineNumber"], (int)attrArgs["externalEntityKeyLettersColumn"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassS_BRG LinkedToR674()
        {
            var candidates = repository.GetCIInstances(domainName, "S_BRG").Where(i => ((CIMClassS_BRG)i).Attr_Brg_ID == this.Attr_Brg_ID);
            CIMClassS_BRG linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_BRG)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassV_PAR> LinkedFromR628()
        {
            var candidates = repository.GetCIInstances(domainName, "V_PAR").Where(i => ((CIMClassV_PAR)i).Attr_Statement_ID == this.Attr_Statement_ID);
            var linked = new List<CIMClassV_PAR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_PAR)c);
            }
            return linked;

        }

        public CIMClassACT_SMT CIMSuperClassACT_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SMT").Where(i => ((CIMClassACT_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassACT_BRKBase : CIMOOAofOOAClass, CIMClassACT_BRK
    {
        public string Attr_Statement_ID { get; set; }

        public CIMClassACT_BRKBase(CIModelRepository repository, string Statement_ID ) : base(repository, "ACT_BRK")
        {
            Attr_Statement_ID = Statement_ID;
        }

        public CIMClassACT_BRKBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassACT_SMT CIMSuperClassACT_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SMT").Where(i => ((CIMClassACT_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassACT_CNVBase : CIMOOAofOOAClass, CIMClassACT_CNV
    {
        public string Attr_Statement_ID { get; set; }
        public string Attr_Obj_ID { get; set; }
        public int Attr_modelClassKeyLettersLineNumber { get; set; }
        public int Attr_modelClassKeyLettersColumn { get; set; }

        public CIMClassACT_CNVBase(CIModelRepository repository, string Statement_ID, string Obj_ID, int modelClassKeyLettersLineNumber, int modelClassKeyLettersColumn ) : base(repository, "ACT_CNV")
        {
            Attr_Statement_ID = Statement_ID;
            Attr_Obj_ID = Obj_ID;
            Attr_modelClassKeyLettersLineNumber = modelClassKeyLettersLineNumber;
            Attr_modelClassKeyLettersColumn = modelClassKeyLettersColumn;
        }

        public CIMClassACT_CNVBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"], (string)attrArgs["Obj_ID"], (int)attrArgs["modelClassKeyLettersLineNumber"], (int)attrArgs["modelClassKeyLettersColumn"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassO_OBJ LinkedToR672()
        {
            var candidates = repository.GetCIInstances(domainName, "O_OBJ").Where(i => ((CIMClassO_OBJ)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_OBJ linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_OBJ)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_SMT CIMSuperClassACT_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SMT").Where(i => ((CIMClassACT_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassACT_CONBase : CIMOOAofOOAClass, CIMClassACT_CON
    {
        public string Attr_Statement_ID { get; set; }

        public CIMClassACT_CONBase(CIModelRepository repository, string Statement_ID ) : base(repository, "ACT_CON")
        {
            Attr_Statement_ID = Statement_ID;
        }

        public CIMClassACT_CONBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassACT_SMT CIMSuperClassACT_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SMT").Where(i => ((CIMClassACT_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassACT_CRBase : CIMOOAofOOAClass, CIMClassACT_CR
    {
        public string Attr_Statement_ID { get; set; }
        public string Attr_Var_ID { get; set; }
        public bool Attr_is_implicit { get; set; }
        public string Attr_Obj_ID { get; set; }
        public int Attr_modelClassKeyLettersLineNumber { get; set; }
        public int Attr_modelClassKeyLettersColumn { get; set; }

        public CIMClassACT_CRBase(CIModelRepository repository, string Statement_ID, string Var_ID, bool is_implicit, string Obj_ID, int modelClassKeyLettersLineNumber, int modelClassKeyLettersColumn ) : base(repository, "ACT_CR")
        {
            Attr_Statement_ID = Statement_ID;
            Attr_Var_ID = Var_ID;
            Attr_is_implicit = is_implicit;
            Attr_Obj_ID = Obj_ID;
            Attr_modelClassKeyLettersLineNumber = modelClassKeyLettersLineNumber;
            Attr_modelClassKeyLettersColumn = modelClassKeyLettersColumn;
        }

        public CIMClassACT_CRBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"], (string)attrArgs["Var_ID"], (bool)attrArgs["is_implicit"], (string)attrArgs["Obj_ID"], (int)attrArgs["modelClassKeyLettersLineNumber"], (int)attrArgs["modelClassKeyLettersColumn"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassV_VAR LinkedToR633()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAR").Where(i => ((CIMClassV_VAR)i).Attr_Var_ID == this.Attr_Var_ID);
            CIMClassV_VAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAR)candidates.First();
            }
            return linked;

        }

        public CIMClassO_OBJ LinkedToR671()
        {
            var candidates = repository.GetCIInstances(domainName, "O_OBJ").Where(i => ((CIMClassO_OBJ)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_OBJ linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_OBJ)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_SMT CIMSuperClassACT_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SMT").Where(i => ((CIMClassACT_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassACT_CTLBase : CIMOOAofOOAClass, CIMClassACT_CTL
    {
        public string Attr_Statement_ID { get; set; }

        public CIMClassACT_CTLBase(CIModelRepository repository, string Statement_ID ) : base(repository, "ACT_CTL")
        {
            Attr_Statement_ID = Statement_ID;
        }

        public CIMClassACT_CTLBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassACT_SMT CIMSuperClassACT_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SMT").Where(i => ((CIMClassACT_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassACT_DABBase : CIMOOAofOOAClass, CIMClassACT_DAB
    {
        public string Attr_Action_ID { get; set; }
        public string Attr_Obj_ID { get; set; }
        public string Attr_Attr_ID { get; set; }
        public bool Attr_AttributeWritten { get; set; }

        public CIMClassACT_DABBase(CIModelRepository repository, string Action_ID, string Obj_ID, string Attr_ID, bool AttributeWritten ) : base(repository, "ACT_DAB")
        {
            Attr_Action_ID = Action_ID;
            Attr_Obj_ID = Obj_ID;
            Attr_Attr_ID = Attr_ID;
            Attr_AttributeWritten = AttributeWritten;
        }

        public CIMClassACT_DABBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Action_ID"], (string)attrArgs["Obj_ID"], (string)attrArgs["Attr_ID"], (bool)attrArgs["AttributeWritten"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassO_DBATTR LinkedToR693()
        {
            var candidates = repository.GetCIInstances(domainName, "O_DBATTR").Where(i => ((CIMClassO_DBATTR)i).Attr_Attr_ID == this.Attr_Attr_ID && ((CIMClassO_DBATTR)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_DBATTR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_DBATTR)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_ACT CIMSuperClassACT_ACT()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_ACT").Where(i => ((CIMClassACT_ACT)i).Attr_Action_ID == this.Attr_Action_ID);
            CIMClassACT_ACT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_ACT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassACT_DELBase : CIMOOAofOOAClass, CIMClassACT_DEL
    {
        public string Attr_Statement_ID { get; set; }
        public string Attr_Var_ID { get; set; }

        public CIMClassACT_DELBase(CIModelRepository repository, string Statement_ID, string Var_ID ) : base(repository, "ACT_DEL")
        {
            Attr_Statement_ID = Statement_ID;
            Attr_Var_ID = Var_ID;
        }

        public CIMClassACT_DELBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"], (string)attrArgs["Var_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassV_VAR LinkedToR634()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAR").Where(i => ((CIMClassV_VAR)i).Attr_Var_ID == this.Attr_Var_ID);
            CIMClassV_VAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAR)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_SMT CIMSuperClassACT_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SMT").Where(i => ((CIMClassACT_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassACT_EBase : CIMOOAofOOAClass, CIMClassACT_E
    {
        public string Attr_Statement_ID { get; set; }
        public string Attr_Block_ID { get; set; }
        public string Attr_If_Statement_ID { get; set; }

        public CIMClassACT_EBase(CIModelRepository repository, string Statement_ID, string Block_ID, string If_Statement_ID ) : base(repository, "ACT_E")
        {
            Attr_Statement_ID = Statement_ID;
            Attr_Block_ID = Block_ID;
            Attr_If_Statement_ID = If_Statement_ID;
        }

        public CIMClassACT_EBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"], (string)attrArgs["Block_ID"], (string)attrArgs["If_Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassACT_BLK LinkedToR606()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_BLK").Where(i => ((CIMClassACT_BLK)i).Attr_Block_ID == this.Attr_Block_ID);
            CIMClassACT_BLK linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_BLK)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_IF LinkedToR683()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_IF").Where(i => ((CIMClassACT_IF)i).Attr_Statement_ID == this.Attr_If_Statement_ID);
            CIMClassACT_IF linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_IF)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_IF LinkedFromR692()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_IF").Where(i => ((CIMClassACT_IF)i).Attr_Else_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_IF linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_IF)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_SMT CIMSuperClassACT_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SMT").Where(i => ((CIMClassACT_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassACT_ELBase : CIMOOAofOOAClass, CIMClassACT_EL
    {
        public string Attr_Statement_ID { get; set; }
        public string Attr_Block_ID { get; set; }
        public string Attr_Value_ID { get; set; }
        public string Attr_If_Statement_ID { get; set; }

        public CIMClassACT_ELBase(CIModelRepository repository, string Statement_ID, string Block_ID, string Value_ID, string If_Statement_ID ) : base(repository, "ACT_EL")
        {
            Attr_Statement_ID = Statement_ID;
            Attr_Block_ID = Block_ID;
            Attr_Value_ID = Value_ID;
            Attr_If_Statement_ID = If_Statement_ID;
        }

        public CIMClassACT_ELBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"], (string)attrArgs["Block_ID"], (string)attrArgs["Value_ID"], (string)attrArgs["If_Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassACT_BLK LinkedToR658()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_BLK").Where(i => ((CIMClassACT_BLK)i).Attr_Block_ID == this.Attr_Block_ID);
            CIMClassACT_BLK linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_BLK)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAL LinkedToR659()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_IF LinkedToR682()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_IF").Where(i => ((CIMClassACT_IF)i).Attr_Statement_ID == this.Attr_If_Statement_ID);
            CIMClassACT_IF linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_IF)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_IF LinkedFromR690()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_IF").Where(i => ((CIMClassACT_IF)i).Attr_Elif_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_IF linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_IF)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_SMT CIMSuperClassACT_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SMT").Where(i => ((CIMClassACT_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassACT_FIOBase : CIMOOAofOOAClass, CIMClassACT_FIO
    {
        public string Attr_Statement_ID { get; set; }
        public string Attr_Var_ID { get; set; }
        public bool Attr_is_implicit { get; set; }
        public string Attr_cardinality { get; set; }
        public string Attr_Obj_ID { get; set; }
        public int Attr_extentLineNumber { get; set; }
        public int Attr_extentColumn { get; set; }

        public CIMClassACT_FIOBase(CIModelRepository repository, string Statement_ID, string Var_ID, bool is_implicit, string cardinality, string Obj_ID, int extentLineNumber, int extentColumn ) : base(repository, "ACT_FIO")
        {
            Attr_Statement_ID = Statement_ID;
            Attr_Var_ID = Var_ID;
            Attr_is_implicit = is_implicit;
            Attr_cardinality = cardinality;
            Attr_Obj_ID = Obj_ID;
            Attr_extentLineNumber = extentLineNumber;
            Attr_extentColumn = extentColumn;
        }

        public CIMClassACT_FIOBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"], (string)attrArgs["Var_ID"], (bool)attrArgs["is_implicit"], (string)attrArgs["cardinality"], (string)attrArgs["Obj_ID"], (int)attrArgs["extentLineNumber"], (int)attrArgs["extentColumn"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassV_VAR LinkedToR639()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAR").Where(i => ((CIMClassV_VAR)i).Attr_Var_ID == this.Attr_Var_ID);
            CIMClassV_VAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAR)candidates.First();
            }
            return linked;

        }

        public CIMClassO_OBJ LinkedToR677()
        {
            var candidates = repository.GetCIInstances(domainName, "O_OBJ").Where(i => ((CIMClassO_OBJ)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_OBJ linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_OBJ)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_SMT CIMSuperClassACT_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SMT").Where(i => ((CIMClassACT_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassACT_FIWBase : CIMOOAofOOAClass, CIMClassACT_FIW
    {
        public string Attr_Statement_ID { get; set; }
        public string Attr_Var_ID { get; set; }
        public bool Attr_is_implicit { get; set; }
        public string Attr_cardinality { get; set; }
        public string Attr_Where_Clause_Value_ID { get; set; }
        public string Attr_Obj_ID { get; set; }
        public int Attr_extentLineNumber { get; set; }
        public int Attr_extentColumn { get; set; }

        public CIMClassACT_FIWBase(CIModelRepository repository, string Statement_ID, string Var_ID, bool is_implicit, string cardinality, string Where_Clause_Value_ID, string Obj_ID, int extentLineNumber, int extentColumn ) : base(repository, "ACT_FIW")
        {
            Attr_Statement_ID = Statement_ID;
            Attr_Var_ID = Var_ID;
            Attr_is_implicit = is_implicit;
            Attr_cardinality = cardinality;
            Attr_Where_Clause_Value_ID = Where_Clause_Value_ID;
            Attr_Obj_ID = Obj_ID;
            Attr_extentLineNumber = extentLineNumber;
            Attr_extentColumn = extentColumn;
        }

        public CIMClassACT_FIWBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"], (string)attrArgs["Var_ID"], (bool)attrArgs["is_implicit"], (string)attrArgs["cardinality"], (string)attrArgs["Where_Clause_Value_ID"], (string)attrArgs["Obj_ID"], (int)attrArgs["extentLineNumber"], (int)attrArgs["extentColumn"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassV_VAL LinkedToR610()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Where_Clause_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAR LinkedToR665()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAR").Where(i => ((CIMClassV_VAR)i).Attr_Var_ID == this.Attr_Var_ID);
            CIMClassV_VAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAR)candidates.First();
            }
            return linked;

        }

        public CIMClassO_OBJ LinkedToR676()
        {
            var candidates = repository.GetCIInstances(domainName, "O_OBJ").Where(i => ((CIMClassO_OBJ)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_OBJ linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_OBJ)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_SMT CIMSuperClassACT_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SMT").Where(i => ((CIMClassACT_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassACT_FNBBase : CIMOOAofOOAClass, CIMClassACT_FNB
    {
        public string Attr_Action_ID { get; set; }
        public string Attr_Sync_ID { get; set; }

        public CIMClassACT_FNBBase(CIModelRepository repository, string Action_ID, string Sync_ID ) : base(repository, "ACT_FNB")
        {
            Attr_Action_ID = Action_ID;
            Attr_Sync_ID = Sync_ID;
        }

        public CIMClassACT_FNBBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Action_ID"], (string)attrArgs["Sync_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassS_SYNC LinkedToR695()
        {
            var candidates = repository.GetCIInstances(domainName, "S_SYNC").Where(i => ((CIMClassS_SYNC)i).Attr_Sync_ID == this.Attr_Sync_ID);
            CIMClassS_SYNC linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_SYNC)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_ACT CIMSuperClassACT_ACT()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_ACT").Where(i => ((CIMClassACT_ACT)i).Attr_Action_ID == this.Attr_Action_ID);
            CIMClassACT_ACT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_ACT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassACT_FNCBase : CIMOOAofOOAClass, CIMClassACT_FNC
    {
        public string Attr_Statement_ID { get; set; }
        public string Attr_Sync_ID { get; set; }
        public int Attr_functionNameLineNumber { get; set; }
        public int Attr_functionNameColumn { get; set; }

        public CIMClassACT_FNCBase(CIModelRepository repository, string Statement_ID, string Sync_ID, int functionNameLineNumber, int functionNameColumn ) : base(repository, "ACT_FNC")
        {
            Attr_Statement_ID = Statement_ID;
            Attr_Sync_ID = Sync_ID;
            Attr_functionNameLineNumber = functionNameLineNumber;
            Attr_functionNameColumn = functionNameColumn;
        }

        public CIMClassACT_FNCBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"], (string)attrArgs["Sync_ID"], (int)attrArgs["functionNameLineNumber"], (int)attrArgs["functionNameColumn"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassS_SYNC LinkedToR675()
        {
            var candidates = repository.GetCIInstances(domainName, "S_SYNC").Where(i => ((CIMClassS_SYNC)i).Attr_Sync_ID == this.Attr_Sync_ID);
            CIMClassS_SYNC linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_SYNC)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassV_PAR> LinkedFromR669()
        {
            var candidates = repository.GetCIInstances(domainName, "V_PAR").Where(i => ((CIMClassV_PAR)i).Attr_Statement_ID == this.Attr_Statement_ID);
            var linked = new List<CIMClassV_PAR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_PAR)c);
            }
            return linked;

        }

        public CIMClassACT_SMT CIMSuperClassACT_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SMT").Where(i => ((CIMClassACT_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassACT_FORBase : CIMOOAofOOAClass, CIMClassACT_FOR
    {
        public string Attr_Statement_ID { get; set; }
        public string Attr_Block_ID { get; set; }
        public bool Attr_is_implicit { get; set; }
        public string Attr_Loop_Var_ID { get; set; }
        public string Attr_Set_Var_ID { get; set; }
        public string Attr_Obj_ID { get; set; }

        public CIMClassACT_FORBase(CIModelRepository repository, string Statement_ID, string Block_ID, bool is_implicit, string Loop_Var_ID, string Set_Var_ID, string Obj_ID ) : base(repository, "ACT_FOR")
        {
            Attr_Statement_ID = Statement_ID;
            Attr_Block_ID = Block_ID;
            Attr_is_implicit = is_implicit;
            Attr_Loop_Var_ID = Loop_Var_ID;
            Attr_Set_Var_ID = Set_Var_ID;
            Attr_Obj_ID = Obj_ID;
        }

        public CIMClassACT_FORBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"], (string)attrArgs["Block_ID"], (bool)attrArgs["is_implicit"], (string)attrArgs["Loop_Var_ID"], (string)attrArgs["Set_Var_ID"], (string)attrArgs["Obj_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassACT_BLK LinkedToR605()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_BLK").Where(i => ((CIMClassACT_BLK)i).Attr_Block_ID == this.Attr_Block_ID);
            CIMClassACT_BLK linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_BLK)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAR LinkedToR614()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAR").Where(i => ((CIMClassV_VAR)i).Attr_Var_ID == this.Attr_Loop_Var_ID);
            CIMClassV_VAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAR)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAR LinkedToR652()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAR").Where(i => ((CIMClassV_VAR)i).Attr_Var_ID == this.Attr_Set_Var_ID);
            CIMClassV_VAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAR)candidates.First();
            }
            return linked;

        }

        public CIMClassO_OBJ LinkedToR670()
        {
            var candidates = repository.GetCIInstances(domainName, "O_OBJ").Where(i => ((CIMClassO_OBJ)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_OBJ linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_OBJ)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_SMT CIMSuperClassACT_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SMT").Where(i => ((CIMClassACT_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassACT_IFBase : CIMOOAofOOAClass, CIMClassACT_IF
    {
        public string Attr_Statement_ID { get; set; }
        public string Attr_Block_ID { get; set; }
        public string Attr_Value_ID { get; set; }
        public string Attr_Elif_Statement_ID { get; set; }
        public string Attr_Else_Statement_ID { get; set; }

        public CIMClassACT_IFBase(CIModelRepository repository, string Statement_ID, string Block_ID, string Value_ID, string Elif_Statement_ID, string Else_Statement_ID ) : base(repository, "ACT_IF")
        {
            Attr_Statement_ID = Statement_ID;
            Attr_Block_ID = Block_ID;
            Attr_Value_ID = Value_ID;
            Attr_Elif_Statement_ID = Elif_Statement_ID;
            Attr_Else_Statement_ID = Else_Statement_ID;
        }

        public CIMClassACT_IFBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"], (string)attrArgs["Block_ID"], (string)attrArgs["Value_ID"], (string)attrArgs["Elif_Statement_ID"], (string)attrArgs["Else_Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassACT_BLK LinkedToR607()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_BLK").Where(i => ((CIMClassACT_BLK)i).Attr_Block_ID == this.Attr_Block_ID);
            CIMClassACT_BLK linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_BLK)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAL LinkedToR625()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_EL LinkedToR690()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_EL").Where(i => ((CIMClassACT_EL)i).Attr_Statement_ID == this.Attr_Elif_Statement_ID);
            CIMClassACT_EL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_EL)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_E LinkedToR692()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_E").Where(i => ((CIMClassACT_E)i).Attr_Statement_ID == this.Attr_Else_Statement_ID);
            CIMClassACT_E linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_E)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_EL> LinkedFromR682()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_EL").Where(i => ((CIMClassACT_EL)i).Attr_If_Statement_ID == this.Attr_Statement_ID);
            var linked = new List<CIMClassACT_EL>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_EL)c);
            }
            return linked;

        }

        public CIMClassACT_E LinkedFromR683()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_E").Where(i => ((CIMClassACT_E)i).Attr_If_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_E linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_E)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_SMT CIMSuperClassACT_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SMT").Where(i => ((CIMClassACT_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassACT_IOPBase : CIMOOAofOOAClass, CIMClassACT_IOP
    {
        public string Attr_Statement_ID { get; set; }
        public int Attr_opNameLineNumber { get; set; }
        public int Attr_opNameColumn { get; set; }
        public int Attr_ownerNameLineNumber { get; set; }
        public int Attr_ownerNameColumn { get; set; }
        public string Attr_ProvidedOp_Id { get; set; }
        public string Attr_RequiredOp_Id { get; set; }
        public string Attr_Value_ID { get; set; }

        public CIMClassACT_IOPBase(CIModelRepository repository, string Statement_ID, int opNameLineNumber, int opNameColumn, int ownerNameLineNumber, int ownerNameColumn, string ProvidedOp_Id, string RequiredOp_Id, string Value_ID ) : base(repository, "ACT_IOP")
        {
            Attr_Statement_ID = Statement_ID;
            Attr_opNameLineNumber = opNameLineNumber;
            Attr_opNameColumn = opNameColumn;
            Attr_ownerNameLineNumber = ownerNameLineNumber;
            Attr_ownerNameColumn = ownerNameColumn;
            Attr_ProvidedOp_Id = ProvidedOp_Id;
            Attr_RequiredOp_Id = RequiredOp_Id;
            Attr_Value_ID = Value_ID;
        }

        public CIMClassACT_IOPBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"], (int)attrArgs["opNameLineNumber"], (int)attrArgs["opNameColumn"], (int)attrArgs["ownerNameLineNumber"], (int)attrArgs["ownerNameColumn"], (string)attrArgs["ProvidedOp_Id"], (string)attrArgs["RequiredOp_Id"], (string)attrArgs["Value_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassV_VAL LinkedToR629()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }

        public CIMClassSPR_RO LinkedToR657()
        {
            var candidates = repository.GetCIInstances(domainName, "SPR_RO").Where(i => ((CIMClassSPR_RO)i).Attr_Id == this.Attr_RequiredOp_Id);
            CIMClassSPR_RO linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSPR_RO)candidates.First();
            }
            return linked;

        }

        public CIMClassSPR_PO LinkedToR680()
        {
            var candidates = repository.GetCIInstances(domainName, "SPR_PO").Where(i => ((CIMClassSPR_PO)i).Attr_Id == this.Attr_ProvidedOp_Id);
            CIMClassSPR_PO linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSPR_PO)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassV_PAR> LinkedFromR679()
        {
            var candidates = repository.GetCIInstances(domainName, "V_PAR").Where(i => ((CIMClassV_PAR)i).Attr_Statement_ID == this.Attr_Statement_ID);
            var linked = new List<CIMClassV_PAR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_PAR)c);
            }
            return linked;

        }

        public CIMClassACT_SMT CIMSuperClassACT_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SMT").Where(i => ((CIMClassACT_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassACT_LNKBase : CIMOOAofOOAClass, CIMClassACT_LNK
    {
        public string Attr_Link_ID { get; set; }
        public string Attr_Rel_Phrase { get; set; }
        public string Attr_Statement_ID { get; set; }
        public string Attr_Rel_ID { get; set; }
        public string Attr_Next_Link_ID { get; set; }
        public int Attr_Mult { get; set; }
        public string Attr_Obj_ID { get; set; }
        public int Attr_modelClassKeyLettersLineNumber { get; set; }
        public int Attr_modelClassKeyLettersColumn { get; set; }
        public int Attr_associationNumberLineNumber { get; set; }
        public int Attr_associationNumberColumn { get; set; }
        public int Attr_phraseLineNumber { get; set; }
        public int Attr_phraseColumn { get; set; }

        public CIMClassACT_LNKBase(CIModelRepository repository, string Link_ID, string Rel_Phrase, string Statement_ID, string Rel_ID, string Next_Link_ID, int Mult, string Obj_ID, int modelClassKeyLettersLineNumber, int modelClassKeyLettersColumn, int associationNumberLineNumber, int associationNumberColumn, int phraseLineNumber, int phraseColumn ) : base(repository, "ACT_LNK")
        {
            Attr_Link_ID = Link_ID;
            Attr_Rel_Phrase = Rel_Phrase;
            Attr_Statement_ID = Statement_ID;
            Attr_Rel_ID = Rel_ID;
            Attr_Next_Link_ID = Next_Link_ID;
            Attr_Mult = Mult;
            Attr_Obj_ID = Obj_ID;
            Attr_modelClassKeyLettersLineNumber = modelClassKeyLettersLineNumber;
            Attr_modelClassKeyLettersColumn = modelClassKeyLettersColumn;
            Attr_associationNumberLineNumber = associationNumberLineNumber;
            Attr_associationNumberColumn = associationNumberColumn;
            Attr_phraseLineNumber = phraseLineNumber;
            Attr_phraseColumn = phraseColumn;
        }

        public CIMClassACT_LNKBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Link_ID"], (string)attrArgs["Rel_Phrase"], (string)attrArgs["Statement_ID"], (string)attrArgs["Rel_ID"], (string)attrArgs["Next_Link_ID"], (int)attrArgs["Mult"], (string)attrArgs["Obj_ID"], (int)attrArgs["modelClassKeyLettersLineNumber"], (int)attrArgs["modelClassKeyLettersColumn"], (int)attrArgs["associationNumberLineNumber"], (int)attrArgs["associationNumberColumn"], (int)attrArgs["phraseLineNumber"], (int)attrArgs["phraseColumn"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassACT_LNK LinkedToR604Succeeds()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_LNK").Where(i => ((CIMClassACT_LNK)i).Attr_Link_ID == this.Attr_Next_Link_ID);
            CIMClassACT_LNK linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_LNK)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_SEL LinkedToR637()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SEL").Where(i => ((CIMClassACT_SEL)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_SEL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_SEL)candidates.First();
            }
            return linked;

        }

        public CIMClassO_OBJ LinkedToR678()
        {
            var candidates = repository.GetCIInstances(domainName, "O_OBJ").Where(i => ((CIMClassO_OBJ)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_OBJ linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_OBJ)candidates.First();
            }
            return linked;

        }

        public CIMClassR_REL LinkedToR681()
        {
            var candidates = repository.GetCIInstances(domainName, "R_REL").Where(i => ((CIMClassR_REL)i).Attr_Rel_ID == this.Attr_Rel_ID);
            CIMClassR_REL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_REL)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_LNK LinkedFromR2042()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_LNK").Where(i => ((CIMClassTE_LNK)i).Attr_Link_ID == this.Attr_Link_ID);
            CIMClassTE_LNK linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_LNK)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_LNK LinkedFromR604Precedes()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_LNK").Where(i => ((CIMClassACT_LNK)i).Attr_Next_Link_ID == this.Attr_Link_ID);
            CIMClassACT_LNK linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_LNK)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassACT_OPBBase : CIMOOAofOOAClass, CIMClassACT_OPB
    {
        public string Attr_Action_ID { get; set; }
        public string Attr_Tfr_ID { get; set; }

        public CIMClassACT_OPBBase(CIModelRepository repository, string Action_ID, string Tfr_ID ) : base(repository, "ACT_OPB")
        {
            Attr_Action_ID = Action_ID;
            Attr_Tfr_ID = Tfr_ID;
        }

        public CIMClassACT_OPBBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Action_ID"], (string)attrArgs["Tfr_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassO_TFR LinkedToR696()
        {
            var candidates = repository.GetCIInstances(domainName, "O_TFR").Where(i => ((CIMClassO_TFR)i).Attr_Tfr_ID == this.Attr_Tfr_ID);
            CIMClassO_TFR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_TFR)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_ACT CIMSuperClassACT_ACT()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_ACT").Where(i => ((CIMClassACT_ACT)i).Attr_Action_ID == this.Attr_Action_ID);
            CIMClassACT_ACT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_ACT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassACT_POBBase : CIMOOAofOOAClass, CIMClassACT_POB
    {
        public string Attr_Action_ID { get; set; }
        public string Attr_Id { get; set; }

        public CIMClassACT_POBBase(CIModelRepository repository, string Action_ID, string Id ) : base(repository, "ACT_POB")
        {
            Attr_Action_ID = Action_ID;
            Attr_Id = Id;
        }

        public CIMClassACT_POBBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Action_ID"], (string)attrArgs["Id"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSPR_PO LinkedToR687()
        {
            var candidates = repository.GetCIInstances(domainName, "SPR_PO").Where(i => ((CIMClassSPR_PO)i).Attr_Id == this.Attr_Id);
            CIMClassSPR_PO linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSPR_PO)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_ACT CIMSuperClassACT_ACT()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_ACT").Where(i => ((CIMClassACT_ACT)i).Attr_Action_ID == this.Attr_Action_ID);
            CIMClassACT_ACT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_ACT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassACT_PSBBase : CIMOOAofOOAClass, CIMClassACT_PSB
    {
        public string Attr_Action_ID { get; set; }
        public string Attr_Id { get; set; }

        public CIMClassACT_PSBBase(CIModelRepository repository, string Action_ID, string Id ) : base(repository, "ACT_PSB")
        {
            Attr_Action_ID = Action_ID;
            Attr_Id = Id;
        }

        public CIMClassACT_PSBBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Action_ID"], (string)attrArgs["Id"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSPR_PS LinkedToR686()
        {
            var candidates = repository.GetCIInstances(domainName, "SPR_PS").Where(i => ((CIMClassSPR_PS)i).Attr_Id == this.Attr_Id);
            CIMClassSPR_PS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSPR_PS)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_ACT CIMSuperClassACT_ACT()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_ACT").Where(i => ((CIMClassACT_ACT)i).Attr_Action_ID == this.Attr_Action_ID);
            CIMClassACT_ACT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_ACT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassACT_RELBase : CIMOOAofOOAClass, CIMClassACT_REL
    {
        public string Attr_Statement_ID { get; set; }
        public string Attr_One_Side_Var_ID { get; set; }
        public string Attr_Other_Side_Var_ID { get; set; }
        public string Attr_relationship_phrase { get; set; }
        public string Attr_Rel_ID { get; set; }
        public int Attr_associationNumberLineNumber { get; set; }
        public int Attr_associationNumberColumn { get; set; }
        public int Attr_associationPhraseLineNumber { get; set; }
        public int Attr_associationPhraseColumn { get; set; }

        public CIMClassACT_RELBase(CIModelRepository repository, string Statement_ID, string One_Side_Var_ID, string Other_Side_Var_ID, string relationship_phrase, string Rel_ID, int associationNumberLineNumber, int associationNumberColumn, int associationPhraseLineNumber, int associationPhraseColumn ) : base(repository, "ACT_REL")
        {
            Attr_Statement_ID = Statement_ID;
            Attr_One_Side_Var_ID = One_Side_Var_ID;
            Attr_Other_Side_Var_ID = Other_Side_Var_ID;
            Attr_relationship_phrase = relationship_phrase;
            Attr_Rel_ID = Rel_ID;
            Attr_associationNumberLineNumber = associationNumberLineNumber;
            Attr_associationNumberColumn = associationNumberColumn;
            Attr_associationPhraseLineNumber = associationPhraseLineNumber;
            Attr_associationPhraseColumn = associationPhraseColumn;
        }

        public CIMClassACT_RELBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"], (string)attrArgs["One_Side_Var_ID"], (string)attrArgs["Other_Side_Var_ID"], (string)attrArgs["relationship_phrase"], (string)attrArgs["Rel_ID"], (int)attrArgs["associationNumberLineNumber"], (int)attrArgs["associationNumberColumn"], (int)attrArgs["associationPhraseLineNumber"], (int)attrArgs["associationPhraseColumn"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassV_VAR LinkedToR615()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAR").Where(i => ((CIMClassV_VAR)i).Attr_Var_ID == this.Attr_One_Side_Var_ID);
            CIMClassV_VAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAR)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAR LinkedToR616()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAR").Where(i => ((CIMClassV_VAR)i).Attr_Var_ID == this.Attr_Other_Side_Var_ID);
            CIMClassV_VAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAR)candidates.First();
            }
            return linked;

        }

        public CIMClassR_REL LinkedToR653()
        {
            var candidates = repository.GetCIInstances(domainName, "R_REL").Where(i => ((CIMClassR_REL)i).Attr_Rel_ID == this.Attr_Rel_ID);
            CIMClassR_REL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_REL)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_SMT CIMSuperClassACT_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SMT").Where(i => ((CIMClassACT_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassACT_RETBase : CIMOOAofOOAClass, CIMClassACT_RET
    {
        public string Attr_Statement_ID { get; set; }
        public string Attr_Value_ID { get; set; }

        public CIMClassACT_RETBase(CIModelRepository repository, string Statement_ID, string Value_ID ) : base(repository, "ACT_RET")
        {
            Attr_Statement_ID = Statement_ID;
            Attr_Value_ID = Value_ID;
        }

        public CIMClassACT_RETBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"], (string)attrArgs["Value_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassV_VAL LinkedToR668()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_SMT CIMSuperClassACT_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SMT").Where(i => ((CIMClassACT_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassACT_ROBBase : CIMOOAofOOAClass, CIMClassACT_ROB
    {
        public string Attr_Action_ID { get; set; }
        public string Attr_Id { get; set; }

        public CIMClassACT_ROBBase(CIModelRepository repository, string Action_ID, string Id ) : base(repository, "ACT_ROB")
        {
            Attr_Action_ID = Action_ID;
            Attr_Id = Id;
        }

        public CIMClassACT_ROBBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Action_ID"], (string)attrArgs["Id"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSPR_RO LinkedToR685()
        {
            var candidates = repository.GetCIInstances(domainName, "SPR_RO").Where(i => ((CIMClassSPR_RO)i).Attr_Id == this.Attr_Id);
            CIMClassSPR_RO linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSPR_RO)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_ACT CIMSuperClassACT_ACT()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_ACT").Where(i => ((CIMClassACT_ACT)i).Attr_Action_ID == this.Attr_Action_ID);
            CIMClassACT_ACT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_ACT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassACT_RSBBase : CIMOOAofOOAClass, CIMClassACT_RSB
    {
        public string Attr_Action_ID { get; set; }
        public string Attr_Id { get; set; }

        public CIMClassACT_RSBBase(CIModelRepository repository, string Action_ID, string Id ) : base(repository, "ACT_RSB")
        {
            Attr_Action_ID = Action_ID;
            Attr_Id = Id;
        }

        public CIMClassACT_RSBBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Action_ID"], (string)attrArgs["Id"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSPR_RS LinkedToR684()
        {
            var candidates = repository.GetCIInstances(domainName, "SPR_RS").Where(i => ((CIMClassSPR_RS)i).Attr_Id == this.Attr_Id);
            CIMClassSPR_RS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSPR_RS)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_ACT CIMSuperClassACT_ACT()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_ACT").Where(i => ((CIMClassACT_ACT)i).Attr_Action_ID == this.Attr_Action_ID);
            CIMClassACT_ACT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_ACT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassACT_RUBase : CIMOOAofOOAClass, CIMClassACT_RU
    {
        public string Attr_Statement_ID { get; set; }
        public string Attr_One_Side_Var_ID { get; set; }
        public string Attr_Other_Side_Var_ID { get; set; }
        public string Attr_Associative_Var_ID { get; set; }
        public string Attr_relationship_phrase { get; set; }
        public string Attr_Rel_ID { get; set; }
        public int Attr_associationNumberLineNumber { get; set; }
        public int Attr_associationNumberColumn { get; set; }
        public int Attr_associationPhraseLineNumber { get; set; }
        public int Attr_associationPhraseColumn { get; set; }

        public CIMClassACT_RUBase(CIModelRepository repository, string Statement_ID, string One_Side_Var_ID, string Other_Side_Var_ID, string Associative_Var_ID, string relationship_phrase, string Rel_ID, int associationNumberLineNumber, int associationNumberColumn, int associationPhraseLineNumber, int associationPhraseColumn ) : base(repository, "ACT_RU")
        {
            Attr_Statement_ID = Statement_ID;
            Attr_One_Side_Var_ID = One_Side_Var_ID;
            Attr_Other_Side_Var_ID = Other_Side_Var_ID;
            Attr_Associative_Var_ID = Associative_Var_ID;
            Attr_relationship_phrase = relationship_phrase;
            Attr_Rel_ID = Rel_ID;
            Attr_associationNumberLineNumber = associationNumberLineNumber;
            Attr_associationNumberColumn = associationNumberColumn;
            Attr_associationPhraseLineNumber = associationPhraseLineNumber;
            Attr_associationPhraseColumn = associationPhraseColumn;
        }

        public CIMClassACT_RUBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"], (string)attrArgs["One_Side_Var_ID"], (string)attrArgs["Other_Side_Var_ID"], (string)attrArgs["Associative_Var_ID"], (string)attrArgs["relationship_phrase"], (string)attrArgs["Rel_ID"], (int)attrArgs["associationNumberLineNumber"], (int)attrArgs["associationNumberColumn"], (int)attrArgs["associationPhraseLineNumber"], (int)attrArgs["associationPhraseColumn"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassV_VAR LinkedToR617()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAR").Where(i => ((CIMClassV_VAR)i).Attr_Var_ID == this.Attr_One_Side_Var_ID);
            CIMClassV_VAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAR)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAR LinkedToR618()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAR").Where(i => ((CIMClassV_VAR)i).Attr_Var_ID == this.Attr_Other_Side_Var_ID);
            CIMClassV_VAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAR)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAR LinkedToR619()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAR").Where(i => ((CIMClassV_VAR)i).Attr_Var_ID == this.Attr_Associative_Var_ID);
            CIMClassV_VAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAR)candidates.First();
            }
            return linked;

        }

        public CIMClassR_REL LinkedToR654()
        {
            var candidates = repository.GetCIInstances(domainName, "R_REL").Where(i => ((CIMClassR_REL)i).Attr_Rel_ID == this.Attr_Rel_ID);
            CIMClassR_REL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_REL)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_SMT CIMSuperClassACT_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SMT").Where(i => ((CIMClassACT_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassACT_SABBase : CIMOOAofOOAClass, CIMClassACT_SAB
    {
        public string Attr_Action_ID { get; set; }
        public string Attr_SM_ID { get; set; }
        public string Attr_Act_ID { get; set; }

        public CIMClassACT_SABBase(CIModelRepository repository, string Action_ID, string SM_ID, string Act_ID ) : base(repository, "ACT_SAB")
        {
            Attr_Action_ID = Action_ID;
            Attr_SM_ID = SM_ID;
            Attr_Act_ID = Act_ID;
        }

        public CIMClassACT_SABBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Action_ID"], (string)attrArgs["SM_ID"], (string)attrArgs["Act_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSM_ACT LinkedToR691()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_ACT").Where(i => ((CIMClassSM_ACT)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_ACT)i).Attr_Act_ID == this.Attr_Act_ID);
            CIMClassSM_ACT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_ACT)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_ACT CIMSuperClassACT_ACT()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_ACT").Where(i => ((CIMClassACT_ACT)i).Attr_Action_ID == this.Attr_Action_ID);
            CIMClassACT_ACT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_ACT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassACT_SELBase : CIMOOAofOOAClass, CIMClassACT_SEL
    {
        public string Attr_Statement_ID { get; set; }
        public string Attr_Var_ID { get; set; }
        public bool Attr_is_implicit { get; set; }
        public string Attr_cardinality { get; set; }
        public string Attr_Value_ID { get; set; }

        public CIMClassACT_SELBase(CIModelRepository repository, string Statement_ID, string Var_ID, bool is_implicit, string cardinality, string Value_ID ) : base(repository, "ACT_SEL")
        {
            Attr_Statement_ID = Statement_ID;
            Attr_Var_ID = Var_ID;
            Attr_is_implicit = is_implicit;
            Attr_cardinality = cardinality;
            Attr_Value_ID = Value_ID;
        }

        public CIMClassACT_SELBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"], (string)attrArgs["Var_ID"], (bool)attrArgs["is_implicit"], (string)attrArgs["cardinality"], (string)attrArgs["Value_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassV_VAL LinkedToR613()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAR LinkedToR638()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAR").Where(i => ((CIMClassV_VAR)i).Attr_Var_ID == this.Attr_Var_ID);
            CIMClassV_VAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAR)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_LNK LinkedFromR637()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_LNK").Where(i => ((CIMClassACT_LNK)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_LNK linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_LNK)candidates.First();
            }
            return linked;

        }

        public CIMSubClassR664 SubClassR664()
        {
            var subClassNames = new List<string>() { "ACT_SRW", "ACT_SR" };
            CIMSubClassR664 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR664)i).CIMSuperClassACT_SEL() != null && (((CIMSubClassR664)i).CIMSuperClassACT_SEL().Attr_Statement_ID == this.Attr_Statement_ID));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR664)candidates.First();
                    break;
                }
            }
            return subClass;

        }

        public CIMClassACT_SMT CIMSuperClassACT_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SMT").Where(i => ((CIMClassACT_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassACT_SGNBase : CIMOOAofOOAClass, CIMClassACT_SGN
    {
        public string Attr_Statement_ID { get; set; }
        public int Attr_sigNameLineNumber { get; set; }
        public int Attr_sigNameColumn { get; set; }
        public int Attr_ownerNameLineNumber { get; set; }
        public int Attr_ownerNameColumn { get; set; }
        public string Attr_ProvidedSig_Id { get; set; }
        public string Attr_RequiredSig_Id { get; set; }
        public string Attr_Value_ID { get; set; }

        public CIMClassACT_SGNBase(CIModelRepository repository, string Statement_ID, int sigNameLineNumber, int sigNameColumn, int ownerNameLineNumber, int ownerNameColumn, string ProvidedSig_Id, string RequiredSig_Id, string Value_ID ) : base(repository, "ACT_SGN")
        {
            Attr_Statement_ID = Statement_ID;
            Attr_sigNameLineNumber = sigNameLineNumber;
            Attr_sigNameColumn = sigNameColumn;
            Attr_ownerNameLineNumber = ownerNameLineNumber;
            Attr_ownerNameColumn = ownerNameColumn;
            Attr_ProvidedSig_Id = ProvidedSig_Id;
            Attr_RequiredSig_Id = RequiredSig_Id;
            Attr_Value_ID = Value_ID;
        }

        public CIMClassACT_SGNBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"], (int)attrArgs["sigNameLineNumber"], (int)attrArgs["sigNameColumn"], (int)attrArgs["ownerNameLineNumber"], (int)attrArgs["ownerNameColumn"], (string)attrArgs["ProvidedSig_Id"], (string)attrArgs["RequiredSig_Id"], (string)attrArgs["Value_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassV_VAL LinkedToR630()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }

        public CIMClassSPR_RS LinkedToR660()
        {
            var candidates = repository.GetCIInstances(domainName, "SPR_RS").Where(i => ((CIMClassSPR_RS)i).Attr_Id == this.Attr_RequiredSig_Id);
            CIMClassSPR_RS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSPR_RS)candidates.First();
            }
            return linked;

        }

        public CIMClassSPR_PS LinkedToR663()
        {
            var candidates = repository.GetCIInstances(domainName, "SPR_PS").Where(i => ((CIMClassSPR_PS)i).Attr_Id == this.Attr_ProvidedSig_Id);
            CIMClassSPR_PS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSPR_PS)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassV_PAR> LinkedFromR662()
        {
            var candidates = repository.GetCIInstances(domainName, "V_PAR").Where(i => ((CIMClassV_PAR)i).Attr_Statement_ID == this.Attr_Statement_ID);
            var linked = new List<CIMClassV_PAR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_PAR)c);
            }
            return linked;

        }

        public CIMClassACT_SMT CIMSuperClassACT_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SMT").Where(i => ((CIMClassACT_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassACT_SMTBase : CIMOOAofOOAClass, CIMClassACT_SMT
    {
        public string Attr_Statement_ID { get; set; }
        public string Attr_Block_ID { get; set; }
        public string Attr_Previous_Statement_ID { get; set; }
        public int Attr_LineNumber { get; set; }
        public int Attr_StartPosition { get; set; }
        public string Attr_Label { get; set; }

        public CIMClassACT_SMTBase(CIModelRepository repository, string Statement_ID, string Block_ID, string Previous_Statement_ID, int LineNumber, int StartPosition, string Label ) : base(repository, "ACT_SMT")
        {
            Attr_Statement_ID = Statement_ID;
            Attr_Block_ID = Block_ID;
            Attr_Previous_Statement_ID = Previous_Statement_ID;
            Attr_LineNumber = LineNumber;
            Attr_StartPosition = StartPosition;
            Attr_Label = Label;
        }

        public CIMClassACT_SMTBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"], (string)attrArgs["Block_ID"], (string)attrArgs["Previous_Statement_ID"], (int)attrArgs["LineNumber"], (int)attrArgs["StartPosition"], (string)attrArgs["Label"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassACT_BLK LinkedToR602()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_BLK").Where(i => ((CIMClassACT_BLK)i).Attr_Block_ID == this.Attr_Block_ID);
            CIMClassACT_BLK linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_BLK)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_SMT LinkedToR661Precedes()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SMT").Where(i => ((CIMClassACT_SMT)i).Attr_Statement_ID == this.Attr_Previous_Statement_ID && ((CIMClassACT_SMT)i).Attr_Block_ID == this.Attr_Block_ID);
            CIMClassACT_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_SMT)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_SMT LinkedFromR2038()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SMT").Where(i => ((CIMClassTE_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassTE_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SMT)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassI_BSF> LinkedFromR2941()
        {
            var candidates = repository.GetCIInstances(domainName, "I_BSF").Where(i => ((CIMClassI_BSF)i).Attr_Statement_ID == this.Attr_Statement_ID);
            var linked = new List<CIMClassI_BSF>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_BSF)c);
            }
            return linked;

        }

        public CIMClassACT_SMT LinkedFromR661Succeeds()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SMT").Where(i => ((CIMClassACT_SMT)i).Attr_Previous_Statement_ID == this.Attr_Statement_ID && ((CIMClassACT_SMT)i).Attr_Block_ID == this.Attr_Block_ID);
            CIMClassACT_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_SMT)candidates.First();
            }
            return linked;

        }

        public CIMSubClassR603 SubClassR603()
        {
            var subClassNames = new List<string>() { "ACT_FOR", "ACT_WHL", "ACT_IF", "ACT_EL", "ACT_E", "ACT_BRG", "ACT_FNC", "ACT_RET", "ACT_TFM", "ACT_AI", "ACT_DEL", "ACT_CNV", "ACT_CR", "ACT_SEL", "ACT_FIO", "ACT_FIW", "ACT_URU", "ACT_UNR", "ACT_RU", "ACT_REL", "ACT_CTL", "ACT_BRK", "ACT_CON", "E_ESS", "E_GPR", "ACT_IOP", "ACT_SGN" };
            CIMSubClassR603 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR603)i).CIMSuperClassACT_SMT() != null && (((CIMSubClassR603)i).CIMSuperClassACT_SMT().Attr_Statement_ID == this.Attr_Statement_ID));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR603)candidates.First();
                    break;
                }
            }
            return subClass;

        }

    }
    public class CIMClassACT_SRBase : CIMOOAofOOAClass, CIMClassACT_SR
    {
        public string Attr_Statement_ID { get; set; }

        public CIMClassACT_SRBase(CIModelRepository repository, string Statement_ID ) : base(repository, "ACT_SR")
        {
            Attr_Statement_ID = Statement_ID;
        }

        public CIMClassACT_SRBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassACT_SEL CIMSuperClassACT_SEL()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SEL").Where(i => ((CIMClassACT_SEL)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_SEL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_SEL)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassACT_SRWBase : CIMOOAofOOAClass, CIMClassACT_SRW
    {
        public string Attr_Statement_ID { get; set; }
        public string Attr_Where_Clause_Value_ID { get; set; }

        public CIMClassACT_SRWBase(CIModelRepository repository, string Statement_ID, string Where_Clause_Value_ID ) : base(repository, "ACT_SRW")
        {
            Attr_Statement_ID = Statement_ID;
            Attr_Where_Clause_Value_ID = Where_Clause_Value_ID;
        }

        public CIMClassACT_SRWBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"], (string)attrArgs["Where_Clause_Value_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassV_VAL LinkedToR611()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Where_Clause_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_SEL CIMSuperClassACT_SEL()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SEL").Where(i => ((CIMClassACT_SEL)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_SEL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_SEL)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassACT_TABBase : CIMOOAofOOAClass, CIMClassACT_TAB
    {
        public string Attr_Action_ID { get; set; }
        public string Attr_SM_ID { get; set; }
        public string Attr_Act_ID { get; set; }

        public CIMClassACT_TABBase(CIModelRepository repository, string Action_ID, string SM_ID, string Act_ID ) : base(repository, "ACT_TAB")
        {
            Attr_Action_ID = Action_ID;
            Attr_SM_ID = SM_ID;
            Attr_Act_ID = Act_ID;
        }

        public CIMClassACT_TABBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Action_ID"], (string)attrArgs["SM_ID"], (string)attrArgs["Act_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSM_ACT LinkedToR688()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_ACT").Where(i => ((CIMClassSM_ACT)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_ACT)i).Attr_Act_ID == this.Attr_Act_ID);
            CIMClassSM_ACT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_ACT)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_ACT CIMSuperClassACT_ACT()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_ACT").Where(i => ((CIMClassACT_ACT)i).Attr_Action_ID == this.Attr_Action_ID);
            CIMClassACT_ACT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_ACT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassACT_TFMBase : CIMOOAofOOAClass, CIMClassACT_TFM
    {
        public string Attr_Statement_ID { get; set; }
        public string Attr_Tfr_ID { get; set; }
        public string Attr_Var_ID { get; set; }
        public int Attr_operationNameLineNumber { get; set; }
        public int Attr_operationNameColumn { get; set; }
        public int Attr_modelClassKeyLettersLineNumber { get; set; }
        public int Attr_modelClassKeyLettersColumn { get; set; }

        public CIMClassACT_TFMBase(CIModelRepository repository, string Statement_ID, string Tfr_ID, string Var_ID, int operationNameLineNumber, int operationNameColumn, int modelClassKeyLettersLineNumber, int modelClassKeyLettersColumn ) : base(repository, "ACT_TFM")
        {
            Attr_Statement_ID = Statement_ID;
            Attr_Tfr_ID = Tfr_ID;
            Attr_Var_ID = Var_ID;
            Attr_operationNameLineNumber = operationNameLineNumber;
            Attr_operationNameColumn = operationNameColumn;
            Attr_modelClassKeyLettersLineNumber = modelClassKeyLettersLineNumber;
            Attr_modelClassKeyLettersColumn = modelClassKeyLettersColumn;
        }

        public CIMClassACT_TFMBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"], (string)attrArgs["Tfr_ID"], (string)attrArgs["Var_ID"], (int)attrArgs["operationNameLineNumber"], (int)attrArgs["operationNameColumn"], (int)attrArgs["modelClassKeyLettersLineNumber"], (int)attrArgs["modelClassKeyLettersColumn"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassV_VAR LinkedToR667()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAR").Where(i => ((CIMClassV_VAR)i).Attr_Var_ID == this.Attr_Var_ID);
            CIMClassV_VAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAR)candidates.First();
            }
            return linked;

        }

        public CIMClassO_TFR LinkedToR673()
        {
            var candidates = repository.GetCIInstances(domainName, "O_TFR").Where(i => ((CIMClassO_TFR)i).Attr_Tfr_ID == this.Attr_Tfr_ID);
            CIMClassO_TFR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_TFR)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassV_PAR> LinkedFromR627()
        {
            var candidates = repository.GetCIInstances(domainName, "V_PAR").Where(i => ((CIMClassV_PAR)i).Attr_Statement_ID == this.Attr_Statement_ID);
            var linked = new List<CIMClassV_PAR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_PAR)c);
            }
            return linked;

        }

        public CIMClassACT_SMT CIMSuperClassACT_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SMT").Where(i => ((CIMClassACT_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassACT_UNRBase : CIMOOAofOOAClass, CIMClassACT_UNR
    {
        public string Attr_Statement_ID { get; set; }
        public string Attr_One_Side_Var_ID { get; set; }
        public string Attr_Other_Side_Var_ID { get; set; }
        public string Attr_relationship_phrase { get; set; }
        public string Attr_Rel_ID { get; set; }
        public int Attr_associationNumberLineNumber { get; set; }
        public int Attr_associationNumberColumn { get; set; }
        public int Attr_associationPhraseLineNumber { get; set; }
        public int Attr_associationPhraseColumn { get; set; }

        public CIMClassACT_UNRBase(CIModelRepository repository, string Statement_ID, string One_Side_Var_ID, string Other_Side_Var_ID, string relationship_phrase, string Rel_ID, int associationNumberLineNumber, int associationNumberColumn, int associationPhraseLineNumber, int associationPhraseColumn ) : base(repository, "ACT_UNR")
        {
            Attr_Statement_ID = Statement_ID;
            Attr_One_Side_Var_ID = One_Side_Var_ID;
            Attr_Other_Side_Var_ID = Other_Side_Var_ID;
            Attr_relationship_phrase = relationship_phrase;
            Attr_Rel_ID = Rel_ID;
            Attr_associationNumberLineNumber = associationNumberLineNumber;
            Attr_associationNumberColumn = associationNumberColumn;
            Attr_associationPhraseLineNumber = associationPhraseLineNumber;
            Attr_associationPhraseColumn = associationPhraseColumn;
        }

        public CIMClassACT_UNRBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"], (string)attrArgs["One_Side_Var_ID"], (string)attrArgs["Other_Side_Var_ID"], (string)attrArgs["relationship_phrase"], (string)attrArgs["Rel_ID"], (int)attrArgs["associationNumberLineNumber"], (int)attrArgs["associationNumberColumn"], (int)attrArgs["associationPhraseLineNumber"], (int)attrArgs["associationPhraseColumn"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassV_VAR LinkedToR620()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAR").Where(i => ((CIMClassV_VAR)i).Attr_Var_ID == this.Attr_One_Side_Var_ID);
            CIMClassV_VAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAR)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAR LinkedToR621()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAR").Where(i => ((CIMClassV_VAR)i).Attr_Var_ID == this.Attr_Other_Side_Var_ID);
            CIMClassV_VAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAR)candidates.First();
            }
            return linked;

        }

        public CIMClassR_REL LinkedToR655()
        {
            var candidates = repository.GetCIInstances(domainName, "R_REL").Where(i => ((CIMClassR_REL)i).Attr_Rel_ID == this.Attr_Rel_ID);
            CIMClassR_REL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_REL)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_SMT CIMSuperClassACT_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SMT").Where(i => ((CIMClassACT_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassACT_URUBase : CIMOOAofOOAClass, CIMClassACT_URU
    {
        public string Attr_Statement_ID { get; set; }
        public string Attr_One_Side_Var_ID { get; set; }
        public string Attr_Other_Side_Var_ID { get; set; }
        public string Attr_Associative_Var_ID { get; set; }
        public string Attr_relationship_phrase { get; set; }
        public string Attr_Rel_ID { get; set; }
        public int Attr_associationNumberLineNumber { get; set; }
        public int Attr_associationNumberColumn { get; set; }
        public int Attr_associationPhraseLineNumber { get; set; }
        public int Attr_associationPhraseColumn { get; set; }

        public CIMClassACT_URUBase(CIModelRepository repository, string Statement_ID, string One_Side_Var_ID, string Other_Side_Var_ID, string Associative_Var_ID, string relationship_phrase, string Rel_ID, int associationNumberLineNumber, int associationNumberColumn, int associationPhraseLineNumber, int associationPhraseColumn ) : base(repository, "ACT_URU")
        {
            Attr_Statement_ID = Statement_ID;
            Attr_One_Side_Var_ID = One_Side_Var_ID;
            Attr_Other_Side_Var_ID = Other_Side_Var_ID;
            Attr_Associative_Var_ID = Associative_Var_ID;
            Attr_relationship_phrase = relationship_phrase;
            Attr_Rel_ID = Rel_ID;
            Attr_associationNumberLineNumber = associationNumberLineNumber;
            Attr_associationNumberColumn = associationNumberColumn;
            Attr_associationPhraseLineNumber = associationPhraseLineNumber;
            Attr_associationPhraseColumn = associationPhraseColumn;
        }

        public CIMClassACT_URUBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"], (string)attrArgs["One_Side_Var_ID"], (string)attrArgs["Other_Side_Var_ID"], (string)attrArgs["Associative_Var_ID"], (string)attrArgs["relationship_phrase"], (string)attrArgs["Rel_ID"], (int)attrArgs["associationNumberLineNumber"], (int)attrArgs["associationNumberColumn"], (int)attrArgs["associationPhraseLineNumber"], (int)attrArgs["associationPhraseColumn"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassV_VAR LinkedToR622()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAR").Where(i => ((CIMClassV_VAR)i).Attr_Var_ID == this.Attr_One_Side_Var_ID);
            CIMClassV_VAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAR)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAR LinkedToR623()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAR").Where(i => ((CIMClassV_VAR)i).Attr_Var_ID == this.Attr_Other_Side_Var_ID);
            CIMClassV_VAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAR)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAR LinkedToR624()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAR").Where(i => ((CIMClassV_VAR)i).Attr_Var_ID == this.Attr_Associative_Var_ID);
            CIMClassV_VAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAR)candidates.First();
            }
            return linked;

        }

        public CIMClassR_REL LinkedToR656()
        {
            var candidates = repository.GetCIInstances(domainName, "R_REL").Where(i => ((CIMClassR_REL)i).Attr_Rel_ID == this.Attr_Rel_ID);
            CIMClassR_REL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_REL)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_SMT CIMSuperClassACT_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SMT").Where(i => ((CIMClassACT_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassACT_WHLBase : CIMOOAofOOAClass, CIMClassACT_WHL
    {
        public string Attr_Statement_ID { get; set; }
        public string Attr_Value_ID { get; set; }
        public string Attr_Block_ID { get; set; }

        public CIMClassACT_WHLBase(CIModelRepository repository, string Statement_ID, string Value_ID, string Block_ID ) : base(repository, "ACT_WHL")
        {
            Attr_Statement_ID = Statement_ID;
            Attr_Value_ID = Value_ID;
            Attr_Block_ID = Block_ID;
        }

        public CIMClassACT_WHLBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"], (string)attrArgs["Value_ID"], (string)attrArgs["Block_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassACT_BLK LinkedToR608()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_BLK").Where(i => ((CIMClassACT_BLK)i).Attr_Block_ID == this.Attr_Block_ID);
            CIMClassACT_BLK linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_BLK)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAL LinkedToR626()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_SMT CIMSuperClassACT_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SMT").Where(i => ((CIMClassACT_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassA_ACTBase : CIMOOAofOOAClass, CIMClassA_ACT
    {
        public string Attr_Id { get; set; }

        public CIMClassA_ACTBase(CIModelRepository repository, string Id ) : base(repository, "A_ACT")
        {
            Attr_Id = Id;
        }

        public CIMClassA_ACTBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Id"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMSubClassR1107 SubClassR1107()
        {
            var subClassNames = new List<string>() { "A_AE", "A_GA", "A_SS" };
            CIMSubClassR1107 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR1107)i).CIMSuperClassA_ACT() != null && (((CIMSubClassR1107)i).CIMSuperClassA_ACT().Attr_Id == this.Attr_Id));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR1107)candidates.First();
                    break;
                }
            }
            return subClass;

        }

        public CIMClassA_N CIMSuperClassA_N()
        {
            var candidates = repository.GetCIInstances(domainName, "A_N").Where(i => ((CIMClassA_N)i).Attr_Id == this.Attr_Id);
            CIMClassA_N linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassA_N)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassA_AEBase : CIMOOAofOOAClass, CIMClassA_AE
    {
        public string Attr_Id { get; set; }

        public CIMClassA_AEBase(CIModelRepository repository, string Id ) : base(repository, "A_AE")
        {
            Attr_Id = Id;
        }

        public CIMClassA_AEBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Id"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMSubClassR1112 SubClassR1112()
        {
            var subClassNames = new List<string>() { "A_ATE", "A_AEA" };
            CIMSubClassR1112 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR1112)i).CIMSuperClassA_AE() != null && (((CIMSubClassR1112)i).CIMSuperClassA_AE().Attr_Id == this.Attr_Id));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR1112)candidates.First();
                    break;
                }
            }
            return subClass;

        }

        public CIMClassA_ACT CIMSuperClassA_ACT()
        {
            var candidates = repository.GetCIInstances(domainName, "A_ACT").Where(i => ((CIMClassA_ACT)i).Attr_Id == this.Attr_Id);
            CIMClassA_ACT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassA_ACT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassA_AEABase : CIMOOAofOOAClass, CIMClassA_AEA
    {
        public string Attr_Id { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }

        public CIMClassA_AEABase(CIModelRepository repository, string Id, string Name, string Descrip ) : base(repository, "A_AEA")
        {
            Attr_Id = Id;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
        }

        public CIMClassA_AEABase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Id"], (string)attrArgs["Name"], (string)attrArgs["Descrip"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassA_AE CIMSuperClassA_AE()
        {
            var candidates = repository.GetCIInstances(domainName, "A_AE").Where(i => ((CIMClassA_AE)i).Attr_Id == this.Attr_Id);
            CIMClassA_AE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassA_AE)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassA_AFBase : CIMOOAofOOAClass, CIMClassA_AF
    {
        public string Attr_Id { get; set; }
        public string Attr_Descrip { get; set; }

        public CIMClassA_AFBase(CIModelRepository repository, string Id, string Descrip ) : base(repository, "A_AF")
        {
            Attr_Id = Id;
            Attr_Descrip = Descrip;
        }

        public CIMClassA_AFBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Id"], (string)attrArgs["Descrip"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassA_CTL CIMSuperClassA_CTL()
        {
            var candidates = repository.GetCIInstances(domainName, "A_CTL").Where(i => ((CIMClassA_CTL)i).Attr_Id == this.Attr_Id);
            CIMClassA_CTL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassA_CTL)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassA_APBase : CIMOOAofOOAClass, CIMClassA_AP
    {
        public string Attr_Id { get; set; }
        public string Attr_Package_IDdeprecated { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }

        public CIMClassA_APBase(CIModelRepository repository, string Id, string Package_IDdeprecated, string Name, string Descrip ) : base(repository, "A_AP")
        {
            Attr_Id = Id;
            Attr_Package_IDdeprecated = Package_IDdeprecated;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
        }

        public CIMClassA_APBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Id"], (string)attrArgs["Package_IDdeprecated"], (string)attrArgs["Name"], (string)attrArgs["Descrip"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassPE_PE CIMSuperClassPE_PE()
        {
            var candidates = repository.GetCIInstances(domainName, "PE_PE").Where(i => ((CIMClassPE_PE)i).Attr_Element_ID == this.Attr_Id);
            CIMClassPE_PE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassPE_PE)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassA_ATEBase : CIMOOAofOOAClass, CIMClassA_ATE
    {
        public string Attr_Id { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }

        public CIMClassA_ATEBase(CIModelRepository repository, string Id, string Name, string Descrip ) : base(repository, "A_ATE")
        {
            Attr_Id = Id;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
        }

        public CIMClassA_ATEBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Id"], (string)attrArgs["Name"], (string)attrArgs["Descrip"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassA_AE CIMSuperClassA_AE()
        {
            var candidates = repository.GetCIInstances(domainName, "A_AE").Where(i => ((CIMClassA_AE)i).Attr_Id == this.Attr_Id);
            CIMClassA_AE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassA_AE)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassA_CTLBase : CIMOOAofOOAClass, CIMClassA_CTL
    {
        public string Attr_Id { get; set; }

        public CIMClassA_CTLBase(CIModelRepository repository, string Id ) : base(repository, "A_CTL")
        {
            Attr_Id = Id;
        }

        public CIMClassA_CTLBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Id"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMSubClassR1106 SubClassR1106()
        {
            var subClassNames = new List<string>() { "A_FF", "A_AF", "A_INI", "A_DM", "A_FJ" };
            CIMSubClassR1106 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR1106)i).CIMSuperClassA_CTL() != null && (((CIMSubClassR1106)i).CIMSuperClassA_CTL().Attr_Id == this.Attr_Id));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR1106)candidates.First();
                    break;
                }
            }
            return subClass;

        }

        public CIMClassA_N CIMSuperClassA_N()
        {
            var candidates = repository.GetCIInstances(domainName, "A_N").Where(i => ((CIMClassA_N)i).Attr_Id == this.Attr_Id);
            CIMClassA_N linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassA_N)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassA_DMBase : CIMOOAofOOAClass, CIMClassA_DM
    {
        public string Attr_Id { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }

        public CIMClassA_DMBase(CIModelRepository repository, string Id, string Name, string Descrip ) : base(repository, "A_DM")
        {
            Attr_Id = Id;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
        }

        public CIMClassA_DMBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Id"], (string)attrArgs["Name"], (string)attrArgs["Descrip"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassA_CTL CIMSuperClassA_CTL()
        {
            var candidates = repository.GetCIInstances(domainName, "A_CTL").Where(i => ((CIMClassA_CTL)i).Attr_Id == this.Attr_Id);
            CIMClassA_CTL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassA_CTL)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassA_EBase : CIMOOAofOOAClass, CIMClassA_E
    {
        public string Attr_Id { get; set; }
        public string Attr_Package_IDdeprecated { get; set; }
        public string Attr_Guard { get; set; }
        public string Attr_Descrip { get; set; }
        public string Attr_TargetId { get; set; }
        public string Attr_SourceId { get; set; }

        public CIMClassA_EBase(CIModelRepository repository, string Id, string Package_IDdeprecated, string Guard, string Descrip, string TargetId, string SourceId ) : base(repository, "A_E")
        {
            Attr_Id = Id;
            Attr_Package_IDdeprecated = Package_IDdeprecated;
            Attr_Guard = Guard;
            Attr_Descrip = Descrip;
            Attr_TargetId = TargetId;
            Attr_SourceId = SourceId;
        }

        public CIMClassA_EBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Id"], (string)attrArgs["Package_IDdeprecated"], (string)attrArgs["Guard"], (string)attrArgs["Descrip"], (string)attrArgs["TargetId"], (string)attrArgs["SourceId"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassA_N LinkedToR1103()
        {
            var candidates = repository.GetCIInstances(domainName, "A_N").Where(i => ((CIMClassA_N)i).Attr_Id == this.Attr_TargetId);
            CIMClassA_N linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassA_N)candidates.First();
            }
            return linked;

        }

        public CIMClassA_N LinkedToR1104()
        {
            var candidates = repository.GetCIInstances(domainName, "A_N").Where(i => ((CIMClassA_N)i).Attr_Id == this.Attr_SourceId);
            CIMClassA_N linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassA_N)candidates.First();
            }
            return linked;

        }

        public CIMClassPE_PE CIMSuperClassPE_PE()
        {
            var candidates = repository.GetCIInstances(domainName, "PE_PE").Where(i => ((CIMClassPE_PE)i).Attr_Element_ID == this.Attr_Id);
            CIMClassPE_PE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassPE_PE)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassA_FFBase : CIMOOAofOOAClass, CIMClassA_FF
    {
        public string Attr_Id { get; set; }
        public string Attr_Descrip { get; set; }

        public CIMClassA_FFBase(CIModelRepository repository, string Id, string Descrip ) : base(repository, "A_FF")
        {
            Attr_Id = Id;
            Attr_Descrip = Descrip;
        }

        public CIMClassA_FFBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Id"], (string)attrArgs["Descrip"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassA_CTL CIMSuperClassA_CTL()
        {
            var candidates = repository.GetCIInstances(domainName, "A_CTL").Where(i => ((CIMClassA_CTL)i).Attr_Id == this.Attr_Id);
            CIMClassA_CTL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassA_CTL)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassA_FJBase : CIMOOAofOOAClass, CIMClassA_FJ
    {
        public string Attr_Id { get; set; }
        public string Attr_Descrip { get; set; }
        public string Attr_GuardCondition { get; set; }

        public CIMClassA_FJBase(CIModelRepository repository, string Id, string Descrip, string GuardCondition ) : base(repository, "A_FJ")
        {
            Attr_Id = Id;
            Attr_Descrip = Descrip;
            Attr_GuardCondition = GuardCondition;
        }

        public CIMClassA_FJBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Id"], (string)attrArgs["Descrip"], (string)attrArgs["GuardCondition"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassA_CTL CIMSuperClassA_CTL()
        {
            var candidates = repository.GetCIInstances(domainName, "A_CTL").Where(i => ((CIMClassA_CTL)i).Attr_Id == this.Attr_Id);
            CIMClassA_CTL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassA_CTL)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassA_GABase : CIMOOAofOOAClass, CIMClassA_GA
    {
        public string Attr_Id { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }

        public CIMClassA_GABase(CIModelRepository repository, string Id, string Name, string Descrip ) : base(repository, "A_GA")
        {
            Attr_Id = Id;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
        }

        public CIMClassA_GABase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Id"], (string)attrArgs["Name"], (string)attrArgs["Descrip"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassA_ACT CIMSuperClassA_ACT()
        {
            var candidates = repository.GetCIInstances(domainName, "A_ACT").Where(i => ((CIMClassA_ACT)i).Attr_Id == this.Attr_Id);
            CIMClassA_ACT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassA_ACT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassA_INIBase : CIMOOAofOOAClass, CIMClassA_INI
    {
        public string Attr_Id { get; set; }
        public string Attr_Descrip { get; set; }

        public CIMClassA_INIBase(CIModelRepository repository, string Id, string Descrip ) : base(repository, "A_INI")
        {
            Attr_Id = Id;
            Attr_Descrip = Descrip;
        }

        public CIMClassA_INIBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Id"], (string)attrArgs["Descrip"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassA_CTL CIMSuperClassA_CTL()
        {
            var candidates = repository.GetCIInstances(domainName, "A_CTL").Where(i => ((CIMClassA_CTL)i).Attr_Id == this.Attr_Id);
            CIMClassA_CTL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassA_CTL)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassA_NBase : CIMOOAofOOAClass, CIMClassA_N
    {
        public string Attr_Id { get; set; }
        public string Attr_Package_IDdeprecated { get; set; }

        public CIMClassA_NBase(CIModelRepository repository, string Id, string Package_IDdeprecated ) : base(repository, "A_N")
        {
            Attr_Id = Id;
            Attr_Package_IDdeprecated = Package_IDdeprecated;
        }

        public CIMClassA_NBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Id"], (string)attrArgs["Package_IDdeprecated"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public IEnumerable<CIMClassA_E> LinkedFromR1103()
        {
            var candidates = repository.GetCIInstances(domainName, "A_E").Where(i => ((CIMClassA_E)i).Attr_TargetId == this.Attr_Id);
            var linked = new List<CIMClassA_E>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassA_E)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassA_E> LinkedFromR1104()
        {
            var candidates = repository.GetCIInstances(domainName, "A_E").Where(i => ((CIMClassA_E)i).Attr_SourceId == this.Attr_Id);
            var linked = new List<CIMClassA_E>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassA_E)c);
            }
            return linked;

        }

        public CIMSubClassR1105 SubClassR1105()
        {
            var subClassNames = new List<string>() { "A_ACT", "A_OBJ", "A_CTL" };
            CIMSubClassR1105 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR1105)i).CIMSuperClassA_N() != null && (((CIMSubClassR1105)i).CIMSuperClassA_N().Attr_Id == this.Attr_Id));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR1105)candidates.First();
                    break;
                }
            }
            return subClass;

        }

        public CIMClassPE_PE CIMSuperClassPE_PE()
        {
            var candidates = repository.GetCIInstances(domainName, "PE_PE").Where(i => ((CIMClassPE_PE)i).Attr_Element_ID == this.Attr_Id);
            CIMClassPE_PE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassPE_PE)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassA_OBJBase : CIMOOAofOOAClass, CIMClassA_OBJ
    {
        public string Attr_Id { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }

        public CIMClassA_OBJBase(CIModelRepository repository, string Id, string Name, string Descrip ) : base(repository, "A_OBJ")
        {
            Attr_Id = Id;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
        }

        public CIMClassA_OBJBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Id"], (string)attrArgs["Name"], (string)attrArgs["Descrip"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassA_N CIMSuperClassA_N()
        {
            var candidates = repository.GetCIInstances(domainName, "A_N").Where(i => ((CIMClassA_N)i).Attr_Id == this.Attr_Id);
            CIMClassA_N linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassA_N)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassA_SSBase : CIMOOAofOOAClass, CIMClassA_SS
    {
        public string Attr_Id { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }

        public CIMClassA_SSBase(CIModelRepository repository, string Id, string Name, string Descrip ) : base(repository, "A_SS")
        {
            Attr_Id = Id;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
        }

        public CIMClassA_SSBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Id"], (string)attrArgs["Name"], (string)attrArgs["Descrip"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassA_ACT CIMSuperClassA_ACT()
        {
            var candidates = repository.GetCIInstances(domainName, "A_ACT").Where(i => ((CIMClassA_ACT)i).Attr_Id == this.Attr_Id);
            CIMClassA_ACT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassA_ACT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassCL_ICBase : CIMOOAofOOAClass, CIMClassCL_IC
    {
        public string Attr_Id { get; set; }
        public string Attr_AssignedComp_Id { get; set; }
        public string Attr_ParentComp_Id { get; set; }
        public string Attr_Component_Package_IDdeprecated { get; set; }
        public int Attr_Mult { get; set; }
        public string Attr_ClassifierName { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }

        public CIMClassCL_ICBase(CIModelRepository repository, string Id, string AssignedComp_Id, string ParentComp_Id, string Component_Package_IDdeprecated, int Mult, string ClassifierName, string Name, string Descrip ) : base(repository, "CL_IC")
        {
            Attr_Id = Id;
            Attr_AssignedComp_Id = AssignedComp_Id;
            Attr_ParentComp_Id = ParentComp_Id;
            Attr_Component_Package_IDdeprecated = Component_Package_IDdeprecated;
            Attr_Mult = Mult;
            Attr_ClassifierName = ClassifierName;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
        }

        public CIMClassCL_ICBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Id"], (string)attrArgs["AssignedComp_Id"], (string)attrArgs["ParentComp_Id"], (string)attrArgs["Component_Package_IDdeprecated"], (int)attrArgs["Mult"], (string)attrArgs["ClassifierName"], (string)attrArgs["Name"], (string)attrArgs["Descrip"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassC_C LinkedToR4201()
        {
            var candidates = repository.GetCIInstances(domainName, "C_C").Where(i => ((CIMClassC_C)i).Attr_Id == this.Attr_AssignedComp_Id);
            CIMClassC_C linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_C)candidates.First();
            }
            return linked;

        }

        public CIMClassC_C LinkedToR4205()
        {
            var candidates = repository.GetCIInstances(domainName, "C_C").Where(i => ((CIMClassC_C)i).Attr_Id == this.Attr_ParentComp_Id);
            CIMClassC_C linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_C)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_CI LinkedFromR2009()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_CI").Where(i => ((CIMClassTE_CI)i).Attr_cl_icId == this.Attr_Id);
            CIMClassTE_CI linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_CI)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassI_EXE> LinkedFromR2963()
        {
            var candidates = repository.GetCIInstances(domainName, "I_EXE").Where(i => ((CIMClassI_EXE)i).Attr_ImportedComponent_Id == this.Attr_Id);
            var linked = new List<CIMClassI_EXE>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_EXE)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassCL_POR> LinkedFromR4707()
        {
            var candidates = repository.GetCIInstances(domainName, "CL_POR").Where(i => ((CIMClassCL_POR)i).Attr_CL_IC_Id == this.Attr_Id);
            var linked = new List<CIMClassCL_POR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassCL_POR)c);
            }
            return linked;

        }

        public CIMClassPE_PE CIMSuperClassPE_PE()
        {
            var candidates = repository.GetCIInstances(domainName, "PE_PE").Where(i => ((CIMClassPE_PE)i).Attr_Element_ID == this.Attr_Id);
            CIMClassPE_PE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassPE_PE)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassCL_IIRBase : CIMOOAofOOAClass, CIMClassCL_IIR
    {
        public string Attr_Id { get; set; }
        public string Attr_Ref_Id { get; set; }
        public string Attr_CL_POR_Id { get; set; }
        public string Attr_Delegation_Id { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }

        public CIMClassCL_IIRBase(CIModelRepository repository, string Id, string Ref_Id, string CL_POR_Id, string Delegation_Id, string Name, string Descrip ) : base(repository, "CL_IIR")
        {
            Attr_Id = Id;
            Attr_Ref_Id = Ref_Id;
            Attr_CL_POR_Id = CL_POR_Id;
            Attr_Delegation_Id = Delegation_Id;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
        }

        public CIMClassCL_IIRBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Id"], (string)attrArgs["Ref_Id"], (string)attrArgs["CL_POR_Id"], (string)attrArgs["Delegation_Id"], (string)attrArgs["Name"], (string)attrArgs["Descrip"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassC_IR LinkedToR4701()
        {
            var candidates = repository.GetCIInstances(domainName, "C_IR").Where(i => ((CIMClassC_IR)i).Attr_Id == this.Attr_Ref_Id);
            CIMClassC_IR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_IR)candidates.First();
            }
            return linked;

        }

        public CIMClassC_DG LinkedToR4704()
        {
            var candidates = repository.GetCIInstances(domainName, "C_DG").Where(i => ((CIMClassC_DG)i).Attr_Id == this.Attr_Delegation_Id);
            CIMClassC_DG linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_DG)candidates.First();
            }
            return linked;

        }

        public CIMClassCL_POR LinkedToR4708()
        {
            var candidates = repository.GetCIInstances(domainName, "CL_POR").Where(i => ((CIMClassCL_POR)i).Attr_Id == this.Attr_CL_POR_Id);
            CIMClassCL_POR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassCL_POR)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_IIR LinkedFromR2013()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_IIR").Where(i => ((CIMClassTE_IIR)i).Attr_cl_iirId == this.Attr_Id);
            CIMClassTE_IIR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_IIR)candidates.First();
            }
            return linked;

        }

        public CIMSubClassR4703 SubClassR4703()
        {
            var subClassNames = new List<string>() { "CL_IP", "CL_IR" };
            CIMSubClassR4703 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR4703)i).CIMSuperClassCL_IIR() != null && (((CIMSubClassR4703)i).CIMSuperClassCL_IIR().Attr_Id == this.Attr_Id));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR4703)candidates.First();
                    break;
                }
            }
            return subClass;

        }

    }
    public class CIMClassCL_IPBase : CIMOOAofOOAClass, CIMClassCL_IP
    {
        public string Attr_Id { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }

        public CIMClassCL_IPBase(CIModelRepository repository, string Id, string Name, string Descrip ) : base(repository, "CL_IP")
        {
            Attr_Id = Id;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
        }

        public CIMClassCL_IPBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Id"], (string)attrArgs["Name"], (string)attrArgs["Descrip"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassCL_IIR CIMSuperClassCL_IIR()
        {
            var candidates = repository.GetCIInstances(domainName, "CL_IIR").Where(i => ((CIMClassCL_IIR)i).Attr_Id == this.Attr_Id);
            CIMClassCL_IIR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassCL_IIR)candidates.First();
            }
            return linked;

        }
        public IEnumerable<CIMClassCL_IPINS> LinkedOneSideR4705()
        {
            var candidates = repository.GetCIInstances(domainName, "CL_IPINS").Where(i => ((CIMClassCL_IPINS)i).Attr_ImportedProvision_Id == this.Attr_Id);
            var linked = new List<CIMClassCL_IPINS>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassCL_IPINS)c);
            }
            return linked;

        }
    }
    public class CIMClassCL_IPINSBase : CIMOOAofOOAClass, CIMClassCL_IPINS
    {
        public string Attr_Satisfaction_Id { get; set; }
        public string Attr_ImportedProvision_Id { get; set; }

        public CIMClassCL_IPINSBase(CIModelRepository repository, string Satisfaction_Id, string ImportedProvision_Id ) : base(repository, "CL_IPINS")
        {
            Attr_Satisfaction_Id = Satisfaction_Id;
            Attr_ImportedProvision_Id = ImportedProvision_Id;
        }

        public CIMClassCL_IPINSBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Satisfaction_Id"], (string)attrArgs["ImportedProvision_Id"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

         public CIMClassC_SF LinkedOneSideR4705()
         {
            var candidates = repository.GetCIInstances(domainName, "C_SF").Where(i => ((CIMClassC_SF)i).Attr_Id == this.Attr_Satisfaction_Id);
            CIMClassC_SF linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_SF)candidates.First();
            }
            return linked;

        }

        public CIMClassCL_IP LinkedOtherSideR4705()
        {
            var candidates = repository.GetCIInstances(domainName, "CL_IP").Where(i => ((CIMClassCL_IP)i).Attr_Id == this.Attr_ImportedProvision_Id);
            CIMClassCL_IP linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassCL_IP)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassCL_IRBase : CIMOOAofOOAClass, CIMClassCL_IR
    {
        public string Attr_Id { get; set; }
        public string Attr_Satisfaction_Element_Id { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }

        public CIMClassCL_IRBase(CIModelRepository repository, string Id, string Satisfaction_Element_Id, string Name, string Descrip ) : base(repository, "CL_IR")
        {
            Attr_Id = Id;
            Attr_Satisfaction_Element_Id = Satisfaction_Element_Id;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
        }

        public CIMClassCL_IRBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Id"], (string)attrArgs["Satisfaction_Element_Id"], (string)attrArgs["Name"], (string)attrArgs["Descrip"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassC_SF LinkedToR4706()
        {
            var candidates = repository.GetCIInstances(domainName, "C_SF").Where(i => ((CIMClassC_SF)i).Attr_Id == this.Attr_Satisfaction_Element_Id);
            CIMClassC_SF linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_SF)candidates.First();
            }
            return linked;

        }

        public CIMClassCL_IIR CIMSuperClassCL_IIR()
        {
            var candidates = repository.GetCIInstances(domainName, "CL_IIR").Where(i => ((CIMClassCL_IIR)i).Attr_Id == this.Attr_Id);
            CIMClassCL_IIR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassCL_IIR)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassCL_PORBase : CIMOOAofOOAClass, CIMClassCL_POR
    {
        public string Attr_CL_IC_Id { get; set; }
        public string Attr_C_PO_Id { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Id { get; set; }
        public string Attr_Key_Lett { get; set; }

        public CIMClassCL_PORBase(CIModelRepository repository, string CL_IC_Id, string C_PO_Id, string Name, string Id, string Key_Lett ) : base(repository, "CL_POR")
        {
            Attr_CL_IC_Id = CL_IC_Id;
            Attr_C_PO_Id = C_PO_Id;
            Attr_Name = Name;
            Attr_Id = Id;
            Attr_Key_Lett = Key_Lett;
        }

        public CIMClassCL_PORBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["CL_IC_Id"], (string)attrArgs["C_PO_Id"], (string)attrArgs["Name"], (string)attrArgs["Id"], (string)attrArgs["Key_Lett"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassCL_IC LinkedToR4707()
        {
            var candidates = repository.GetCIInstances(domainName, "CL_IC").Where(i => ((CIMClassCL_IC)i).Attr_Id == this.Attr_CL_IC_Id);
            CIMClassCL_IC linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassCL_IC)candidates.First();
            }
            return linked;

        }

        public CIMClassC_PO LinkedToR4709()
        {
            var candidates = repository.GetCIInstances(domainName, "C_PO").Where(i => ((CIMClassC_PO)i).Attr_Id == this.Attr_C_PO_Id);
            CIMClassC_PO linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_PO)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassCL_IIR> LinkedFromR4708()
        {
            var candidates = repository.GetCIInstances(domainName, "CL_IIR").Where(i => ((CIMClassCL_IIR)i).Attr_CL_POR_Id == this.Attr_Id);
            var linked = new List<CIMClassCL_IIR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassCL_IIR)c);
            }
            return linked;

        }

    }
    public class CIMClassCNST_CSPBase : CIMOOAofOOAClass, CIMClassCNST_CSP
    {
        public string Attr_Constant_Spec_ID { get; set; }
        public string Attr_InformalGroupName { get; set; }
        public string Attr_Descrip { get; set; }

        public CIMClassCNST_CSPBase(CIModelRepository repository, string Constant_Spec_ID, string InformalGroupName, string Descrip ) : base(repository, "CNST_CSP")
        {
            Attr_Constant_Spec_ID = Constant_Spec_ID;
            Attr_InformalGroupName = InformalGroupName;
            Attr_Descrip = Descrip;
        }

        public CIMClassCNST_CSPBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Constant_Spec_ID"], (string)attrArgs["InformalGroupName"], (string)attrArgs["Descrip"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public IEnumerable<CIMClassCNST_SYC> LinkedFromR1504()
        {
            var candidates = repository.GetCIInstances(domainName, "CNST_SYC").Where(i => ((CIMClassCNST_SYC)i).Attr_Constant_Spec_ID == this.Attr_Constant_Spec_ID);
            var linked = new List<CIMClassCNST_SYC>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassCNST_SYC)c);
            }
            return linked;

        }

        public CIMClassPE_PE CIMSuperClassPE_PE()
        {
            var candidates = repository.GetCIInstances(domainName, "PE_PE").Where(i => ((CIMClassPE_PE)i).Attr_Element_ID == this.Attr_Constant_Spec_ID);
            CIMClassPE_PE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassPE_PE)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassCNST_LFSCBase : CIMOOAofOOAClass, CIMClassCNST_LFSC
    {
        public string Attr_Const_ID { get; set; }
        public string Attr_DT_ID_Deprecated { get; set; }

        public CIMClassCNST_LFSCBase(CIModelRepository repository, string Const_ID, string DT_ID_Deprecated ) : base(repository, "CNST_LFSC")
        {
            Attr_Const_ID = Const_ID;
            Attr_DT_ID_Deprecated = DT_ID_Deprecated;
        }

        public CIMClassCNST_LFSCBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Const_ID"], (string)attrArgs["DT_ID_Deprecated"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassCNST_SYC LinkedToR1502()
        {
            var candidates = repository.GetCIInstances(domainName, "CNST_SYC").Where(i => ((CIMClassCNST_SYC)i).Attr_Const_ID == this.Attr_Const_ID);
            CIMClassCNST_SYC linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassCNST_SYC)candidates.First();
            }
            return linked;

        }

        public CIMClassCNST_LSC LinkedFromR1503()
        {
            var candidates = repository.GetCIInstances(domainName, "CNST_LSC").Where(i => ((CIMClassCNST_LSC)i).Attr_Const_ID == this.Attr_Const_ID);
            CIMClassCNST_LSC linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassCNST_LSC)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassCNST_LSCBase : CIMOOAofOOAClass, CIMClassCNST_LSC
    {
        public string Attr_Const_ID { get; set; }
        public string Attr_DT_ID_Deprecated { get; set; }
        public string Attr_Value { get; set; }

        public CIMClassCNST_LSCBase(CIModelRepository repository, string Const_ID, string DT_ID_Deprecated, string Value ) : base(repository, "CNST_LSC")
        {
            Attr_Const_ID = Const_ID;
            Attr_DT_ID_Deprecated = DT_ID_Deprecated;
            Attr_Value = Value;
        }

        public CIMClassCNST_LSCBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Const_ID"], (string)attrArgs["DT_ID_Deprecated"], (string)attrArgs["Value"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassCNST_LFSC LinkedToR1503()
        {
            var candidates = repository.GetCIInstances(domainName, "CNST_LFSC").Where(i => ((CIMClassCNST_LFSC)i).Attr_Const_ID == this.Attr_Const_ID);
            CIMClassCNST_LFSC linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassCNST_LFSC)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassCNST_SYCBase : CIMOOAofOOAClass, CIMClassCNST_SYC
    {
        public string Attr_Const_ID { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }
        public string Attr_DT_ID { get; set; }
        public string Attr_Constant_Spec_ID { get; set; }
        public string Attr_Previous_Const_ID { get; set; }
        public string Attr_Previous_DT_DT_ID_Deprecated { get; set; }

        public CIMClassCNST_SYCBase(CIModelRepository repository, string Const_ID, string Name, string Descrip, string DT_ID, string Constant_Spec_ID, string Previous_Const_ID, string Previous_DT_DT_ID_Deprecated ) : base(repository, "CNST_SYC")
        {
            Attr_Const_ID = Const_ID;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
            Attr_DT_ID = DT_ID;
            Attr_Constant_Spec_ID = Constant_Spec_ID;
            Attr_Previous_Const_ID = Previous_Const_ID;
            Attr_Previous_DT_DT_ID_Deprecated = Previous_DT_DT_ID_Deprecated;
        }

        public CIMClassCNST_SYCBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Const_ID"], (string)attrArgs["Name"], (string)attrArgs["Descrip"], (string)attrArgs["DT_ID"], (string)attrArgs["Constant_Spec_ID"], (string)attrArgs["Previous_Const_ID"], (string)attrArgs["Previous_DT_DT_ID_Deprecated"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassS_DT LinkedToR1500()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DT").Where(i => ((CIMClassS_DT)i).Attr_DT_ID == this.Attr_DT_ID);
            CIMClassS_DT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_DT)candidates.First();
            }
            return linked;

        }

        public CIMClassCNST_CSP LinkedToR1504()
        {
            var candidates = repository.GetCIInstances(domainName, "CNST_CSP").Where(i => ((CIMClassCNST_CSP)i).Attr_Constant_Spec_ID == this.Attr_Constant_Spec_ID);
            CIMClassCNST_CSP linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassCNST_CSP)candidates.First();
            }
            return linked;

        }

        public CIMClassCNST_SYC LinkedToR1505Precedes()
        {
            var candidates = repository.GetCIInstances(domainName, "CNST_SYC").Where(i => ((CIMClassCNST_SYC)i).Attr_Const_ID == this.Attr_Previous_Const_ID);
            CIMClassCNST_SYC linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassCNST_SYC)candidates.First();
            }
            return linked;

        }

        public CIMClassCNST_LFSC LinkedFromR1502()
        {
            var candidates = repository.GetCIInstances(domainName, "CNST_LFSC").Where(i => ((CIMClassCNST_LFSC)i).Attr_Const_ID == this.Attr_Const_ID);
            CIMClassCNST_LFSC linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassCNST_LFSC)candidates.First();
            }
            return linked;

        }

        public CIMClassCNST_SYC LinkedFromR1505Succeeds()
        {
            var candidates = repository.GetCIInstances(domainName, "CNST_SYC").Where(i => ((CIMClassCNST_SYC)i).Attr_Previous_Const_ID == this.Attr_Const_ID);
            CIMClassCNST_SYC linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassCNST_SYC)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassV_SCV> LinkedFromR850()
        {
            var candidates = repository.GetCIInstances(domainName, "V_SCV").Where(i => ((CIMClassV_SCV)i).Attr_Const_ID == this.Attr_Const_ID);
            var linked = new List<CIMClassV_SCV>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_SCV)c);
            }
            return linked;

        }

    }
    public class CIMClassCOMM_LNKBase : CIMOOAofOOAClass, CIMClassCOMM_LNK
    {
        public string Attr_Link_ID { get; set; }
        public string Attr_Rel_ID { get; set; }
        public string Attr_Numb { get; set; }
        public string Attr_Descrip { get; set; }
        public string Attr_StartText { get; set; }
        public string Attr_EndText { get; set; }
        public bool Attr_isFormal { get; set; }
        public int Attr_StartVisibility { get; set; }
        public int Attr_EndVisibility { get; set; }
        public string Attr_Start_Part_ID { get; set; }
        public string Attr_Destination_Part_ID { get; set; }

        public CIMClassCOMM_LNKBase(CIModelRepository repository, string Link_ID, string Rel_ID, string Numb, string Descrip, string StartText, string EndText, bool isFormal, int StartVisibility, int EndVisibility, string Start_Part_ID, string Destination_Part_ID ) : base(repository, "COMM_LNK")
        {
            Attr_Link_ID = Link_ID;
            Attr_Rel_ID = Rel_ID;
            Attr_Numb = Numb;
            Attr_Descrip = Descrip;
            Attr_StartText = StartText;
            Attr_EndText = EndText;
            Attr_isFormal = isFormal;
            Attr_StartVisibility = StartVisibility;
            Attr_EndVisibility = EndVisibility;
            Attr_Start_Part_ID = Start_Part_ID;
            Attr_Destination_Part_ID = Destination_Part_ID;
        }

        public CIMClassCOMM_LNKBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Link_ID"], (string)attrArgs["Rel_ID"], (string)attrArgs["Numb"], (string)attrArgs["Descrip"], (string)attrArgs["StartText"], (string)attrArgs["EndText"], (bool)attrArgs["isFormal"], (int)attrArgs["StartVisibility"], (int)attrArgs["EndVisibility"], (string)attrArgs["Start_Part_ID"], (string)attrArgs["Destination_Part_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassR_REL LinkedToR1128()
        {
            var candidates = repository.GetCIInstances(domainName, "R_REL").Where(i => ((CIMClassR_REL)i).Attr_Rel_ID == this.Attr_Rel_ID);
            CIMClassR_REL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_REL)candidates.First();
            }
            return linked;

        }

        public CIMClassSQ_P LinkedToR1133()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_P").Where(i => ((CIMClassSQ_P)i).Attr_Part_ID == this.Attr_Start_Part_ID);
            CIMClassSQ_P linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSQ_P)candidates.First();
            }
            return linked;

        }

        public CIMClassSQ_P LinkedToR1134()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_P").Where(i => ((CIMClassSQ_P)i).Attr_Part_ID == this.Attr_Destination_Part_ID);
            CIMClassSQ_P linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSQ_P)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassC_ASBase : CIMOOAofOOAClass, CIMClassC_AS
    {
        public string Attr_Id { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }
        public int Attr_Direction { get; set; }
        public string Attr_Previous_Id { get; set; }

        public CIMClassC_ASBase(CIModelRepository repository, string Id, string Name, string Descrip, int Direction, string Previous_Id ) : base(repository, "C_AS")
        {
            Attr_Id = Id;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
            Attr_Direction = Direction;
            Attr_Previous_Id = Previous_Id;
        }

        public CIMClassC_ASBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Id"], (string)attrArgs["Name"], (string)attrArgs["Descrip"], (int)attrArgs["Direction"], (string)attrArgs["Previous_Id"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassC_AS LinkedToR4020Precedes()
        {
            var candidates = repository.GetCIInstances(domainName, "C_AS").Where(i => ((CIMClassC_AS)i).Attr_Id == this.Attr_Previous_Id);
            CIMClassC_AS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_AS)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassMSG_SIG> LinkedFromR1021()
        {
            var candidates = repository.GetCIInstances(domainName, "MSG_SIG").Where(i => ((CIMClassMSG_SIG)i).Attr_Id == this.Attr_Id);
            var linked = new List<CIMClassMSG_SIG>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassMSG_SIG)c);
            }
            return linked;

        }

        public CIMClassC_AS LinkedFromR4020Succeeds()
        {
            var candidates = repository.GetCIInstances(domainName, "C_AS").Where(i => ((CIMClassC_AS)i).Attr_Previous_Id == this.Attr_Id);
            CIMClassC_AS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_AS)candidates.First();
            }
            return linked;

        }

        public CIMClassC_EP CIMSuperClassC_EP()
        {
            var candidates = repository.GetCIInstances(domainName, "C_EP").Where(i => ((CIMClassC_EP)i).Attr_Id == this.Attr_Id);
            CIMClassC_EP linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_EP)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassC_CBase : CIMOOAofOOAClass, CIMClassC_C
    {
        public string Attr_Id { get; set; }
        public string Attr_Package_IDdeprecated { get; set; }
        public string Attr_NestedComponent_IDdeprecated { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }
        public int Attr_Mult { get; set; }
        public string Attr_Root_Package_IDdeprecated { get; set; }
        public bool Attr_isRealized { get; set; }
        public string Attr_Realized_Class_Path { get; set; }
        public string Attr_Key_Lett { get; set; }

        public CIMClassC_CBase(CIModelRepository repository, string Id, string Package_IDdeprecated, string NestedComponent_IDdeprecated, string Name, string Descrip, int Mult, string Root_Package_IDdeprecated, bool isRealized, string Realized_Class_Path, string Key_Lett ) : base(repository, "C_C")
        {
            Attr_Id = Id;
            Attr_Package_IDdeprecated = Package_IDdeprecated;
            Attr_NestedComponent_IDdeprecated = NestedComponent_IDdeprecated;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
            Attr_Mult = Mult;
            Attr_Root_Package_IDdeprecated = Root_Package_IDdeprecated;
            Attr_isRealized = isRealized;
            Attr_Realized_Class_Path = Realized_Class_Path;
            Attr_Key_Lett = Key_Lett;
        }

        public CIMClassC_CBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Id"], (string)attrArgs["Package_IDdeprecated"], (string)attrArgs["NestedComponent_IDdeprecated"], (string)attrArgs["Name"], (string)attrArgs["Descrip"], (int)attrArgs["Mult"], (string)attrArgs["Root_Package_IDdeprecated"], (bool)attrArgs["isRealized"], (string)attrArgs["Realized_Class_Path"], (string)attrArgs["Key_Lett"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_C LinkedFromR2054()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_C").Where(i => ((CIMClassTE_C)i).Attr_cId == this.Attr_Id);
            CIMClassTE_C linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_C)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassI_EXE> LinkedFromR2955()
        {
            var candidates = repository.GetCIInstances(domainName, "I_EXE").Where(i => ((CIMClassI_EXE)i).Attr_Component_Id == this.Attr_Id);
            var linked = new List<CIMClassI_EXE>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_EXE)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassC_PO> LinkedFromR4010()
        {
            var candidates = repository.GetCIInstances(domainName, "C_PO").Where(i => ((CIMClassC_PO)i).Attr_Component_Id == this.Attr_Id);
            var linked = new List<CIMClassC_PO>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassC_PO)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassCL_IC> LinkedFromR4201()
        {
            var candidates = repository.GetCIInstances(domainName, "CL_IC").Where(i => ((CIMClassCL_IC)i).Attr_AssignedComp_Id == this.Attr_Id);
            var linked = new List<CIMClassCL_IC>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassCL_IC)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassCL_IC> LinkedFromR4205()
        {
            var candidates = repository.GetCIInstances(domainName, "CL_IC").Where(i => ((CIMClassCL_IC)i).Attr_ParentComp_Id == this.Attr_Id);
            var linked = new List<CIMClassCL_IC>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassCL_IC)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassPE_PE> LinkedFromR8003()
        {
            var candidates = repository.GetCIInstances(domainName, "PE_PE").Where(i => ((CIMClassPE_PE)i).Attr_Component_ID == this.Attr_Id);
            var linked = new List<CIMClassPE_PE>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassPE_PE)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassPE_CRS> LinkedFromR8007()
        {
            var candidates = repository.GetCIInstances(domainName, "PE_CRS").Where(i => ((CIMClassPE_CRS)i).Attr_Id == this.Attr_Id);
            var linked = new List<CIMClassPE_CRS>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassPE_CRS)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassSQ_COP> LinkedFromR955()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_COP").Where(i => ((CIMClassSQ_COP)i).Attr_Component_Id == this.Attr_Id);
            var linked = new List<CIMClassSQ_COP>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassSQ_COP)c);
            }
            return linked;

        }

        public CIMClassPE_PE CIMSuperClassPE_PE()
        {
            var candidates = repository.GetCIInstances(domainName, "PE_PE").Where(i => ((CIMClassPE_PE)i).Attr_Element_ID == this.Attr_Id);
            CIMClassPE_PE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassPE_PE)candidates.First();
            }
            return linked;

        }
        public IEnumerable<CIMClassACT_BIC> LinkedOtherSideR694()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_BIC").Where(i => ((CIMClassACT_BIC)i).Attr_Component_Id == this.Attr_Id);
            var linked = new List<CIMClassACT_BIC>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_BIC)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassPE_CVS> LinkedOtherSideR8004()
        {
            var candidates = repository.GetCIInstances(domainName, "PE_CVS").Where(i => ((CIMClassPE_CVS)i).Attr_Id == this.Attr_Id);
            var linked = new List<CIMClassPE_CVS>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassPE_CVS)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassPA_SIC> LinkedOtherSideR9000()
        {
            var candidates = repository.GetCIInstances(domainName, "PA_SIC").Where(i => ((CIMClassPA_SIC)i).Attr_Component_Id == this.Attr_Id);
            var linked = new List<CIMClassPA_SIC>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassPA_SIC)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassPA_DIC> LinkedOtherSideR9002()
        {
            var candidates = repository.GetCIInstances(domainName, "PA_DIC").Where(i => ((CIMClassPA_DIC)i).Attr_Component_Id == this.Attr_Id);
            var linked = new List<CIMClassPA_DIC>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassPA_DIC)c);
            }
            return linked;

        }

    }
    public class CIMClassC_DGBase : CIMOOAofOOAClass, CIMClassC_DG
    {
        public string Attr_Id { get; set; }
        public string Attr_Name { get; set; }

        public CIMClassC_DGBase(CIModelRepository repository, string Id, string Name ) : base(repository, "C_DG")
        {
            Attr_Id = Id;
            Attr_Name = Name;
        }

        public CIMClassC_DGBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Id"], (string)attrArgs["Name"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public IEnumerable<CIMClassI_RCH> LinkedFromR2972()
        {
            var candidates = repository.GetCIInstances(domainName, "I_RCH").Where(i => ((CIMClassI_RCH)i).Attr_Delegation_Id == this.Attr_Id);
            var linked = new List<CIMClassI_RCH>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_RCH)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassC_IR> LinkedFromR4014()
        {
            var candidates = repository.GetCIInstances(domainName, "C_IR").Where(i => ((CIMClassC_IR)i).Attr_Delegation_Id == this.Attr_Id);
            var linked = new List<CIMClassC_IR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassC_IR)c);
            }
            return linked;

        }

        public CIMClassCL_IIR LinkedFromR4704()
        {
            var candidates = repository.GetCIInstances(domainName, "CL_IIR").Where(i => ((CIMClassCL_IIR)i).Attr_Delegation_Id == this.Attr_Id);
            CIMClassCL_IIR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassCL_IIR)candidates.First();
            }
            return linked;

        }

        public CIMClassPE_PE CIMSuperClassPE_PE()
        {
            var candidates = repository.GetCIInstances(domainName, "PE_PE").Where(i => ((CIMClassPE_PE)i).Attr_Element_ID == this.Attr_Id);
            CIMClassPE_PE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassPE_PE)candidates.First();
            }
            return linked;

        }
        public IEnumerable<CIMClassC_RID> LinkedOneSideR4013()
        {
            var candidates = repository.GetCIInstances(domainName, "C_RID").Where(i => ((CIMClassC_RID)i).Attr_Delegation_Id == this.Attr_Id);
            var linked = new List<CIMClassC_RID>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassC_RID)c);
            }
            return linked;

        }
        public CIMClassPA_DIC LinkedOneSideR9002()
        {
            var candidates = repository.GetCIInstances(domainName, "PA_DIC").Where(i => ((CIMClassPA_DIC)i).Attr_Delegation_Id == this.Attr_Id);
            CIMClassPA_DIC linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassPA_DIC)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassC_EPBase : CIMOOAofOOAClass, CIMClassC_EP
    {
        public string Attr_Id { get; set; }
        public string Attr_Interface_Id { get; set; }
        public int Attr_Direction { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }
        public int Attr_Numb { get; set; }

        public CIMClassC_EPBase(CIModelRepository repository, string Id, string Interface_Id, int Direction, string Name, string Descrip, int Numb ) : base(repository, "C_EP")
        {
            Attr_Id = Id;
            Attr_Interface_Id = Interface_Id;
            Attr_Direction = Direction;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
            Attr_Numb = Numb;
        }

        public CIMClassC_EPBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Id"], (string)attrArgs["Interface_Id"], (int)attrArgs["Direction"], (string)attrArgs["Name"], (string)attrArgs["Descrip"], (int)attrArgs["Numb"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassC_I LinkedToR4003()
        {
            var candidates = repository.GetCIInstances(domainName, "C_I").Where(i => ((CIMClassC_I)i).Attr_Id == this.Attr_Interface_Id);
            CIMClassC_I linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_I)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassC_PP> LinkedFromR4006()
        {
            var candidates = repository.GetCIInstances(domainName, "C_PP").Where(i => ((CIMClassC_PP)i).Attr_Signal_Id == this.Attr_Id);
            var linked = new List<CIMClassC_PP>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassC_PP)c);
            }
            return linked;

        }

        public CIMSubClassR4004 SubClassR4004()
        {
            var subClassNames = new List<string>() { "C_IO", "C_AS" };
            CIMSubClassR4004 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR4004)i).CIMSuperClassC_EP() != null && (((CIMSubClassR4004)i).CIMSuperClassC_EP().Attr_Id == this.Attr_Id));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR4004)candidates.First();
                    break;
                }
            }
            return subClass;

        }

        public IEnumerable<CIMClassSPR_REP> LinkedOtherSideR4500()
        {
            var candidates = repository.GetCIInstances(domainName, "SPR_REP").Where(i => ((CIMClassSPR_REP)i).Attr_ExecutableProperty_Id == this.Attr_Id);
            var linked = new List<CIMClassSPR_REP>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassSPR_REP)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassSPR_PEP> LinkedOtherSideR4501()
        {
            var candidates = repository.GetCIInstances(domainName, "SPR_PEP").Where(i => ((CIMClassSPR_PEP)i).Attr_ExecutableProperty_Id == this.Attr_Id);
            var linked = new List<CIMClassSPR_PEP>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassSPR_PEP)c);
            }
            return linked;

        }

    }
    public class CIMClassC_IBase : CIMOOAofOOAClass, CIMClassC_I
    {
        public string Attr_Id { get; set; }
        public string Attr_Package_IDdeprecated { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }

        public CIMClassC_IBase(CIModelRepository repository, string Id, string Package_IDdeprecated, string Name, string Descrip ) : base(repository, "C_I")
        {
            Attr_Id = Id;
            Attr_Package_IDdeprecated = Package_IDdeprecated;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
        }

        public CIMClassC_IBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Id"], (string)attrArgs["Package_IDdeprecated"], (string)attrArgs["Name"], (string)attrArgs["Descrip"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public IEnumerable<CIMClassTE_PO> LinkedFromR2007()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_PO").Where(i => ((CIMClassTE_PO)i).Attr_c_iId == this.Attr_Id);
            var linked = new List<CIMClassTE_PO>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassTE_PO)c);
            }
            return linked;

        }

        public CIMClassTM_IF LinkedFromR2807()
        {
            var candidates = repository.GetCIInstances(domainName, "TM_IF").Where(i => ((CIMClassTM_IF)i).Attr_c_iId == this.Attr_Id);
            CIMClassTM_IF linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTM_IF)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassC_EP> LinkedFromR4003()
        {
            var candidates = repository.GetCIInstances(domainName, "C_EP").Where(i => ((CIMClassC_EP)i).Attr_Interface_Id == this.Attr_Id);
            var linked = new List<CIMClassC_EP>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassC_EP)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassC_IR> LinkedFromR4012()
        {
            var candidates = repository.GetCIInstances(domainName, "C_IR").Where(i => ((CIMClassC_IR)i).Attr_Formal_Interface_Id == this.Attr_Id);
            var linked = new List<CIMClassC_IR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassC_IR)c);
            }
            return linked;

        }

        public CIMClassPE_PE CIMSuperClassPE_PE()
        {
            var candidates = repository.GetCIInstances(domainName, "PE_PE").Where(i => ((CIMClassPE_PE)i).Attr_Element_ID == this.Attr_Id);
            CIMClassPE_PE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassPE_PE)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassC_IOBase : CIMOOAofOOAClass, CIMClassC_IO
    {
        public string Attr_Id { get; set; }
        public string Attr_DT_ID { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }
        public int Attr_Direction { get; set; }
        public string Attr_Return_Dimensions { get; set; }
        public string Attr_Previous_Id { get; set; }

        public CIMClassC_IOBase(CIModelRepository repository, string Id, string DT_ID, string Name, string Descrip, int Direction, string Return_Dimensions, string Previous_Id ) : base(repository, "C_IO")
        {
            Attr_Id = Id;
            Attr_DT_ID = DT_ID;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
            Attr_Direction = Direction;
            Attr_Return_Dimensions = Return_Dimensions;
            Attr_Previous_Id = Previous_Id;
        }

        public CIMClassC_IOBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Id"], (string)attrArgs["DT_ID"], (string)attrArgs["Name"], (string)attrArgs["Descrip"], (int)attrArgs["Direction"], (string)attrArgs["Return_Dimensions"], (string)attrArgs["Previous_Id"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassS_DT LinkedToR4008()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DT").Where(i => ((CIMClassS_DT)i).Attr_DT_ID == this.Attr_DT_ID);
            CIMClassS_DT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_DT)candidates.First();
            }
            return linked;

        }

        public CIMClassC_IO LinkedToR4019Precedes()
        {
            var candidates = repository.GetCIInstances(domainName, "C_IO").Where(i => ((CIMClassC_IO)i).Attr_Id == this.Attr_Previous_Id);
            CIMClassC_IO linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_IO)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassMSG_IOP> LinkedFromR1022()
        {
            var candidates = repository.GetCIInstances(domainName, "MSG_IOP").Where(i => ((CIMClassMSG_IOP)i).Attr_Id == this.Attr_Id);
            var linked = new List<CIMClassMSG_IOP>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassMSG_IOP)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassS_DIM> LinkedFromR4018()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DIM").Where(i => ((CIMClassS_DIM)i).Attr_Id == this.Attr_Id);
            var linked = new List<CIMClassS_DIM>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassS_DIM)c);
            }
            return linked;

        }

        public CIMClassC_IO LinkedFromR4019Succeeds()
        {
            var candidates = repository.GetCIInstances(domainName, "C_IO").Where(i => ((CIMClassC_IO)i).Attr_Previous_Id == this.Attr_Id);
            CIMClassC_IO linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_IO)candidates.First();
            }
            return linked;

        }

        public CIMClassC_EP CIMSuperClassC_EP()
        {
            var candidates = repository.GetCIInstances(domainName, "C_EP").Where(i => ((CIMClassC_EP)i).Attr_Id == this.Attr_Id);
            CIMClassC_EP linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_EP)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassC_IRBase : CIMOOAofOOAClass, CIMClassC_IR
    {
        public string Attr_Id { get; set; }
        public string Attr_Formal_Interface_Id { get; set; }
        public string Attr_Delegation_Id { get; set; }
        public string Attr_Port_Id { get; set; }

        public CIMClassC_IRBase(CIModelRepository repository, string Id, string Formal_Interface_Id, string Delegation_Id, string Port_Id ) : base(repository, "C_IR")
        {
            Attr_Id = Id;
            Attr_Formal_Interface_Id = Formal_Interface_Id;
            Attr_Delegation_Id = Delegation_Id;
            Attr_Port_Id = Port_Id;
        }

        public CIMClassC_IRBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Id"], (string)attrArgs["Formal_Interface_Id"], (string)attrArgs["Delegation_Id"], (string)attrArgs["Port_Id"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassC_I LinkedToR4012()
        {
            var candidates = repository.GetCIInstances(domainName, "C_I").Where(i => ((CIMClassC_I)i).Attr_Id == this.Attr_Formal_Interface_Id);
            CIMClassC_I linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_I)candidates.First();
            }
            return linked;

        }

        public CIMClassC_DG LinkedToR4014()
        {
            var candidates = repository.GetCIInstances(domainName, "C_DG").Where(i => ((CIMClassC_DG)i).Attr_Id == this.Attr_Delegation_Id);
            CIMClassC_DG linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_DG)candidates.First();
            }
            return linked;

        }

        public CIMClassC_PO LinkedToR4016()
        {
            var candidates = repository.GetCIInstances(domainName, "C_PO").Where(i => ((CIMClassC_PO)i).Attr_Id == this.Attr_Port_Id);
            CIMClassC_PO linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_PO)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_IIR LinkedFromR2046()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_IIR").Where(i => ((CIMClassTE_IIR)i).Attr_c_irId == this.Attr_Id);
            CIMClassTE_IIR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_IIR)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassCL_IIR> LinkedFromR4701()
        {
            var candidates = repository.GetCIInstances(domainName, "CL_IIR").Where(i => ((CIMClassCL_IIR)i).Attr_Ref_Id == this.Attr_Id);
            var linked = new List<CIMClassCL_IIR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassCL_IIR)c);
            }
            return linked;

        }

        public CIMSubClassR4009 SubClassR4009()
        {
            var subClassNames = new List<string>() { "C_R", "C_P" };
            CIMSubClassR4009 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR4009)i).CIMSuperClassC_IR() != null && (((CIMSubClassR4009)i).CIMSuperClassC_IR().Attr_Id == this.Attr_Id));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR4009)candidates.First();
                    break;
                }
            }
            return subClass;

        }

        public IEnumerable<CIMClassC_RID> LinkedOtherSideR4013()
        {
            var candidates = repository.GetCIInstances(domainName, "C_RID").Where(i => ((CIMClassC_RID)i).Attr_Reference_Id == this.Attr_Id);
            var linked = new List<CIMClassC_RID>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassC_RID)c);
            }
            return linked;

        }

    }
    public class CIMClassC_PBase : CIMOOAofOOAClass, CIMClassC_P
    {
        public string Attr_Provision_Id { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_InformalName { get; set; }
        public string Attr_Descrip { get; set; }
        public string Attr_pathFromComponent { get; set; }

        public CIMClassC_PBase(CIModelRepository repository, string Provision_Id, string Name, string InformalName, string Descrip, string pathFromComponent ) : base(repository, "C_P")
        {
            Attr_Provision_Id = Provision_Id;
            Attr_Name = Name;
            Attr_InformalName = InformalName;
            Attr_Descrip = Descrip;
            Attr_pathFromComponent = pathFromComponent;
        }

        public CIMClassC_PBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Provision_Id"], (string)attrArgs["Name"], (string)attrArgs["InformalName"], (string)attrArgs["Descrip"], (string)attrArgs["pathFromComponent"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassC_IR CIMSuperClassC_IR()
        {
            var candidates = repository.GetCIInstances(domainName, "C_IR").Where(i => ((CIMClassC_IR)i).Attr_Id == this.Attr_Provision_Id);
            CIMClassC_IR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_IR)candidates.First();
            }
            return linked;

        }
        public IEnumerable<CIMClassC_SF> LinkedOneSideR4002()
        {
            var candidates = repository.GetCIInstances(domainName, "C_SF").Where(i => ((CIMClassC_SF)i).Attr_Provision_Id == this.Attr_Provision_Id);
            var linked = new List<CIMClassC_SF>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassC_SF)c);
            }
            return linked;

        }
        public IEnumerable<CIMClassSPR_PEP> LinkedOneSideR4501()
        {
            var candidates = repository.GetCIInstances(domainName, "SPR_PEP").Where(i => ((CIMClassSPR_PEP)i).Attr_Provision_Id == this.Attr_Provision_Id);
            var linked = new List<CIMClassSPR_PEP>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassSPR_PEP)c);
            }
            return linked;

        }
    }
    public class CIMClassC_POBase : CIMOOAofOOAClass, CIMClassC_PO
    {
        public string Attr_Id { get; set; }
        public string Attr_Component_Id { get; set; }
        public string Attr_Name { get; set; }
        public int Attr_Mult { get; set; }
        public bool Attr_DoNotShowPortOnCanvas { get; set; }

        public CIMClassC_POBase(CIModelRepository repository, string Id, string Component_Id, string Name, int Mult, bool DoNotShowPortOnCanvas ) : base(repository, "C_PO")
        {
            Attr_Id = Id;
            Attr_Component_Id = Component_Id;
            Attr_Name = Name;
            Attr_Mult = Mult;
            Attr_DoNotShowPortOnCanvas = DoNotShowPortOnCanvas;
        }

        public CIMClassC_POBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Id"], (string)attrArgs["Component_Id"], (string)attrArgs["Name"], (int)attrArgs["Mult"], (bool)attrArgs["DoNotShowPortOnCanvas"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassC_C LinkedToR4010()
        {
            var candidates = repository.GetCIInstances(domainName, "C_C").Where(i => ((CIMClassC_C)i).Attr_Id == this.Attr_Component_Id);
            CIMClassC_C linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_C)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_PO LinkedFromR2044()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_PO").Where(i => ((CIMClassTE_PO)i).Attr_c_poId == this.Attr_Id);
            CIMClassTE_PO linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_PO)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassC_IR> LinkedFromR4016()
        {
            var candidates = repository.GetCIInstances(domainName, "C_IR").Where(i => ((CIMClassC_IR)i).Attr_Port_Id == this.Attr_Id);
            var linked = new List<CIMClassC_IR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassC_IR)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassCL_POR> LinkedFromR4709()
        {
            var candidates = repository.GetCIInstances(domainName, "CL_POR").Where(i => ((CIMClassCL_POR)i).Attr_C_PO_Id == this.Attr_Id);
            var linked = new List<CIMClassCL_POR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassCL_POR)c);
            }
            return linked;

        }

    }
    public class CIMClassC_PPBase : CIMOOAofOOAClass, CIMClassC_PP
    {
        public string Attr_PP_Id { get; set; }
        public string Attr_Signal_Id { get; set; }
        public string Attr_DT_ID { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }
        public int Attr_By_Ref { get; set; }
        public string Attr_Dimensions { get; set; }
        public string Attr_Previous_PP_Id { get; set; }

        public CIMClassC_PPBase(CIModelRepository repository, string PP_Id, string Signal_Id, string DT_ID, string Name, string Descrip, int By_Ref, string Dimensions, string Previous_PP_Id ) : base(repository, "C_PP")
        {
            Attr_PP_Id = PP_Id;
            Attr_Signal_Id = Signal_Id;
            Attr_DT_ID = DT_ID;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
            Attr_By_Ref = By_Ref;
            Attr_Dimensions = Dimensions;
            Attr_Previous_PP_Id = Previous_PP_Id;
        }

        public CIMClassC_PPBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["PP_Id"], (string)attrArgs["Signal_Id"], (string)attrArgs["DT_ID"], (string)attrArgs["Name"], (string)attrArgs["Descrip"], (int)attrArgs["By_Ref"], (string)attrArgs["Dimensions"], (string)attrArgs["Previous_PP_Id"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassC_EP LinkedToR4006()
        {
            var candidates = repository.GetCIInstances(domainName, "C_EP").Where(i => ((CIMClassC_EP)i).Attr_Id == this.Attr_Signal_Id);
            CIMClassC_EP linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_EP)candidates.First();
            }
            return linked;

        }

        public CIMClassS_DT LinkedToR4007()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DT").Where(i => ((CIMClassS_DT)i).Attr_DT_ID == this.Attr_DT_ID);
            CIMClassS_DT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_DT)candidates.First();
            }
            return linked;

        }

        public CIMClassC_PP LinkedToR4021Precedes()
        {
            var candidates = repository.GetCIInstances(domainName, "C_PP").Where(i => ((CIMClassC_PP)i).Attr_PP_Id == this.Attr_Previous_PP_Id);
            CIMClassC_PP linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_PP)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassMSG_EPA> LinkedFromR1023()
        {
            var candidates = repository.GetCIInstances(domainName, "MSG_EPA").Where(i => ((CIMClassMSG_EPA)i).Attr_PP_Id == this.Attr_PP_Id);
            var linked = new List<CIMClassMSG_EPA>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassMSG_EPA)c);
            }
            return linked;

        }

        public CIMClassTE_PARM LinkedFromR2048()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_PARM").Where(i => ((CIMClassTE_PARM)i).Attr_PP_Id == this.Attr_PP_Id);
            CIMClassTE_PARM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_PARM)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassI_DIV> LinkedFromR2956()
        {
            var candidates = repository.GetCIInstances(domainName, "I_DIV").Where(i => ((CIMClassI_DIV)i).Attr_PP_Id == this.Attr_PP_Id);
            var linked = new List<CIMClassI_DIV>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_DIV)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassS_DIM> LinkedFromR4017()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DIM").Where(i => ((CIMClassS_DIM)i).Attr_PP_Id == this.Attr_PP_Id);
            var linked = new List<CIMClassS_DIM>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassS_DIM)c);
            }
            return linked;

        }

        public CIMClassC_PP LinkedFromR4021Succeeds()
        {
            var candidates = repository.GetCIInstances(domainName, "C_PP").Where(i => ((CIMClassC_PP)i).Attr_Previous_PP_Id == this.Attr_PP_Id);
            CIMClassC_PP linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_PP)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassV_PVL> LinkedFromR843()
        {
            var candidates = repository.GetCIInstances(domainName, "V_PVL").Where(i => ((CIMClassV_PVL)i).Attr_PP_Id == this.Attr_PP_Id);
            var linked = new List<CIMClassV_PVL>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_PVL)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassV_EPR> LinkedFromR847()
        {
            var candidates = repository.GetCIInstances(domainName, "V_EPR").Where(i => ((CIMClassV_EPR)i).Attr_PP_Id == this.Attr_PP_Id);
            var linked = new List<CIMClassV_EPR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_EPR)c);
            }
            return linked;

        }

    }
    public class CIMClassC_RBase : CIMOOAofOOAClass, CIMClassC_R
    {
        public string Attr_Requirement_Id { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }
        public string Attr_InformalName { get; set; }
        public string Attr_reversePathFromComponent { get; set; }

        public CIMClassC_RBase(CIModelRepository repository, string Requirement_Id, string Name, string Descrip, string InformalName, string reversePathFromComponent ) : base(repository, "C_R")
        {
            Attr_Requirement_Id = Requirement_Id;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
            Attr_InformalName = InformalName;
            Attr_reversePathFromComponent = reversePathFromComponent;
        }

        public CIMClassC_RBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Requirement_Id"], (string)attrArgs["Name"], (string)attrArgs["Descrip"], (string)attrArgs["InformalName"], (string)attrArgs["reversePathFromComponent"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassC_IR CIMSuperClassC_IR()
        {
            var candidates = repository.GetCIInstances(domainName, "C_IR").Where(i => ((CIMClassC_IR)i).Attr_Id == this.Attr_Requirement_Id);
            CIMClassC_IR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_IR)candidates.First();
            }
            return linked;

        }
        public IEnumerable<CIMClassC_SF> LinkedOtherSideR4002()
        {
            var candidates = repository.GetCIInstances(domainName, "C_SF").Where(i => ((CIMClassC_SF)i).Attr_Requirement_Id == this.Attr_Requirement_Id);
            var linked = new List<CIMClassC_SF>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassC_SF)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassSPR_REP> LinkedOneSideR4500()
        {
            var candidates = repository.GetCIInstances(domainName, "SPR_REP").Where(i => ((CIMClassSPR_REP)i).Attr_Requirement_Id == this.Attr_Requirement_Id);
            var linked = new List<CIMClassSPR_REP>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassSPR_REP)c);
            }
            return linked;

        }
    }
    public class CIMClassC_RIDBase : CIMOOAofOOAClass, CIMClassC_RID
    {
        public string Attr_Reference_Id { get; set; }
        public string Attr_Delegation_Id { get; set; }

        public CIMClassC_RIDBase(CIModelRepository repository, string Reference_Id, string Delegation_Id ) : base(repository, "C_RID")
        {
            Attr_Reference_Id = Reference_Id;
            Attr_Delegation_Id = Delegation_Id;
        }

        public CIMClassC_RIDBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Reference_Id"], (string)attrArgs["Delegation_Id"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

         public CIMClassC_IR LinkedOneSideR4013()
         {
            var candidates = repository.GetCIInstances(domainName, "C_IR").Where(i => ((CIMClassC_IR)i).Attr_Id == this.Attr_Reference_Id);
            CIMClassC_IR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_IR)candidates.First();
            }
            return linked;

        }

        public CIMClassC_DG LinkedOtherSideR4013()
        {
            var candidates = repository.GetCIInstances(domainName, "C_DG").Where(i => ((CIMClassC_DG)i).Attr_Id == this.Attr_Delegation_Id);
            CIMClassC_DG linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_DG)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassC_SFBase : CIMOOAofOOAClass, CIMClassC_SF
    {
        public string Attr_Id { get; set; }
        public string Attr_Requirement_Id { get; set; }
        public string Attr_Provision_Id { get; set; }
        public string Attr_Descrip { get; set; }
        public string Attr_Label { get; set; }

        public CIMClassC_SFBase(CIModelRepository repository, string Id, string Requirement_Id, string Provision_Id, string Descrip, string Label ) : base(repository, "C_SF")
        {
            Attr_Id = Id;
            Attr_Requirement_Id = Requirement_Id;
            Attr_Provision_Id = Provision_Id;
            Attr_Descrip = Descrip;
            Attr_Label = Label;
        }

        public CIMClassC_SFBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Id"], (string)attrArgs["Requirement_Id"], (string)attrArgs["Provision_Id"], (string)attrArgs["Descrip"], (string)attrArgs["Label"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public IEnumerable<CIMClassI_RCH> LinkedFromR2969()
        {
            var candidates = repository.GetCIInstances(domainName, "I_RCH").Where(i => ((CIMClassI_RCH)i).Attr_Satisfaction_Id == this.Attr_Id);
            var linked = new List<CIMClassI_RCH>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_RCH)c);
            }
            return linked;

        }

        public CIMClassCL_IR LinkedFromR4706()
        {
            var candidates = repository.GetCIInstances(domainName, "CL_IR").Where(i => ((CIMClassCL_IR)i).Attr_Satisfaction_Element_Id == this.Attr_Id);
            CIMClassCL_IR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassCL_IR)candidates.First();
            }
            return linked;

        }

        public CIMClassPE_PE CIMSuperClassPE_PE()
        {
            var candidates = repository.GetCIInstances(domainName, "PE_PE").Where(i => ((CIMClassPE_PE)i).Attr_Element_ID == this.Attr_Id);
            CIMClassPE_PE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassPE_PE)candidates.First();
            }
            return linked;

        }
        public CIMClassCL_IPINS LinkedOtherSideR4705()
        {
            var candidates = repository.GetCIInstances(domainName, "CL_IPINS").Where(i => ((CIMClassCL_IPINS)i).Attr_Satisfaction_Id == this.Attr_Id);
            CIMClassCL_IPINS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassCL_IPINS)candidates.First();
            }
            return linked;

        }

        public CIMClassPA_SIC LinkedOneSideR9000()
        {
            var candidates = repository.GetCIInstances(domainName, "PA_SIC").Where(i => ((CIMClassPA_SIC)i).Attr_Satisfaction_Id == this.Attr_Id);
            CIMClassPA_SIC linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassPA_SIC)candidates.First();
            }
            return linked;

        }
         public CIMClassC_R LinkedOneSideR4002()
         {
            var candidates = repository.GetCIInstances(domainName, "C_R").Where(i => ((CIMClassC_R)i).Attr_Requirement_Id == this.Attr_Requirement_Id);
            CIMClassC_R linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_R)candidates.First();
            }
            return linked;

        }

        public CIMClassC_P LinkedOtherSideR4002()
        {
            var candidates = repository.GetCIInstances(domainName, "C_P").Where(i => ((CIMClassC_P)i).Attr_Provision_Id == this.Attr_Provision_Id);
            CIMClassC_P linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_P)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassD_DEPLBase : CIMOOAofOOAClass, CIMClassD_DEPL
    {
        public string Attr_Deployment_ID { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }

        public CIMClassD_DEPLBase(CIModelRepository repository, string Deployment_ID, string Name, string Descrip ) : base(repository, "D_DEPL")
        {
            Attr_Deployment_ID = Deployment_ID;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
        }

        public CIMClassD_DEPLBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Deployment_ID"], (string)attrArgs["Name"], (string)attrArgs["Descrip"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public IEnumerable<CIMClassD_TERM> LinkedToR1650()
        {
            var candidates = repository.GetCIInstances(domainName, "D_TERM").Where(i => ((CIMClassD_TERM)i).Attr_Deployment_ID == this.Attr_Deployment_ID);
            var linked = new List<CIMClassD_TERM>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassD_TERM)c);
            }
            return linked;

        }

        public CIMClassPE_PE CIMSuperClassPE_PE()
        {
            var candidates = repository.GetCIInstances(domainName, "PE_PE").Where(i => ((CIMClassPE_PE)i).Attr_Element_ID == this.Attr_Deployment_ID);
            CIMClassPE_PE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassPE_PE)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassD_TERMBase : CIMOOAofOOAClass, CIMClassD_TERM
    {
        public string Attr_Term_ID { get; set; }
        public string Attr_Deployment_ID { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }
        public string Attr_Domain_Name { get; set; }
        public string Attr_Terminator_Name { get; set; }
        public bool Attr_Provider { get; set; }

        public CIMClassD_TERMBase(CIModelRepository repository, string Term_ID, string Deployment_ID, string Name, string Descrip, string Domain_Name, string Terminator_Name, bool Provider ) : base(repository, "D_TERM")
        {
            Attr_Term_ID = Term_ID;
            Attr_Deployment_ID = Deployment_ID;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
            Attr_Domain_Name = Domain_Name;
            Attr_Terminator_Name = Terminator_Name;
            Attr_Provider = Provider;
        }

        public CIMClassD_TERMBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Term_ID"], (string)attrArgs["Deployment_ID"], (string)attrArgs["Name"], (string)attrArgs["Descrip"], (string)attrArgs["Domain_Name"], (string)attrArgs["Terminator_Name"], (bool)attrArgs["Provider"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public IEnumerable<CIMClassD_TSVC> LinkedToR1651()
        {
            var candidates = repository.GetCIInstances(domainName, "D_TSVC").Where(i => ((CIMClassD_TSVC)i).Attr_Term_ID == this.Attr_Term_ID);
            var linked = new List<CIMClassD_TSVC>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassD_TSVC)c);
            }
            return linked;

        }

        public CIMClassD_DEPL LinkedFromR1650()
        {
            var candidates = repository.GetCIInstances(domainName, "D_DEPL").Where(i => ((CIMClassD_DEPL)i).Attr_Deployment_ID == this.Attr_Deployment_ID);
            CIMClassD_DEPL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassD_DEPL)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassD_TSPARMBase : CIMOOAofOOAClass, CIMClassD_TSPARM
    {
        public string Attr_TSParm_ID { get; set; }
        public string Attr_Svc_ID { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_DT_ID { get; set; }
        public int Attr_By_Ref { get; set; }
        public string Attr_Dimensions { get; set; }
        public string Attr_Previous_TSParm_ID { get; set; }
        public string Attr_Descrip { get; set; }

        public CIMClassD_TSPARMBase(CIModelRepository repository, string TSParm_ID, string Svc_ID, string Name, string DT_ID, int By_Ref, string Dimensions, string Previous_TSParm_ID, string Descrip ) : base(repository, "D_TSPARM")
        {
            Attr_TSParm_ID = TSParm_ID;
            Attr_Svc_ID = Svc_ID;
            Attr_Name = Name;
            Attr_DT_ID = DT_ID;
            Attr_By_Ref = By_Ref;
            Attr_Dimensions = Dimensions;
            Attr_Previous_TSParm_ID = Previous_TSParm_ID;
            Attr_Descrip = Descrip;
        }

        public CIMClassD_TSPARMBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["TSParm_ID"], (string)attrArgs["Svc_ID"], (string)attrArgs["Name"], (string)attrArgs["DT_ID"], (int)attrArgs["By_Ref"], (string)attrArgs["Dimensions"], (string)attrArgs["Previous_TSParm_ID"], (string)attrArgs["Descrip"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassS_DT LinkedToR1653()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DT").Where(i => ((CIMClassS_DT)i).Attr_DT_ID == this.Attr_DT_ID);
            CIMClassS_DT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_DT)candidates.First();
            }
            return linked;

        }

        public CIMClassD_TSPARM LinkedToR1654Precedes()
        {
            var candidates = repository.GetCIInstances(domainName, "D_TSPARM").Where(i => ((CIMClassD_TSPARM)i).Attr_TSParm_ID == this.Attr_Previous_TSParm_ID);
            CIMClassD_TSPARM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassD_TSPARM)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassS_DIM> LinkedToR1655()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DIM").Where(i => ((CIMClassS_DIM)i).Attr_TSParm_ID == this.Attr_TSParm_ID);
            var linked = new List<CIMClassS_DIM>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassS_DIM)c);
            }
            return linked;

        }

        public CIMClassD_TSVC LinkedFromR1652()
        {
            var candidates = repository.GetCIInstances(domainName, "D_TSVC").Where(i => ((CIMClassD_TSVC)i).Attr_Svc_ID == this.Attr_Svc_ID);
            CIMClassD_TSVC linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassD_TSVC)candidates.First();
            }
            return linked;

        }

        public CIMClassD_TSPARM LinkedFromR1654Succeeds()
        {
            var candidates = repository.GetCIInstances(domainName, "D_TSPARM").Where(i => ((CIMClassD_TSPARM)i).Attr_Previous_TSParm_ID == this.Attr_TSParm_ID);
            CIMClassD_TSPARM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassD_TSPARM)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassD_TSVCBase : CIMOOAofOOAClass, CIMClassD_TSVC
    {
        public string Attr_Svc_ID { get; set; }
        public string Attr_Term_ID { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }
        public string Attr_Action_Semantics { get; set; }
        public string Attr_DT_ID { get; set; }
        public int Attr_Suc_Pars { get; set; }
        public string Attr_Return_Dimensions { get; set; }
        public int Attr_Dialect { get; set; }
        public bool Attr_Is_Stale { get; set; }
        public int Attr_Implementation_Scope { get; set; }
        public int Attr_Numb { get; set; }

        public CIMClassD_TSVCBase(CIModelRepository repository, string Svc_ID, string Term_ID, string Name, string Descrip, string Action_Semantics, string DT_ID, int Suc_Pars, string Return_Dimensions, int Dialect, bool Is_Stale, int Implementation_Scope, int Numb ) : base(repository, "D_TSVC")
        {
            Attr_Svc_ID = Svc_ID;
            Attr_Term_ID = Term_ID;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
            Attr_Action_Semantics = Action_Semantics;
            Attr_DT_ID = DT_ID;
            Attr_Suc_Pars = Suc_Pars;
            Attr_Return_Dimensions = Return_Dimensions;
            Attr_Dialect = Dialect;
            Attr_Is_Stale = Is_Stale;
            Attr_Implementation_Scope = Implementation_Scope;
            Attr_Numb = Numb;
        }

        public CIMClassD_TSVCBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Svc_ID"], (string)attrArgs["Term_ID"], (string)attrArgs["Name"], (string)attrArgs["Descrip"], (string)attrArgs["Action_Semantics"], (string)attrArgs["DT_ID"], (int)attrArgs["Suc_Pars"], (string)attrArgs["Return_Dimensions"], (int)attrArgs["Dialect"], (bool)attrArgs["Is_Stale"], (int)attrArgs["Implementation_Scope"], (int)attrArgs["Numb"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public IEnumerable<CIMClassD_TSPARM> LinkedToR1652()
        {
            var candidates = repository.GetCIInstances(domainName, "D_TSPARM").Where(i => ((CIMClassD_TSPARM)i).Attr_Svc_ID == this.Attr_Svc_ID);
            var linked = new List<CIMClassD_TSPARM>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassD_TSPARM)c);
            }
            return linked;

        }

        public CIMClassS_DT LinkedToR1656()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DT").Where(i => ((CIMClassS_DT)i).Attr_DT_ID == this.Attr_DT_ID);
            CIMClassS_DT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_DT)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassS_DIM> LinkedToR1657()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DIM").Where(i => ((CIMClassS_DIM)i).Attr_Svc_ID == this.Attr_Svc_ID);
            var linked = new List<CIMClassS_DIM>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassS_DIM)c);
            }
            return linked;

        }

        public CIMClassD_TERM LinkedFromR1651()
        {
            var candidates = repository.GetCIInstances(domainName, "D_TERM").Where(i => ((CIMClassD_TERM)i).Attr_Term_ID == this.Attr_Term_ID);
            CIMClassD_TERM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassD_TERM)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassEP_PKGBase : CIMOOAofOOAClass, CIMClassEP_PKG
    {
        public string Attr_Package_ID { get; set; }
        public string Attr_Sys_ID { get; set; }
        public string Attr_Direct_Sys_ID { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }
        public int Attr_Num_Rng { get; set; }

        public CIMClassEP_PKGBase(CIModelRepository repository, string Package_ID, string Sys_ID, string Direct_Sys_ID, string Name, string Descrip, int Num_Rng ) : base(repository, "EP_PKG")
        {
            Attr_Package_ID = Package_ID;
            Attr_Sys_ID = Sys_ID;
            Attr_Direct_Sys_ID = Direct_Sys_ID;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
            Attr_Num_Rng = Num_Rng;
        }

        public CIMClassEP_PKGBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Package_ID"], (string)attrArgs["Sys_ID"], (string)attrArgs["Direct_Sys_ID"], (string)attrArgs["Name"], (string)attrArgs["Descrip"], (int)attrArgs["Num_Rng"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassS_SYS LinkedToR1401()
        {
            var candidates = repository.GetCIInstances(domainName, "S_SYS").Where(i => ((CIMClassS_SYS)i).Attr_Sys_ID == this.Attr_Sys_ID);
            CIMClassS_SYS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_SYS)candidates.First();
            }
            return linked;

        }

        public CIMClassS_SYS LinkedToR1405()
        {
            var candidates = repository.GetCIInstances(domainName, "S_SYS").Where(i => ((CIMClassS_SYS)i).Attr_Sys_ID == this.Attr_Direct_Sys_ID);
            CIMClassS_SYS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_SYS)candidates.First();
            }
            return linked;

        }

        public CIMClassI_EXE LinkedFromR2970()
        {
            var candidates = repository.GetCIInstances(domainName, "I_EXE").Where(i => ((CIMClassI_EXE)i).Attr_Package_ID == this.Attr_Package_ID);
            CIMClassI_EXE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_EXE)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassPE_PE> LinkedFromR8000()
        {
            var candidates = repository.GetCIInstances(domainName, "PE_PE").Where(i => ((CIMClassPE_PE)i).Attr_Package_ID == this.Attr_Package_ID);
            var linked = new List<CIMClassPE_PE>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassPE_PE)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassPE_SRS> LinkedFromR8005()
        {
            var candidates = repository.GetCIInstances(domainName, "PE_SRS").Where(i => ((CIMClassPE_SRS)i).Attr_Package_ID == this.Attr_Package_ID);
            var linked = new List<CIMClassPE_SRS>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassPE_SRS)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassSQ_PP> LinkedFromR956()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_PP").Where(i => ((CIMClassSQ_PP)i).Attr_Package_ID == this.Attr_Package_ID);
            var linked = new List<CIMClassSQ_PP>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassSQ_PP)c);
            }
            return linked;

        }

        public CIMClassPE_PE CIMSuperClassPE_PE()
        {
            var candidates = repository.GetCIInstances(domainName, "PE_PE").Where(i => ((CIMClassPE_PE)i).Attr_Element_ID == this.Attr_Package_ID);
            CIMClassPE_PE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassPE_PE)candidates.First();
            }
            return linked;

        }
        public IEnumerable<CIMClassEP_PKGREF> LinkedOtherSideR1402RefersTo()
        {
            var candidates = repository.GetCIInstances(domainName, "EP_PKGREF").Where(i => ((CIMClassEP_PKGREF)i).Attr_Referred_Package_ID == this.Attr_Package_ID);
            var linked = new List<CIMClassEP_PKGREF>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassEP_PKGREF)c);
            }
            return linked;

        }

        public CIMClassEP_PKGREF LinkedOneSideR1402IsReferencedBy()
        {
            var candidates = repository.GetCIInstances(domainName, "EP_PKGREF").Where(i => ((CIMClassEP_PKGREF)i).Attr_Referring_Package_ID == this.Attr_Package_ID);
            CIMClassEP_PKGREF linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassEP_PKGREF)candidates.First();
            }
            return linked;

        }
        public IEnumerable<CIMClassPE_VIS> LinkedOneSideR8002()
        {
            var candidates = repository.GetCIInstances(domainName, "PE_VIS").Where(i => ((CIMClassPE_VIS)i).Attr_Package_ID == this.Attr_Package_ID);
            var linked = new List<CIMClassPE_VIS>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassPE_VIS)c);
            }
            return linked;

        }
    }
    public class CIMClassEP_PKGREFBase : CIMOOAofOOAClass, CIMClassEP_PKGREF
    {
        public string Attr_Referring_Package_ID { get; set; }
        public string Attr_Referred_Package_ID { get; set; }

        public CIMClassEP_PKGREFBase(CIModelRepository repository, string Referring_Package_ID, string Referred_Package_ID ) : base(repository, "EP_PKGREF")
        {
            Attr_Referring_Package_ID = Referring_Package_ID;
            Attr_Referred_Package_ID = Referred_Package_ID;
        }

        public CIMClassEP_PKGREFBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Referring_Package_ID"], (string)attrArgs["Referred_Package_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

         public CIMClassEP_PKG LinkedOneSideR1402RefersTo()
         {
            var candidates = repository.GetCIInstances(domainName, "EP_PKG").Where(i => ((CIMClassEP_PKG)i).Attr_Package_ID == this.Attr_Referred_Package_ID);
            CIMClassEP_PKG linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassEP_PKG)candidates.First();
            }
            return linked;

        }

        public CIMClassEP_PKG LinkedOtherSideR1402IsReferencedBy()
        {
            var candidates = repository.GetCIInstances(domainName, "EP_PKG").Where(i => ((CIMClassEP_PKG)i).Attr_Package_ID == this.Attr_Referring_Package_ID);
            CIMClassEP_PKG linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassEP_PKG)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassE_CEABase : CIMOOAofOOAClass, CIMClassE_CEA
    {
        public string Attr_Statement_ID { get; set; }

        public CIMClassE_CEABase(CIModelRepository repository, string Statement_ID ) : base(repository, "E_CEA")
        {
            Attr_Statement_ID = Statement_ID;
        }

        public CIMClassE_CEABase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassE_CSME CIMSuperClassE_CSME()
        {
            var candidates = repository.GetCIInstances(domainName, "E_CSME").Where(i => ((CIMClassE_CSME)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassE_CSME linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassE_CSME)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassE_CECBase : CIMOOAofOOAClass, CIMClassE_CEC
    {
        public string Attr_Statement_ID { get; set; }

        public CIMClassE_CECBase(CIModelRepository repository, string Statement_ID ) : base(repository, "E_CEC")
        {
            Attr_Statement_ID = Statement_ID;
        }

        public CIMClassE_CECBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassE_CSME CIMSuperClassE_CSME()
        {
            var candidates = repository.GetCIInstances(domainName, "E_CSME").Where(i => ((CIMClassE_CSME)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassE_CSME linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassE_CSME)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassE_CEIBase : CIMOOAofOOAClass, CIMClassE_CEI
    {
        public string Attr_Statement_ID { get; set; }
        public string Attr_Var_ID { get; set; }

        public CIMClassE_CEIBase(CIModelRepository repository, string Statement_ID, string Var_ID ) : base(repository, "E_CEI")
        {
            Attr_Statement_ID = Statement_ID;
            Attr_Var_ID = Var_ID;
        }

        public CIMClassE_CEIBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"], (string)attrArgs["Var_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassV_VAR LinkedToR711()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAR").Where(i => ((CIMClassV_VAR)i).Attr_Var_ID == this.Attr_Var_ID);
            CIMClassV_VAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAR)candidates.First();
            }
            return linked;

        }

        public CIMClassE_CSME CIMSuperClassE_CSME()
        {
            var candidates = repository.GetCIInstances(domainName, "E_CSME").Where(i => ((CIMClassE_CSME)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassE_CSME linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassE_CSME)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassE_CESBase : CIMOOAofOOAClass, CIMClassE_CES
    {
        public string Attr_Statement_ID { get; set; }
        public bool Attr_is_implicit { get; set; }
        public string Attr_Var_ID { get; set; }

        public CIMClassE_CESBase(CIModelRepository repository, string Statement_ID, bool is_implicit, string Var_ID ) : base(repository, "E_CES")
        {
            Attr_Statement_ID = Statement_ID;
            Attr_is_implicit = is_implicit;
            Attr_Var_ID = Var_ID;
        }

        public CIMClassE_CESBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"], (bool)attrArgs["is_implicit"], (string)attrArgs["Var_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassV_VAR LinkedToR710()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAR").Where(i => ((CIMClassV_VAR)i).Attr_Var_ID == this.Attr_Var_ID);
            CIMClassV_VAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAR)candidates.First();
            }
            return linked;

        }

        public CIMClassE_CSME LinkedFromR702()
        {
            var candidates = repository.GetCIInstances(domainName, "E_CSME").Where(i => ((CIMClassE_CSME)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassE_CSME linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassE_CSME)candidates.First();
            }
            return linked;

        }

        public CIMClassE_ESS CIMSuperClassE_ESS()
        {
            var candidates = repository.GetCIInstances(domainName, "E_ESS").Where(i => ((CIMClassE_ESS)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassE_ESS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassE_ESS)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassE_CSMEBase : CIMOOAofOOAClass, CIMClassE_CSME
    {
        public string Attr_Statement_ID { get; set; }
        public string Attr_SMevt_ID { get; set; }

        public CIMClassE_CSMEBase(CIModelRepository repository, string Statement_ID, string SMevt_ID ) : base(repository, "E_CSME")
        {
            Attr_Statement_ID = Statement_ID;
            Attr_SMevt_ID = SMevt_ID;
        }

        public CIMClassE_CSMEBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"], (string)attrArgs["SMevt_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassE_CES LinkedToR702()
        {
            var candidates = repository.GetCIInstances(domainName, "E_CES").Where(i => ((CIMClassE_CES)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassE_CES linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassE_CES)candidates.First();
            }
            return linked;

        }

        public CIMClassSM_EVT LinkedToR706()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_EVT").Where(i => ((CIMClassSM_EVT)i).Attr_SMevt_ID == this.Attr_SMevt_ID);
            CIMClassSM_EVT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_EVT)candidates.First();
            }
            return linked;

        }

        public CIMSubClassR704 SubClassR704()
        {
            var subClassNames = new List<string>() { "E_CEI", "E_CEA", "E_CEC" };
            CIMSubClassR704 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR704)i).CIMSuperClassE_CSME() != null && (((CIMSubClassR704)i).CIMSuperClassE_CSME().Attr_Statement_ID == this.Attr_Statement_ID));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR704)candidates.First();
                    break;
                }
            }
            return subClass;

        }

    }
    public class CIMClassE_ESSBase : CIMOOAofOOAClass, CIMClassE_ESS
    {
        public string Attr_Statement_ID { get; set; }
        public bool Attr_ParmListOK { get; set; }
        public bool Attr_PEIndicated { get; set; }
        public int Attr_eventDerivedLabelLineNumber { get; set; }
        public int Attr_eventDerivedLabelColumn { get; set; }
        public int Attr_eventMeaningLineNumber { get; set; }
        public int Attr_eventMeaningColumn { get; set; }
        public int Attr_eventTargetKeyLettersLineNumber { get; set; }
        public int Attr_eventTargetKeyLettersColumn { get; set; }
        public int Attr_firstEventDataItemNameLineNumber { get; set; }
        public int Attr_firstEventDataItemNameColumn { get; set; }
        public int Attr_currentLaterEventDataItemNameLineNumber { get; set; }
        public int Attr_currentLaterEventDataItemNameColumn { get; set; }

        public CIMClassE_ESSBase(CIModelRepository repository, string Statement_ID, bool ParmListOK, bool PEIndicated, int eventDerivedLabelLineNumber, int eventDerivedLabelColumn, int eventMeaningLineNumber, int eventMeaningColumn, int eventTargetKeyLettersLineNumber, int eventTargetKeyLettersColumn, int firstEventDataItemNameLineNumber, int firstEventDataItemNameColumn, int currentLaterEventDataItemNameLineNumber, int currentLaterEventDataItemNameColumn ) : base(repository, "E_ESS")
        {
            Attr_Statement_ID = Statement_ID;
            Attr_ParmListOK = ParmListOK;
            Attr_PEIndicated = PEIndicated;
            Attr_eventDerivedLabelLineNumber = eventDerivedLabelLineNumber;
            Attr_eventDerivedLabelColumn = eventDerivedLabelColumn;
            Attr_eventMeaningLineNumber = eventMeaningLineNumber;
            Attr_eventMeaningColumn = eventMeaningColumn;
            Attr_eventTargetKeyLettersLineNumber = eventTargetKeyLettersLineNumber;
            Attr_eventTargetKeyLettersColumn = eventTargetKeyLettersColumn;
            Attr_firstEventDataItemNameLineNumber = firstEventDataItemNameLineNumber;
            Attr_firstEventDataItemNameColumn = firstEventDataItemNameColumn;
            Attr_currentLaterEventDataItemNameLineNumber = currentLaterEventDataItemNameLineNumber;
            Attr_currentLaterEventDataItemNameColumn = currentLaterEventDataItemNameColumn;
        }

        public CIMClassE_ESSBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"], (bool)attrArgs["ParmListOK"], (bool)attrArgs["PEIndicated"], (int)attrArgs["eventDerivedLabelLineNumber"], (int)attrArgs["eventDerivedLabelColumn"], (int)attrArgs["eventMeaningLineNumber"], (int)attrArgs["eventMeaningColumn"], (int)attrArgs["eventTargetKeyLettersLineNumber"], (int)attrArgs["eventTargetKeyLettersColumn"], (int)attrArgs["firstEventDataItemNameLineNumber"], (int)attrArgs["firstEventDataItemNameColumn"], (int)attrArgs["currentLaterEventDataItemNameLineNumber"], (int)attrArgs["currentLaterEventDataItemNameColumn"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public IEnumerable<CIMClassV_PAR> LinkedFromR700()
        {
            var candidates = repository.GetCIInstances(domainName, "V_PAR").Where(i => ((CIMClassV_PAR)i).Attr_Statement_ID == this.Attr_Statement_ID);
            var linked = new List<CIMClassV_PAR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_PAR)c);
            }
            return linked;

        }

        public CIMSubClassR701 SubClassR701()
        {
            var subClassNames = new List<string>() { "E_CES", "E_GES" };
            CIMSubClassR701 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR701)i).CIMSuperClassE_ESS() != null && (((CIMSubClassR701)i).CIMSuperClassE_ESS().Attr_Statement_ID == this.Attr_Statement_ID));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR701)candidates.First();
                    break;
                }
            }
            return subClass;

        }

        public CIMClassACT_SMT CIMSuperClassACT_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SMT").Where(i => ((CIMClassACT_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassE_GARBase : CIMOOAofOOAClass, CIMClassE_GAR
    {
        public string Attr_Statement_ID { get; set; }

        public CIMClassE_GARBase(CIModelRepository repository, string Statement_ID ) : base(repository, "E_GAR")
        {
            Attr_Statement_ID = Statement_ID;
        }

        public CIMClassE_GARBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassE_GSME CIMSuperClassE_GSME()
        {
            var candidates = repository.GetCIInstances(domainName, "E_GSME").Where(i => ((CIMClassE_GSME)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassE_GSME linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassE_GSME)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassE_GECBase : CIMOOAofOOAClass, CIMClassE_GEC
    {
        public string Attr_Statement_ID { get; set; }

        public CIMClassE_GECBase(CIModelRepository repository, string Statement_ID ) : base(repository, "E_GEC")
        {
            Attr_Statement_ID = Statement_ID;
        }

        public CIMClassE_GECBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassE_GSME CIMSuperClassE_GSME()
        {
            var candidates = repository.GetCIInstances(domainName, "E_GSME").Where(i => ((CIMClassE_GSME)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassE_GSME linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassE_GSME)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassE_GENBase : CIMOOAofOOAClass, CIMClassE_GEN
    {
        public string Attr_Statement_ID { get; set; }
        public string Attr_Var_ID { get; set; }

        public CIMClassE_GENBase(CIModelRepository repository, string Statement_ID, string Var_ID ) : base(repository, "E_GEN")
        {
            Attr_Statement_ID = Statement_ID;
            Attr_Var_ID = Var_ID;
        }

        public CIMClassE_GENBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"], (string)attrArgs["Var_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassV_VAR LinkedToR712()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAR").Where(i => ((CIMClassV_VAR)i).Attr_Var_ID == this.Attr_Var_ID);
            CIMClassV_VAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAR)candidates.First();
            }
            return linked;

        }

        public CIMClassE_GSME CIMSuperClassE_GSME()
        {
            var candidates = repository.GetCIInstances(domainName, "E_GSME").Where(i => ((CIMClassE_GSME)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassE_GSME linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassE_GSME)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassE_GESBase : CIMOOAofOOAClass, CIMClassE_GES
    {
        public string Attr_Statement_ID { get; set; }

        public CIMClassE_GESBase(CIModelRepository repository, string Statement_ID ) : base(repository, "E_GES")
        {
            Attr_Statement_ID = Statement_ID;
        }

        public CIMClassE_GESBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassE_GSME LinkedFromR703()
        {
            var candidates = repository.GetCIInstances(domainName, "E_GSME").Where(i => ((CIMClassE_GSME)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassE_GSME linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassE_GSME)candidates.First();
            }
            return linked;

        }

        public CIMClassE_ESS CIMSuperClassE_ESS()
        {
            var candidates = repository.GetCIInstances(domainName, "E_ESS").Where(i => ((CIMClassE_ESS)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassE_ESS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassE_ESS)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassE_GPRBase : CIMOOAofOOAClass, CIMClassE_GPR
    {
        public string Attr_Statement_ID { get; set; }
        public string Attr_Value_ID { get; set; }

        public CIMClassE_GPRBase(CIModelRepository repository, string Statement_ID, string Value_ID ) : base(repository, "E_GPR")
        {
            Attr_Statement_ID = Statement_ID;
            Attr_Value_ID = Value_ID;
        }

        public CIMClassE_GPRBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"], (string)attrArgs["Value_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassV_VAL LinkedToR714()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_SMT CIMSuperClassACT_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SMT").Where(i => ((CIMClassACT_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassE_GSMEBase : CIMOOAofOOAClass, CIMClassE_GSME
    {
        public string Attr_Statement_ID { get; set; }
        public string Attr_SMevt_ID { get; set; }

        public CIMClassE_GSMEBase(CIModelRepository repository, string Statement_ID, string SMevt_ID ) : base(repository, "E_GSME")
        {
            Attr_Statement_ID = Statement_ID;
            Attr_SMevt_ID = SMevt_ID;
        }

        public CIMClassE_GSMEBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"], (string)attrArgs["SMevt_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassE_GES LinkedToR703()
        {
            var candidates = repository.GetCIInstances(domainName, "E_GES").Where(i => ((CIMClassE_GES)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassE_GES linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassE_GES)candidates.First();
            }
            return linked;

        }

        public CIMClassSM_EVT LinkedToR707()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_EVT").Where(i => ((CIMClassSM_EVT)i).Attr_SMevt_ID == this.Attr_SMevt_ID);
            CIMClassSM_EVT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_EVT)candidates.First();
            }
            return linked;

        }

        public CIMSubClassR705 SubClassR705()
        {
            var subClassNames = new List<string>() { "E_GEN", "E_GAR", "E_GEC" };
            CIMSubClassR705 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR705)i).CIMSuperClassE_GSME() != null && (((CIMSubClassR705)i).CIMSuperClassE_GSME().Attr_Statement_ID == this.Attr_Statement_ID));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR705)candidates.First();
                    break;
                }
            }
            return subClass;

        }

    }
    public class CIMClassG_EISBase : CIMOOAofOOAClass, CIMClassG_EIS
    {
        public string Attr_Element_ID { get; set; }
        public string Attr_Sys_ID { get; set; }

        public CIMClassG_EISBase(CIModelRepository repository, string Element_ID, string Sys_ID ) : base(repository, "G_EIS")
        {
            Attr_Element_ID = Element_ID;
            Attr_Sys_ID = Sys_ID;
        }

        public CIMClassG_EISBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Element_ID"], (string)attrArgs["Sys_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

         public CIMClassPE_PE LinkedOneSideR9100()
         {
            var candidates = repository.GetCIInstances(domainName, "PE_PE").Where(i => ((CIMClassPE_PE)i).Attr_Element_ID == this.Attr_Element_ID);
            CIMClassPE_PE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassPE_PE)candidates.First();
            }
            return linked;

        }

        public CIMClassS_SYS LinkedOtherSideR9100()
        {
            var candidates = repository.GetCIInstances(domainName, "S_SYS").Where(i => ((CIMClassS_SYS)i).Attr_Sys_ID == this.Attr_Sys_ID);
            CIMClassS_SYS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_SYS)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassIA_UCPBase : CIMOOAofOOAClass, CIMClassIA_UCP
    {
        public string Attr_Part_ID { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }

        public CIMClassIA_UCPBase(CIModelRepository repository, string Part_ID, string Name, string Descrip ) : base(repository, "IA_UCP")
        {
            Attr_Part_ID = Part_ID;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
        }

        public CIMClassIA_UCPBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Part_ID"], (string)attrArgs["Name"], (string)attrArgs["Descrip"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSQ_P CIMSuperClassSQ_P()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_P").Where(i => ((CIMClassSQ_P)i).Attr_Part_ID == this.Attr_Part_ID);
            CIMClassSQ_P linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSQ_P)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassI_AVLBase : CIMOOAofOOAClass, CIMClassI_AVL
    {
        public string Attr_Inst_ID { get; set; }
        public string Attr_Obj_ID { get; set; }
        public string Attr_Attr_ID { get; set; }
        public string Attr_Value { get; set; }
        public string Attr_Label { get; set; }
        public string Attr_RuntimeValue_ID { get; set; }
        public string Attr_Derived_RuntimeValue_ID { get; set; }

        public CIMClassI_AVLBase(CIModelRepository repository, string Inst_ID, string Obj_ID, string Attr_ID, string Value, string Label, string RuntimeValue_ID, string Derived_RuntimeValue_ID ) : base(repository, "I_AVL")
        {
            Attr_Inst_ID = Inst_ID;
            Attr_Obj_ID = Obj_ID;
            Attr_Attr_ID = Attr_ID;
            Attr_Value = Value;
            Attr_Label = Label;
            Attr_RuntimeValue_ID = RuntimeValue_ID;
            Attr_Derived_RuntimeValue_ID = Derived_RuntimeValue_ID;
        }

        public CIMClassI_AVLBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Inst_ID"], (string)attrArgs["Obj_ID"], (string)attrArgs["Attr_ID"], (string)attrArgs["Value"], (string)attrArgs["Label"], (string)attrArgs["RuntimeValue_ID"], (string)attrArgs["Derived_RuntimeValue_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassI_INS LinkedToR2909()
        {
            var candidates = repository.GetCIInstances(domainName, "I_INS").Where(i => ((CIMClassI_INS)i).Attr_Inst_ID == this.Attr_Inst_ID);
            CIMClassI_INS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_INS)candidates.First();
            }
            return linked;

        }

        public CIMClassO_ATTR LinkedToR2910()
        {
            var candidates = repository.GetCIInstances(domainName, "O_ATTR").Where(i => ((CIMClassO_ATTR)i).Attr_Attr_ID == this.Attr_Attr_ID && ((CIMClassO_ATTR)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_ATTR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_ATTR)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassI_BSFBase : CIMOOAofOOAClass, CIMClassI_BSF
    {
        public string Attr_Block_ID { get; set; }
        public string Attr_Stack_Frame_ID { get; set; }
        public string Attr_Statement_ID { get; set; }
        public bool Attr_isExecuting { get; set; }

        public CIMClassI_BSFBase(CIModelRepository repository, string Block_ID, string Stack_Frame_ID, string Statement_ID, bool isExecuting ) : base(repository, "I_BSF")
        {
            Attr_Block_ID = Block_ID;
            Attr_Stack_Frame_ID = Stack_Frame_ID;
            Attr_Statement_ID = Statement_ID;
            Attr_isExecuting = isExecuting;
        }

        public CIMClassI_BSFBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Block_ID"], (string)attrArgs["Stack_Frame_ID"], (string)attrArgs["Statement_ID"], (bool)attrArgs["isExecuting"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassACT_SMT LinkedToR2941()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SMT").Where(i => ((CIMClassACT_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_SMT)candidates.First();
            }
            return linked;

        }

         public CIMClassACT_BLK LinkedOneSideR2923()
         {
            var candidates = repository.GetCIInstances(domainName, "ACT_BLK").Where(i => ((CIMClassACT_BLK)i).Attr_Block_ID == this.Attr_Block_ID);
            CIMClassACT_BLK linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_BLK)candidates.First();
            }
            return linked;

        }

        public CIMClassI_STF LinkedOtherSideR2923()
        {
            var candidates = repository.GetCIInstances(domainName, "I_STF").Where(i => ((CIMClassI_STF)i).Attr_Stack_Frame_ID == this.Attr_Stack_Frame_ID);
            CIMClassI_STF linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_STF)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassI_CINBase : CIMOOAofOOAClass, CIMClassI_CIN
    {
        public string Attr_Container_ID { get; set; }

        public CIMClassI_CINBase(CIModelRepository repository, string Container_ID ) : base(repository, "I_CIN")
        {
            Attr_Container_ID = Container_ID;
        }

        public CIMClassI_CINBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Container_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassI_EXE LinkedToR2974()
        {
            var candidates = repository.GetCIInstances(domainName, "I_EXE").Where(i => ((CIMClassI_EXE)i).Attr_Execution_Engine_ID == this.Attr_Container_ID);
            CIMClassI_EXE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_EXE)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassI_EXE> LinkedFromR2975()
        {
            var candidates = repository.GetCIInstances(domainName, "I_EXE").Where(i => ((CIMClassI_EXE)i).Attr_Container_ID == this.Attr_Container_ID);
            var linked = new List<CIMClassI_EXE>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_EXE)c);
            }
            return linked;

        }

    }
    public class CIMClassI_DIVBase : CIMOOAofOOAClass, CIMClassI_DIV
    {
        public string Attr_DIV_ID { get; set; }
        public string Attr_Event_ID { get; set; }
        public string Attr_SM_ID { get; set; }
        public string Attr_SMedi_ID { get; set; }
        public string Attr_RuntimeValue_ID { get; set; }
        public string Attr_PP_Id { get; set; }

        public CIMClassI_DIVBase(CIModelRepository repository, string DIV_ID, string Event_ID, string SM_ID, string SMedi_ID, string RuntimeValue_ID, string PP_Id ) : base(repository, "I_DIV")
        {
            Attr_DIV_ID = DIV_ID;
            Attr_Event_ID = Event_ID;
            Attr_SM_ID = SM_ID;
            Attr_SMedi_ID = SMedi_ID;
            Attr_RuntimeValue_ID = RuntimeValue_ID;
            Attr_PP_Id = PP_Id;
        }

        public CIMClassI_DIVBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["DIV_ID"], (string)attrArgs["Event_ID"], (string)attrArgs["SM_ID"], (string)attrArgs["SMedi_ID"], (string)attrArgs["RuntimeValue_ID"], (string)attrArgs["PP_Id"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassI_EVI LinkedToR2933()
        {
            var candidates = repository.GetCIInstances(domainName, "I_EVI").Where(i => ((CIMClassI_EVI)i).Attr_Event_ID == this.Attr_Event_ID);
            CIMClassI_EVI linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_EVI)candidates.First();
            }
            return linked;

        }

        public CIMClassSM_EVTDI LinkedToR2934()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_EVTDI").Where(i => ((CIMClassSM_EVTDI)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_EVTDI)i).Attr_SMedi_ID == this.Attr_SMedi_ID);
            CIMClassSM_EVTDI linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_EVTDI)candidates.First();
            }
            return linked;

        }

        public CIMClassC_PP LinkedToR2956()
        {
            var candidates = repository.GetCIInstances(domainName, "C_PP").Where(i => ((CIMClassC_PP)i).Attr_PP_Id == this.Attr_PP_Id);
            CIMClassC_PP linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_PP)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassI_EQEBase : CIMOOAofOOAClass, CIMClassI_EQE
    {
        public string Attr_Event_Queue_Entry_ID { get; set; }
        public string Attr_Execution_Engine_ID { get; set; }
        public string Attr_Event_ID { get; set; }
        public string Attr_Next_Event_Queue_Entry_ID { get; set; }

        public CIMClassI_EQEBase(CIModelRepository repository, string Event_Queue_Entry_ID, string Execution_Engine_ID, string Event_ID, string Next_Event_Queue_Entry_ID ) : base(repository, "I_EQE")
        {
            Attr_Event_Queue_Entry_ID = Event_Queue_Entry_ID;
            Attr_Execution_Engine_ID = Execution_Engine_ID;
            Attr_Event_ID = Event_ID;
            Attr_Next_Event_Queue_Entry_ID = Next_Event_Queue_Entry_ID;
        }

        public CIMClassI_EQEBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Event_Queue_Entry_ID"], (string)attrArgs["Execution_Engine_ID"], (string)attrArgs["Event_ID"], (string)attrArgs["Next_Event_Queue_Entry_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassI_EQE LinkedToR2945Precedes()
        {
            var candidates = repository.GetCIInstances(domainName, "I_EQE").Where(i => ((CIMClassI_EQE)i).Attr_Event_Queue_Entry_ID == this.Attr_Next_Event_Queue_Entry_ID);
            CIMClassI_EQE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_EQE)candidates.First();
            }
            return linked;

        }

        public CIMClassI_EQE LinkedFromR2945Follows()
        {
            var candidates = repository.GetCIInstances(domainName, "I_EQE").Where(i => ((CIMClassI_EQE)i).Attr_Next_Event_Queue_Entry_ID == this.Attr_Event_Queue_Entry_ID);
            CIMClassI_EQE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_EQE)candidates.First();
            }
            return linked;

        }

         public CIMClassI_EXE LinkedOneSideR2944()
         {
            var candidates = repository.GetCIInstances(domainName, "I_EXE").Where(i => ((CIMClassI_EXE)i).Attr_Execution_Engine_ID == this.Attr_Execution_Engine_ID);
            CIMClassI_EXE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_EXE)candidates.First();
            }
            return linked;

        }

        public CIMClassI_EVI LinkedOtherSideR2944()
        {
            var candidates = repository.GetCIInstances(domainName, "I_EVI").Where(i => ((CIMClassI_EVI)i).Attr_Event_ID == this.Attr_Event_ID);
            CIMClassI_EVI linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_EVI)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassI_EVIBase : CIMOOAofOOAClass, CIMClassI_EVI
    {
        public string Attr_Event_ID { get; set; }
        public bool Attr_isExecuting { get; set; }
        public bool Attr_isCreation { get; set; }
        public string Attr_SMevt_ID { get; set; }
        public string Attr_Target_Inst_ID { get; set; }
        public string Attr_nextEvent_ID { get; set; }
        public string Attr_Sent_By_Inst_ID { get; set; }
        public string Attr_next_self_Event_ID { get; set; }
        public string Attr_Sent_By_CIE_ID { get; set; }
        public string Attr_CIE_ID { get; set; }
        public string Attr_Execution_Engine_ID { get; set; }
        public string Attr_Originating_Execution_Engine_ID { get; set; }
        public string Attr_Label { get; set; }

        public CIMClassI_EVIBase(CIModelRepository repository, string Event_ID, bool isExecuting, bool isCreation, string SMevt_ID, string Target_Inst_ID, string nextEvent_ID, string Sent_By_Inst_ID, string next_self_Event_ID, string Sent_By_CIE_ID, string CIE_ID, string Execution_Engine_ID, string Originating_Execution_Engine_ID, string Label ) : base(repository, "I_EVI")
        {
            Attr_Event_ID = Event_ID;
            Attr_isExecuting = isExecuting;
            Attr_isCreation = isCreation;
            Attr_SMevt_ID = SMevt_ID;
            Attr_Target_Inst_ID = Target_Inst_ID;
            Attr_nextEvent_ID = nextEvent_ID;
            Attr_Sent_By_Inst_ID = Sent_By_Inst_ID;
            Attr_next_self_Event_ID = next_self_Event_ID;
            Attr_Sent_By_CIE_ID = Sent_By_CIE_ID;
            Attr_CIE_ID = CIE_ID;
            Attr_Execution_Engine_ID = Execution_Engine_ID;
            Attr_Originating_Execution_Engine_ID = Originating_Execution_Engine_ID;
            Attr_Label = Label;
        }

        public CIMClassI_EVIBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Event_ID"], (bool)attrArgs["isExecuting"], (bool)attrArgs["isCreation"], (string)attrArgs["SMevt_ID"], (string)attrArgs["Target_Inst_ID"], (string)attrArgs["nextEvent_ID"], (string)attrArgs["Sent_By_Inst_ID"], (string)attrArgs["next_self_Event_ID"], (string)attrArgs["Sent_By_CIE_ID"], (string)attrArgs["CIE_ID"], (string)attrArgs["Execution_Engine_ID"], (string)attrArgs["Originating_Execution_Engine_ID"], (string)attrArgs["Label"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSM_EVT LinkedToR2906()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_EVT").Where(i => ((CIMClassSM_EVT)i).Attr_SMevt_ID == this.Attr_SMevt_ID);
            CIMClassSM_EVT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_EVT)candidates.First();
            }
            return linked;

        }

        public CIMClassI_INS LinkedToR2907()
        {
            var candidates = repository.GetCIInstances(domainName, "I_INS").Where(i => ((CIMClassI_INS)i).Attr_Inst_ID == this.Attr_Target_Inst_ID);
            CIMClassI_INS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_INS)candidates.First();
            }
            return linked;

        }

        public CIMClassI_EVI LinkedToR2908WillBeProcessedBefore()
        {
            var candidates = repository.GetCIInstances(domainName, "I_EVI").Where(i => ((CIMClassI_EVI)i).Attr_Event_ID == this.Attr_nextEvent_ID);
            CIMClassI_EVI linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_EVI)candidates.First();
            }
            return linked;

        }

        public CIMClassI_INS LinkedToR2935()
        {
            var candidates = repository.GetCIInstances(domainName, "I_INS").Where(i => ((CIMClassI_INS)i).Attr_Inst_ID == this.Attr_Target_Inst_ID);
            CIMClassI_INS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_INS)candidates.First();
            }
            return linked;

        }

        public CIMClassI_INS LinkedToR2937()
        {
            var candidates = repository.GetCIInstances(domainName, "I_INS").Where(i => ((CIMClassI_INS)i).Attr_Inst_ID == this.Attr_Sent_By_Inst_ID);
            CIMClassI_INS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_INS)candidates.First();
            }
            return linked;

        }

        public CIMClassI_EVI LinkedToR2939WillBeProcessedAfter()
        {
            var candidates = repository.GetCIInstances(domainName, "I_EVI").Where(i => ((CIMClassI_EVI)i).Attr_Event_ID == this.Attr_next_self_Event_ID);
            CIMClassI_EVI linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_EVI)candidates.First();
            }
            return linked;

        }

        public CIMClassI_EXE LinkedToR2964()
        {
            var candidates = repository.GetCIInstances(domainName, "I_EXE").Where(i => ((CIMClassI_EXE)i).Attr_Execution_Engine_ID == this.Attr_Execution_Engine_ID);
            CIMClassI_EXE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_EXE)candidates.First();
            }
            return linked;

        }

        public CIMClassI_EXE LinkedToR2976()
        {
            var candidates = repository.GetCIInstances(domainName, "I_EXE").Where(i => ((CIMClassI_EXE)i).Attr_Execution_Engine_ID == this.Attr_Originating_Execution_Engine_ID);
            CIMClassI_EXE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_EXE)candidates.First();
            }
            return linked;

        }

        public CIMClassI_EVI LinkedFromR2908WillBeProcessedAfter()
        {
            var candidates = repository.GetCIInstances(domainName, "I_EVI").Where(i => ((CIMClassI_EVI)i).Attr_nextEvent_ID == this.Attr_Event_ID);
            CIMClassI_EVI linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_EVI)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassI_DIV> LinkedFromR2933()
        {
            var candidates = repository.GetCIInstances(domainName, "I_DIV").Where(i => ((CIMClassI_DIV)i).Attr_Event_ID == this.Attr_Event_ID);
            var linked = new List<CIMClassI_DIV>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_DIV)c);
            }
            return linked;

        }

        public CIMClassI_EVI LinkedFromR2939WillBeProcessedBefore()
        {
            var candidates = repository.GetCIInstances(domainName, "I_EVI").Where(i => ((CIMClassI_EVI)i).Attr_next_self_Event_ID == this.Attr_Event_ID);
            CIMClassI_EVI linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_EVI)candidates.First();
            }
            return linked;

        }

        public CIMClassI_TIM LinkedFromR2940()
        {
            var candidates = repository.GetCIInstances(domainName, "I_TIM").Where(i => ((CIMClassI_TIM)i).Attr_Event_ID == this.Attr_Event_ID);
            CIMClassI_TIM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_TIM)candidates.First();
            }
            return linked;

        }

        public CIMClassI_EQE LinkedOneSideR2944()
        {
            var candidates = repository.GetCIInstances(domainName, "I_EQE").Where(i => ((CIMClassI_EQE)i).Attr_Event_ID == this.Attr_Event_ID);
            CIMClassI_EQE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_EQE)candidates.First();
            }
            return linked;

        }
        public CIMClassI_SQE LinkedOneSideR2946()
        {
            var candidates = repository.GetCIInstances(domainName, "I_SQE").Where(i => ((CIMClassI_SQE)i).Attr_Event_ID == this.Attr_Event_ID);
            CIMClassI_SQE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_SQE)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassI_EXEBase : CIMOOAofOOAClass, CIMClassI_EXE
    {
        public bool Attr_Running { get; set; }
        public string Attr_Execution_Engine_ID { get; set; }
        public string Attr_Dom_IDdeprecated { get; set; }
        public string Attr_Component_Id { get; set; }
        public string Attr_Package_ID { get; set; }
        public int Attr_Next_Unique_ID { get; set; }
        public int Attr_Next_Instance_ID { get; set; }
        public string Attr_ImportedComponent_Id { get; set; }
        public string Attr_Label { get; set; }
        public string Attr_Container_ID { get; set; }

        public CIMClassI_EXEBase(CIModelRepository repository, bool Running, string Execution_Engine_ID, string Dom_IDdeprecated, string Component_Id, string Package_ID, int Next_Unique_ID, int Next_Instance_ID, string ImportedComponent_Id, string Label, string Container_ID ) : base(repository, "I_EXE")
        {
            Attr_Running = Running;
            Attr_Execution_Engine_ID = Execution_Engine_ID;
            Attr_Dom_IDdeprecated = Dom_IDdeprecated;
            Attr_Component_Id = Component_Id;
            Attr_Package_ID = Package_ID;
            Attr_Next_Unique_ID = Next_Unique_ID;
            Attr_Next_Instance_ID = Next_Instance_ID;
            Attr_ImportedComponent_Id = ImportedComponent_Id;
            Attr_Label = Label;
            Attr_Container_ID = Container_ID;
        }

        public CIMClassI_EXEBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (bool)attrArgs["Running"], (string)attrArgs["Execution_Engine_ID"], (string)attrArgs["Dom_IDdeprecated"], (string)attrArgs["Component_Id"], (string)attrArgs["Package_ID"], (int)attrArgs["Next_Unique_ID"], (int)attrArgs["Next_Instance_ID"], (string)attrArgs["ImportedComponent_Id"], (string)attrArgs["Label"], (string)attrArgs["Container_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassC_C LinkedToR2955()
        {
            var candidates = repository.GetCIInstances(domainName, "C_C").Where(i => ((CIMClassC_C)i).Attr_Id == this.Attr_Component_Id);
            CIMClassC_C linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_C)candidates.First();
            }
            return linked;

        }

        public CIMClassCL_IC LinkedToR2963()
        {
            var candidates = repository.GetCIInstances(domainName, "CL_IC").Where(i => ((CIMClassCL_IC)i).Attr_Id == this.Attr_ImportedComponent_Id);
            CIMClassCL_IC linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassCL_IC)candidates.First();
            }
            return linked;

        }

        public CIMClassEP_PKG LinkedToR2970()
        {
            var candidates = repository.GetCIInstances(domainName, "EP_PKG").Where(i => ((CIMClassEP_PKG)i).Attr_Package_ID == this.Attr_Package_ID);
            CIMClassEP_PKG linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassEP_PKG)candidates.First();
            }
            return linked;

        }

        public CIMClassI_CIN LinkedToR2975()
        {
            var candidates = repository.GetCIInstances(domainName, "I_CIN").Where(i => ((CIMClassI_CIN)i).Attr_Container_ID == this.Attr_Container_ID);
            CIMClassI_CIN linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_CIN)candidates.First();
            }
            return linked;

        }

        public CIMClassI_STACK LinkedFromR2930()
        {
            var candidates = repository.GetCIInstances(domainName, "I_STACK").Where(i => ((CIMClassI_STACK)i).Attr_Execution_Engine_ID == this.Attr_Execution_Engine_ID);
            CIMClassI_STACK linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_STACK)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassI_INS> LinkedFromR2957()
        {
            var candidates = repository.GetCIInstances(domainName, "I_INS").Where(i => ((CIMClassI_INS)i).Attr_Execution_Engine_ID == this.Attr_Execution_Engine_ID);
            var linked = new List<CIMClassI_INS>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_INS)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassI_EVI> LinkedFromR2964()
        {
            var candidates = repository.GetCIInstances(domainName, "I_EVI").Where(i => ((CIMClassI_EVI)i).Attr_Execution_Engine_ID == this.Attr_Execution_Engine_ID);
            var linked = new List<CIMClassI_EVI>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_EVI)c);
            }
            return linked;

        }

        public CIMClassI_CIN LinkedFromR2974()
        {
            var candidates = repository.GetCIInstances(domainName, "I_CIN").Where(i => ((CIMClassI_CIN)i).Attr_Container_ID == this.Attr_Execution_Engine_ID);
            CIMClassI_CIN linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_CIN)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassI_EVI> LinkedFromR2976()
        {
            var candidates = repository.GetCIInstances(domainName, "I_EVI").Where(i => ((CIMClassI_EVI)i).Attr_Originating_Execution_Engine_ID == this.Attr_Execution_Engine_ID);
            var linked = new List<CIMClassI_EVI>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_EVI)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassI_ICQE> LinkedFromR2977()
        {
            var candidates = repository.GetCIInstances(domainName, "I_ICQE").Where(i => ((CIMClassI_ICQE)i).Attr_Execution_Engine_ID == this.Attr_Execution_Engine_ID);
            var linked = new List<CIMClassI_ICQE>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_ICQE)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassI_EQE> LinkedOtherSideR2944()
        {
            var candidates = repository.GetCIInstances(domainName, "I_EQE").Where(i => ((CIMClassI_EQE)i).Attr_Execution_Engine_ID == this.Attr_Execution_Engine_ID);
            var linked = new List<CIMClassI_EQE>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_EQE)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassI_SQE> LinkedOtherSideR2946()
        {
            var candidates = repository.GetCIInstances(domainName, "I_SQE").Where(i => ((CIMClassI_SQE)i).Attr_Execution_Engine_ID == this.Attr_Execution_Engine_ID);
            var linked = new List<CIMClassI_SQE>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_SQE)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassI_MON> LinkedOtherSideR2949()
        {
            var candidates = repository.GetCIInstances(domainName, "I_MON").Where(i => ((CIMClassI_MON)i).Attr_Execution_Engine_ID == this.Attr_Execution_Engine_ID);
            var linked = new List<CIMClassI_MON>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_MON)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassI_RCH> LinkedOtherSideR2968IsInterfaceProviderTo()
        {
            var candidates = repository.GetCIInstances(domainName, "I_RCH").Where(i => ((CIMClassI_RCH)i).Attr_Execution_Engine_ID == this.Attr_Execution_Engine_ID);
            var linked = new List<CIMClassI_RCH>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_RCH)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassI_RCH> LinkedOneSideR2968IsInterfaceRequirerOf()
        {
            var candidates = repository.GetCIInstances(domainName, "I_RCH").Where(i => ((CIMClassI_RCH)i).Attr_other_Execution_Engine_ID == this.Attr_Execution_Engine_ID);
            var linked = new List<CIMClassI_RCH>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_RCH)c);
            }
            return linked;

        }
    }
    public class CIMClassI_ICQEBase : CIMOOAofOOAClass, CIMClassI_ICQE
    {
        public string Attr_Stack_ID { get; set; }
        public string Attr_Stack_Frame_ID { get; set; }
        public string Attr_Execution_Engine_ID { get; set; }

        public CIMClassI_ICQEBase(CIModelRepository repository, string Stack_ID, string Stack_Frame_ID, string Execution_Engine_ID ) : base(repository, "I_ICQE")
        {
            Attr_Stack_ID = Stack_ID;
            Attr_Stack_Frame_ID = Stack_Frame_ID;
            Attr_Execution_Engine_ID = Execution_Engine_ID;
        }

        public CIMClassI_ICQEBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Stack_ID"], (string)attrArgs["Stack_Frame_ID"], (string)attrArgs["Execution_Engine_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassI_EXE LinkedToR2977()
        {
            var candidates = repository.GetCIInstances(domainName, "I_EXE").Where(i => ((CIMClassI_EXE)i).Attr_Execution_Engine_ID == this.Attr_Execution_Engine_ID);
            CIMClassI_EXE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_EXE)candidates.First();
            }
            return linked;

        }

         public CIMClassI_STACK LinkedOneSideR2966()
         {
            var candidates = repository.GetCIInstances(domainName, "I_STACK").Where(i => ((CIMClassI_STACK)i).Attr_Stack_ID == this.Attr_Stack_ID);
            CIMClassI_STACK linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_STACK)candidates.First();
            }
            return linked;

        }

        public CIMClassI_STF LinkedOtherSideR2966()
        {
            var candidates = repository.GetCIInstances(domainName, "I_STF").Where(i => ((CIMClassI_STF)i).Attr_Stack_Frame_ID == this.Attr_Stack_Frame_ID);
            CIMClassI_STF linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_STF)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassI_INSBase : CIMOOAofOOAClass, CIMClassI_INS
    {
        public string Attr_Inst_ID { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_SM_ID { get; set; }
        public string Attr_SMstt_ID { get; set; }
        public string Attr_Execution_Engine_ID { get; set; }
        public string Attr_Trans_ID { get; set; }
        public string Attr_CIE_ID { get; set; }
        public string Attr_Label { get; set; }
        public string Attr_Default_Name { get; set; }

        public CIMClassI_INSBase(CIModelRepository repository, string Inst_ID, string Name, string SM_ID, string SMstt_ID, string Execution_Engine_ID, string Trans_ID, string CIE_ID, string Label, string Default_Name ) : base(repository, "I_INS")
        {
            Attr_Inst_ID = Inst_ID;
            Attr_Name = Name;
            Attr_SM_ID = SM_ID;
            Attr_SMstt_ID = SMstt_ID;
            Attr_Execution_Engine_ID = Execution_Engine_ID;
            Attr_Trans_ID = Trans_ID;
            Attr_CIE_ID = CIE_ID;
            Attr_Label = Label;
            Attr_Default_Name = Default_Name;
        }

        public CIMClassI_INSBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Inst_ID"], (string)attrArgs["Name"], (string)attrArgs["SM_ID"], (string)attrArgs["SMstt_ID"], (string)attrArgs["Execution_Engine_ID"], (string)attrArgs["Trans_ID"], (string)attrArgs["CIE_ID"], (string)attrArgs["Label"], (string)attrArgs["Default_Name"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSM_STATE LinkedToR2915()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_STATE").Where(i => ((CIMClassSM_STATE)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_STATE)i).Attr_SMstt_ID == this.Attr_SMstt_ID);
            CIMClassSM_STATE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_STATE)candidates.First();
            }
            return linked;

        }

        public CIMClassSM_TXN LinkedToR2953()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_TXN").Where(i => ((CIMClassSM_TXN)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_TXN)i).Attr_Trans_ID == this.Attr_Trans_ID);
            CIMClassSM_TXN linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_TXN)candidates.First();
            }
            return linked;

        }

        public CIMClassI_EXE LinkedToR2957()
        {
            var candidates = repository.GetCIInstances(domainName, "I_EXE").Where(i => ((CIMClassI_EXE)i).Attr_Execution_Engine_ID == this.Attr_Execution_Engine_ID);
            CIMClassI_EXE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_EXE)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassI_EVI> LinkedFromR2907()
        {
            var candidates = repository.GetCIInstances(domainName, "I_EVI").Where(i => ((CIMClassI_EVI)i).Attr_Target_Inst_ID == this.Attr_Inst_ID);
            var linked = new List<CIMClassI_EVI>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_EVI)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassI_AVL> LinkedFromR2909()
        {
            var candidates = repository.GetCIInstances(domainName, "I_AVL").Where(i => ((CIMClassI_AVL)i).Attr_Inst_ID == this.Attr_Inst_ID);
            var linked = new List<CIMClassI_AVL>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_AVL)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassI_EVI> LinkedFromR2935()
        {
            var candidates = repository.GetCIInstances(domainName, "I_EVI").Where(i => ((CIMClassI_EVI)i).Attr_Target_Inst_ID == this.Attr_Inst_ID);
            var linked = new List<CIMClassI_EVI>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_EVI)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassI_EVI> LinkedFromR2937()
        {
            var candidates = repository.GetCIInstances(domainName, "I_EVI").Where(i => ((CIMClassI_EVI)i).Attr_Sent_By_Inst_ID == this.Attr_Inst_ID);
            var linked = new List<CIMClassI_EVI>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_EVI)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassI_STF> LinkedFromR2954()
        {
            var candidates = repository.GetCIInstances(domainName, "I_STF").Where(i => ((CIMClassI_STF)i).Attr_Inst_ID == this.Attr_Inst_ID);
            var linked = new List<CIMClassI_STF>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_STF)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassI_LIP> LinkedFromR2958()
        {
            var candidates = repository.GetCIInstances(domainName, "I_LIP").Where(i => ((CIMClassI_LIP)i).Attr_Inst_ID == this.Attr_Inst_ID);
            var linked = new List<CIMClassI_LIP>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_LIP)c);
            }
            return linked;

        }

        public CIMClassI_MON LinkedOneSideR2949()
        {
            var candidates = repository.GetCIInstances(domainName, "I_MON").Where(i => ((CIMClassI_MON)i).Attr_Inst_ID == this.Attr_Inst_ID);
            CIMClassI_MON linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_MON)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassI_LIPBase : CIMOOAofOOAClass, CIMClassI_LIP
    {
        public string Attr_Participation_ID { get; set; }
        public string Attr_Rel_ID { get; set; }
        public string Attr_Inst_ID { get; set; }
        public string Attr_Label { get; set; }

        public CIMClassI_LIPBase(CIModelRepository repository, string Participation_ID, string Rel_ID, string Inst_ID, string Label ) : base(repository, "I_LIP")
        {
            Attr_Participation_ID = Participation_ID;
            Attr_Rel_ID = Rel_ID;
            Attr_Inst_ID = Inst_ID;
            Attr_Label = Label;
        }

        public CIMClassI_LIPBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Participation_ID"], (string)attrArgs["Rel_ID"], (string)attrArgs["Inst_ID"], (string)attrArgs["Label"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassI_INS LinkedToR2958()
        {
            var candidates = repository.GetCIInstances(domainName, "I_INS").Where(i => ((CIMClassI_INS)i).Attr_Inst_ID == this.Attr_Inst_ID);
            CIMClassI_INS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_INS)candidates.First();
            }
            return linked;

        }

        public CIMClassR_REL LinkedToR2959()
        {
            var candidates = repository.GetCIInstances(domainName, "R_REL").Where(i => ((CIMClassR_REL)i).Attr_Rel_ID == this.Attr_Rel_ID);
            CIMClassR_REL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_REL)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassI_LNK> LinkedFromR2901()
        {
            var candidates = repository.GetCIInstances(domainName, "I_LNK").Where(i => ((CIMClassI_LNK)i).Attr_fromInst_ID == this.Attr_Inst_ID && ((CIMClassI_LNK)i).Attr_Rel_ID == this.Attr_Rel_ID);
            var linked = new List<CIMClassI_LNK>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_LNK)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassI_LNK> LinkedFromR2902()
        {
            var candidates = repository.GetCIInstances(domainName, "I_LNK").Where(i => ((CIMClassI_LNK)i).Attr_toInst_ID == this.Attr_Inst_ID && ((CIMClassI_LNK)i).Attr_Rel_ID == this.Attr_Rel_ID);
            var linked = new List<CIMClassI_LNK>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_LNK)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassI_LNK> LinkedFromR2903()
        {
            var candidates = repository.GetCIInstances(domainName, "I_LNK").Where(i => ((CIMClassI_LNK)i).Attr_Rel_ID == this.Attr_Rel_ID && ((CIMClassI_LNK)i).Attr_assocInst_ID == this.Attr_Inst_ID);
            var linked = new List<CIMClassI_LNK>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_LNK)c);
            }
            return linked;

        }

    }
    public class CIMClassI_LNKBase : CIMOOAofOOAClass, CIMClassI_LNK
    {
        public string Attr_Link_ID { get; set; }
        public string Attr_Rel_ID { get; set; }
        public string Attr_fromInst_ID { get; set; }
        public string Attr_toInst_ID { get; set; }
        public string Attr_assocInst_ID { get; set; }

        public CIMClassI_LNKBase(CIModelRepository repository, string Link_ID, string Rel_ID, string fromInst_ID, string toInst_ID, string assocInst_ID ) : base(repository, "I_LNK")
        {
            Attr_Link_ID = Link_ID;
            Attr_Rel_ID = Rel_ID;
            Attr_fromInst_ID = fromInst_ID;
            Attr_toInst_ID = toInst_ID;
            Attr_assocInst_ID = assocInst_ID;
        }

        public CIMClassI_LNKBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Link_ID"], (string)attrArgs["Rel_ID"], (string)attrArgs["fromInst_ID"], (string)attrArgs["toInst_ID"], (string)attrArgs["assocInst_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassI_LIP LinkedToR2901()
        {
            var candidates = repository.GetCIInstances(domainName, "I_LIP").Where(i => ((CIMClassI_LIP)i).Attr_Inst_ID == this.Attr_fromInst_ID && ((CIMClassI_LIP)i).Attr_Rel_ID == this.Attr_Rel_ID);
            CIMClassI_LIP linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_LIP)candidates.First();
            }
            return linked;

        }

        public CIMClassI_LIP LinkedToR2902()
        {
            var candidates = repository.GetCIInstances(domainName, "I_LIP").Where(i => ((CIMClassI_LIP)i).Attr_Inst_ID == this.Attr_toInst_ID && ((CIMClassI_LIP)i).Attr_Rel_ID == this.Attr_Rel_ID);
            CIMClassI_LIP linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_LIP)candidates.First();
            }
            return linked;

        }

        public CIMClassI_LIP LinkedToR2903()
        {
            var candidates = repository.GetCIInstances(domainName, "I_LIP").Where(i => ((CIMClassI_LIP)i).Attr_Rel_ID == this.Attr_Rel_ID && ((CIMClassI_LIP)i).Attr_Inst_ID == this.Attr_assocInst_ID);
            CIMClassI_LIP linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_LIP)candidates.First();
            }
            return linked;

        }

        public CIMClassR_REL LinkedToR2904()
        {
            var candidates = repository.GetCIInstances(domainName, "R_REL").Where(i => ((CIMClassR_REL)i).Attr_Rel_ID == this.Attr_Rel_ID);
            CIMClassR_REL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_REL)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassI_MONBase : CIMOOAofOOAClass, CIMClassI_MON
    {
        public string Attr_Execution_Engine_ID { get; set; }
        public string Attr_Inst_ID { get; set; }
        public bool Attr_enabled { get; set; }

        public CIMClassI_MONBase(CIModelRepository repository, string Execution_Engine_ID, string Inst_ID, bool enabled ) : base(repository, "I_MON")
        {
            Attr_Execution_Engine_ID = Execution_Engine_ID;
            Attr_Inst_ID = Inst_ID;
            Attr_enabled = enabled;
        }

        public CIMClassI_MONBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Execution_Engine_ID"], (string)attrArgs["Inst_ID"], (bool)attrArgs["enabled"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

         public CIMClassI_EXE LinkedOneSideR2949()
         {
            var candidates = repository.GetCIInstances(domainName, "I_EXE").Where(i => ((CIMClassI_EXE)i).Attr_Execution_Engine_ID == this.Attr_Execution_Engine_ID);
            CIMClassI_EXE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_EXE)candidates.First();
            }
            return linked;

        }

        public CIMClassI_INS LinkedOtherSideR2949()
        {
            var candidates = repository.GetCIInstances(domainName, "I_INS").Where(i => ((CIMClassI_INS)i).Attr_Inst_ID == this.Attr_Inst_ID);
            CIMClassI_INS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_INS)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassI_RCHBase : CIMOOAofOOAClass, CIMClassI_RCH
    {
        public string Attr_Channel_Id { get; set; }
        public string Attr_Execution_Engine_ID { get; set; }
        public string Attr_other_Execution_Engine_ID { get; set; }
        public string Attr_Satisfaction_Id { get; set; }
        public string Attr_Delegation_Id { get; set; }
        public string Attr_Next_provider_Channel_Id { get; set; }

        public CIMClassI_RCHBase(CIModelRepository repository, string Channel_Id, string Execution_Engine_ID, string other_Execution_Engine_ID, string Satisfaction_Id, string Delegation_Id, string Next_provider_Channel_Id ) : base(repository, "I_RCH")
        {
            Attr_Channel_Id = Channel_Id;
            Attr_Execution_Engine_ID = Execution_Engine_ID;
            Attr_other_Execution_Engine_ID = other_Execution_Engine_ID;
            Attr_Satisfaction_Id = Satisfaction_Id;
            Attr_Delegation_Id = Delegation_Id;
            Attr_Next_provider_Channel_Id = Next_provider_Channel_Id;
        }

        public CIMClassI_RCHBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Channel_Id"], (string)attrArgs["Execution_Engine_ID"], (string)attrArgs["other_Execution_Engine_ID"], (string)attrArgs["Satisfaction_Id"], (string)attrArgs["Delegation_Id"], (string)attrArgs["Next_provider_Channel_Id"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassC_SF LinkedToR2969()
        {
            var candidates = repository.GetCIInstances(domainName, "C_SF").Where(i => ((CIMClassC_SF)i).Attr_Id == this.Attr_Satisfaction_Id);
            CIMClassC_SF linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_SF)candidates.First();
            }
            return linked;

        }

        public CIMClassC_DG LinkedToR2972()
        {
            var candidates = repository.GetCIInstances(domainName, "C_DG").Where(i => ((CIMClassC_DG)i).Attr_Id == this.Attr_Delegation_Id);
            CIMClassC_DG linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_DG)candidates.First();
            }
            return linked;

        }

        public CIMClassI_RCH LinkedToR2973Provider()
        {
            var candidates = repository.GetCIInstances(domainName, "I_RCH").Where(i => ((CIMClassI_RCH)i).Attr_Channel_Id == this.Attr_Next_provider_Channel_Id);
            CIMClassI_RCH linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_RCH)candidates.First();
            }
            return linked;

        }

        public CIMClassI_RCH LinkedFromR2973Requirer()
        {
            var candidates = repository.GetCIInstances(domainName, "I_RCH").Where(i => ((CIMClassI_RCH)i).Attr_Next_provider_Channel_Id == this.Attr_Channel_Id);
            CIMClassI_RCH linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_RCH)candidates.First();
            }
            return linked;

        }

         public CIMClassI_EXE LinkedOneSideR2968IsInterfaceProviderTo()
         {
            var candidates = repository.GetCIInstances(domainName, "I_EXE").Where(i => ((CIMClassI_EXE)i).Attr_Execution_Engine_ID == this.Attr_Execution_Engine_ID);
            CIMClassI_EXE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_EXE)candidates.First();
            }
            return linked;

        }

        public CIMClassI_EXE LinkedOtherSideR2968IsInterfaceRequirerOf()
        {
            var candidates = repository.GetCIInstances(domainName, "I_EXE").Where(i => ((CIMClassI_EXE)i).Attr_Execution_Engine_ID == this.Attr_other_Execution_Engine_ID);
            CIMClassI_EXE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_EXE)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassI_SQEBase : CIMOOAofOOAClass, CIMClassI_SQE
    {
        public string Attr_Self_Queue_Entry_ID { get; set; }
        public string Attr_Execution_Engine_ID { get; set; }
        public string Attr_Event_ID { get; set; }
        public string Attr_Next_Self_Queue_Entry_ID { get; set; }

        public CIMClassI_SQEBase(CIModelRepository repository, string Self_Queue_Entry_ID, string Execution_Engine_ID, string Event_ID, string Next_Self_Queue_Entry_ID ) : base(repository, "I_SQE")
        {
            Attr_Self_Queue_Entry_ID = Self_Queue_Entry_ID;
            Attr_Execution_Engine_ID = Execution_Engine_ID;
            Attr_Event_ID = Event_ID;
            Attr_Next_Self_Queue_Entry_ID = Next_Self_Queue_Entry_ID;
        }

        public CIMClassI_SQEBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Self_Queue_Entry_ID"], (string)attrArgs["Execution_Engine_ID"], (string)attrArgs["Event_ID"], (string)attrArgs["Next_Self_Queue_Entry_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassI_SQE LinkedToR2947Precedes()
        {
            var candidates = repository.GetCIInstances(domainName, "I_SQE").Where(i => ((CIMClassI_SQE)i).Attr_Self_Queue_Entry_ID == this.Attr_Next_Self_Queue_Entry_ID);
            CIMClassI_SQE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_SQE)candidates.First();
            }
            return linked;

        }

        public CIMClassI_SQE LinkedFromR2947Follows()
        {
            var candidates = repository.GetCIInstances(domainName, "I_SQE").Where(i => ((CIMClassI_SQE)i).Attr_Next_Self_Queue_Entry_ID == this.Attr_Self_Queue_Entry_ID);
            CIMClassI_SQE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_SQE)candidates.First();
            }
            return linked;

        }

         public CIMClassI_EXE LinkedOneSideR2946()
         {
            var candidates = repository.GetCIInstances(domainName, "I_EXE").Where(i => ((CIMClassI_EXE)i).Attr_Execution_Engine_ID == this.Attr_Execution_Engine_ID);
            CIMClassI_EXE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_EXE)candidates.First();
            }
            return linked;

        }

        public CIMClassI_EVI LinkedOtherSideR2946()
        {
            var candidates = repository.GetCIInstances(domainName, "I_EVI").Where(i => ((CIMClassI_EVI)i).Attr_Event_ID == this.Attr_Event_ID);
            CIMClassI_EVI linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_EVI)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassI_STACKBase : CIMOOAofOOAClass, CIMClassI_STACK
    {
        public string Attr_Stack_ID { get; set; }
        public string Attr_Execution_Engine_ID { get; set; }
        public int Attr_runState { get; set; }
        public string Attr_suspendReason { get; set; }

        public CIMClassI_STACKBase(CIModelRepository repository, string Stack_ID, string Execution_Engine_ID, int runState, string suspendReason ) : base(repository, "I_STACK")
        {
            Attr_Stack_ID = Stack_ID;
            Attr_Execution_Engine_ID = Execution_Engine_ID;
            Attr_runState = runState;
            Attr_suspendReason = suspendReason;
        }

        public CIMClassI_STACKBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Stack_ID"], (string)attrArgs["Execution_Engine_ID"], (int)attrArgs["runState"], (string)attrArgs["suspendReason"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassI_EXE LinkedToR2930()
        {
            var candidates = repository.GetCIInstances(domainName, "I_EXE").Where(i => ((CIMClassI_EXE)i).Attr_Execution_Engine_ID == this.Attr_Execution_Engine_ID);
            CIMClassI_EXE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_EXE)candidates.First();
            }
            return linked;

        }

        public CIMClassI_STF LinkedFromR2929()
        {
            var candidates = repository.GetCIInstances(domainName, "I_STF").Where(i => ((CIMClassI_STF)i).Attr_Top_Stack_Frame_Stack_ID == this.Attr_Stack_ID);
            CIMClassI_STF linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_STF)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassI_STF> LinkedFromR2943()
        {
            var candidates = repository.GetCIInstances(domainName, "I_STF").Where(i => ((CIMClassI_STF)i).Attr_Stack_ID == this.Attr_Stack_ID);
            var linked = new List<CIMClassI_STF>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_STF)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassI_STF> LinkedFromR2967()
        {
            var candidates = repository.GetCIInstances(domainName, "I_STF").Where(i => ((CIMClassI_STF)i).Attr_Value_Q_Stack_ID == this.Attr_Stack_ID);
            var linked = new List<CIMClassI_STF>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_STF)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassI_ICQE> LinkedOtherSideR2966()
        {
            var candidates = repository.GetCIInstances(domainName, "I_ICQE").Where(i => ((CIMClassI_ICQE)i).Attr_Stack_ID == this.Attr_Stack_ID);
            var linked = new List<CIMClassI_ICQE>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_ICQE)c);
            }
            return linked;

        }

    }
    public class CIMClassI_STFBase : CIMOOAofOOAClass, CIMClassI_STF
    {
        public string Attr_Stack_Frame_ID { get; set; }
        public bool Attr_Created_For_Wired_Bridge { get; set; }
        public bool Attr_readyForInterrupt { get; set; }
        public string Attr_Bridge_Caller_Stack_Frame_ID { get; set; }
        public string Attr_Child_Stack_Frame_ID { get; set; }
        public string Attr_Top_Stack_Frame_Stack_ID { get; set; }
        public string Attr_Stack_ID { get; set; }
        public string Attr_Inst_ID { get; set; }
        public string Attr_Value_Q_Stack_ID { get; set; }
        public string Attr_Blocking_Stack_Frame_ID { get; set; }

        public CIMClassI_STFBase(CIModelRepository repository, string Stack_Frame_ID, bool Created_For_Wired_Bridge, bool readyForInterrupt, string Bridge_Caller_Stack_Frame_ID, string Child_Stack_Frame_ID, string Top_Stack_Frame_Stack_ID, string Stack_ID, string Inst_ID, string Value_Q_Stack_ID, string Blocking_Stack_Frame_ID ) : base(repository, "I_STF")
        {
            Attr_Stack_Frame_ID = Stack_Frame_ID;
            Attr_Created_For_Wired_Bridge = Created_For_Wired_Bridge;
            Attr_readyForInterrupt = readyForInterrupt;
            Attr_Bridge_Caller_Stack_Frame_ID = Bridge_Caller_Stack_Frame_ID;
            Attr_Child_Stack_Frame_ID = Child_Stack_Frame_ID;
            Attr_Top_Stack_Frame_Stack_ID = Top_Stack_Frame_Stack_ID;
            Attr_Stack_ID = Stack_ID;
            Attr_Inst_ID = Inst_ID;
            Attr_Value_Q_Stack_ID = Value_Q_Stack_ID;
            Attr_Blocking_Stack_Frame_ID = Blocking_Stack_Frame_ID;
        }

        public CIMClassI_STFBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Stack_Frame_ID"], (bool)attrArgs["Created_For_Wired_Bridge"], (bool)attrArgs["readyForInterrupt"], (string)attrArgs["Bridge_Caller_Stack_Frame_ID"], (string)attrArgs["Child_Stack_Frame_ID"], (string)attrArgs["Top_Stack_Frame_Stack_ID"], (string)attrArgs["Stack_ID"], (string)attrArgs["Inst_ID"], (string)attrArgs["Value_Q_Stack_ID"], (string)attrArgs["Blocking_Stack_Frame_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassI_STF LinkedToR2928PreviousContext()
        {
            var candidates = repository.GetCIInstances(domainName, "I_STF").Where(i => ((CIMClassI_STF)i).Attr_Stack_Frame_ID == this.Attr_Child_Stack_Frame_ID);
            CIMClassI_STF linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_STF)candidates.First();
            }
            return linked;

        }

        public CIMClassI_STACK LinkedToR2929()
        {
            var candidates = repository.GetCIInstances(domainName, "I_STACK").Where(i => ((CIMClassI_STACK)i).Attr_Stack_ID == this.Attr_Top_Stack_Frame_Stack_ID);
            CIMClassI_STACK linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_STACK)candidates.First();
            }
            return linked;

        }

        public CIMClassI_STACK LinkedToR2943()
        {
            var candidates = repository.GetCIInstances(domainName, "I_STACK").Where(i => ((CIMClassI_STACK)i).Attr_Stack_ID == this.Attr_Stack_ID);
            CIMClassI_STACK linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_STACK)candidates.First();
            }
            return linked;

        }

        public CIMClassI_INS LinkedToR2954()
        {
            var candidates = repository.GetCIInstances(domainName, "I_INS").Where(i => ((CIMClassI_INS)i).Attr_Inst_ID == this.Attr_Inst_ID);
            CIMClassI_INS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_INS)candidates.First();
            }
            return linked;

        }

        public CIMClassI_STF LinkedToR2965Blocks()
        {
            var candidates = repository.GetCIInstances(domainName, "I_STF").Where(i => ((CIMClassI_STF)i).Attr_Stack_Frame_ID == this.Attr_Blocking_Stack_Frame_ID);
            CIMClassI_STF linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_STF)candidates.First();
            }
            return linked;

        }

        public CIMClassI_STACK LinkedToR2967()
        {
            var candidates = repository.GetCIInstances(domainName, "I_STACK").Where(i => ((CIMClassI_STACK)i).Attr_Stack_ID == this.Attr_Value_Q_Stack_ID);
            CIMClassI_STACK linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_STACK)candidates.First();
            }
            return linked;

        }

        public CIMClassI_STF LinkedFromR2928NextContext()
        {
            var candidates = repository.GetCIInstances(domainName, "I_STF").Where(i => ((CIMClassI_STF)i).Attr_Child_Stack_Frame_ID == this.Attr_Stack_Frame_ID);
            CIMClassI_STF linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_STF)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassI_VSF> LinkedFromR2951()
        {
            var candidates = repository.GetCIInstances(domainName, "I_VSF").Where(i => ((CIMClassI_VSF)i).Attr_Stack_Frame_ID == this.Attr_Stack_Frame_ID);
            var linked = new List<CIMClassI_VSF>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_VSF)c);
            }
            return linked;

        }

        public CIMClassI_STF LinkedFromR2965BlockedBy()
        {
            var candidates = repository.GetCIInstances(domainName, "I_STF").Where(i => ((CIMClassI_STF)i).Attr_Blocking_Stack_Frame_ID == this.Attr_Stack_Frame_ID);
            CIMClassI_STF linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_STF)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassI_BSF> LinkedOneSideR2923()
        {
            var candidates = repository.GetCIInstances(domainName, "I_BSF").Where(i => ((CIMClassI_BSF)i).Attr_Stack_Frame_ID == this.Attr_Stack_Frame_ID);
            var linked = new List<CIMClassI_BSF>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_BSF)c);
            }
            return linked;

        }
        public CIMClassI_ICQE LinkedOneSideR2966()
        {
            var candidates = repository.GetCIInstances(domainName, "I_ICQE").Where(i => ((CIMClassI_ICQE)i).Attr_Stack_Frame_ID == this.Attr_Stack_Frame_ID);
            CIMClassI_ICQE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_ICQE)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassI_TIMBase : CIMOOAofOOAClass, CIMClassI_TIM
    {
        public string Attr_Timer_ID { get; set; }
        public int Attr_delay { get; set; }
        public bool Attr_running { get; set; }
        public bool Attr_recurring { get; set; }
        public string Attr_Event_ID { get; set; }
        public string Attr_Label { get; set; }
        public int Attr_expiration { get; set; }

        public CIMClassI_TIMBase(CIModelRepository repository, string Timer_ID, int delay, bool running, bool recurring, string Event_ID, string Label, int expiration ) : base(repository, "I_TIM")
        {
            Attr_Timer_ID = Timer_ID;
            Attr_delay = delay;
            Attr_running = running;
            Attr_recurring = recurring;
            Attr_Event_ID = Event_ID;
            Attr_Label = Label;
            Attr_expiration = expiration;
        }

        public CIMClassI_TIMBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Timer_ID"], (int)attrArgs["delay"], (bool)attrArgs["running"], (bool)attrArgs["recurring"], (string)attrArgs["Event_ID"], (string)attrArgs["Label"], (int)attrArgs["expiration"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassI_EVI LinkedToR2940()
        {
            var candidates = repository.GetCIInstances(domainName, "I_EVI").Where(i => ((CIMClassI_EVI)i).Attr_Event_ID == this.Attr_Event_ID);
            CIMClassI_EVI linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_EVI)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassI_VSFBase : CIMOOAofOOAClass, CIMClassI_VSF
    {
        public string Attr_ValueInStackFrame_ID { get; set; }
        public string Attr_RuntimeValue_ID { get; set; }
        public string Attr_Value_ID { get; set; }
        public string Attr_Stack_Frame_ID { get; set; }

        public CIMClassI_VSFBase(CIModelRepository repository, string ValueInStackFrame_ID, string RuntimeValue_ID, string Value_ID, string Stack_Frame_ID ) : base(repository, "I_VSF")
        {
            Attr_ValueInStackFrame_ID = ValueInStackFrame_ID;
            Attr_RuntimeValue_ID = RuntimeValue_ID;
            Attr_Value_ID = Value_ID;
            Attr_Stack_Frame_ID = Stack_Frame_ID;
        }

        public CIMClassI_VSFBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["ValueInStackFrame_ID"], (string)attrArgs["RuntimeValue_ID"], (string)attrArgs["Value_ID"], (string)attrArgs["Stack_Frame_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassI_STF LinkedToR2951()
        {
            var candidates = repository.GetCIInstances(domainName, "I_STF").Where(i => ((CIMClassI_STF)i).Attr_Stack_Frame_ID == this.Attr_Stack_Frame_ID);
            CIMClassI_STF linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassI_STF)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAL LinkedToR2978()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassMSG_ABase : CIMOOAofOOAClass, CIMClassMSG_A
    {
        public string Attr_Arg_ID { get; set; }
        public string Attr_Informal_Msg_ID { get; set; }
        public string Attr_Formal_Msg_ID { get; set; }
        public string Attr_Label { get; set; }
        public string Attr_Value { get; set; }
        public string Attr_InformalName { get; set; }
        public string Attr_Descrip { get; set; }
        public bool Attr_isFormal { get; set; }

        public CIMClassMSG_ABase(CIModelRepository repository, string Arg_ID, string Informal_Msg_ID, string Formal_Msg_ID, string Label, string Value, string InformalName, string Descrip, bool isFormal ) : base(repository, "MSG_A")
        {
            Attr_Arg_ID = Arg_ID;
            Attr_Informal_Msg_ID = Informal_Msg_ID;
            Attr_Formal_Msg_ID = Formal_Msg_ID;
            Attr_Label = Label;
            Attr_Value = Value;
            Attr_InformalName = InformalName;
            Attr_Descrip = Descrip;
            Attr_isFormal = isFormal;
        }

        public CIMClassMSG_ABase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Arg_ID"], (string)attrArgs["Informal_Msg_ID"], (string)attrArgs["Formal_Msg_ID"], (string)attrArgs["Label"], (string)attrArgs["Value"], (string)attrArgs["InformalName"], (string)attrArgs["Descrip"], (bool)attrArgs["isFormal"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassMSG_M LinkedToR1000()
        {
            var candidates = repository.GetCIInstances(domainName, "MSG_M").Where(i => ((CIMClassMSG_M)i).Attr_Msg_ID == this.Attr_Informal_Msg_ID);
            CIMClassMSG_M linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassMSG_M)candidates.First();
            }
            return linked;

        }

        public CIMClassMSG_M LinkedToR1001()
        {
            var candidates = repository.GetCIInstances(domainName, "MSG_M").Where(i => ((CIMClassMSG_M)i).Attr_Msg_ID == this.Attr_Formal_Msg_ID);
            CIMClassMSG_M linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassMSG_M)candidates.First();
            }
            return linked;

        }

        public CIMSubClassR1013 SubClassR1013()
        {
            var subClassNames = new List<string>() { "MSG_BA", "MSG_OA", "MSG_FA", "MSG_EA", "MSG_IA", "MSG_EPA" };
            CIMSubClassR1013 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR1013)i).CIMSuperClassMSG_A() != null && (((CIMSubClassR1013)i).CIMSuperClassMSG_A().Attr_Arg_ID == this.Attr_Arg_ID));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR1013)candidates.First();
                    break;
                }
            }
            return subClass;

        }

    }
    public class CIMClassMSG_AMBase : CIMOOAofOOAClass, CIMClassMSG_AM
    {
        public string Attr_Msg_ID { get; set; }
        public string Attr_InformalName { get; set; }
        public string Attr_Descrip { get; set; }
        public string Attr_GuardCondition { get; set; }
        public string Attr_DurationObservation { get; set; }
        public string Attr_DurationConstraint { get; set; }
        public bool Attr_isFormal { get; set; }
        public string Attr_Label { get; set; }
        public string Attr_SequenceNumb { get; set; }

        public CIMClassMSG_AMBase(CIModelRepository repository, string Msg_ID, string InformalName, string Descrip, string GuardCondition, string DurationObservation, string DurationConstraint, bool isFormal, string Label, string SequenceNumb ) : base(repository, "MSG_AM")
        {
            Attr_Msg_ID = Msg_ID;
            Attr_InformalName = InformalName;
            Attr_Descrip = Descrip;
            Attr_GuardCondition = GuardCondition;
            Attr_DurationObservation = DurationObservation;
            Attr_DurationConstraint = DurationConstraint;
            Attr_isFormal = isFormal;
            Attr_Label = Label;
            Attr_SequenceNumb = SequenceNumb;
        }

        public CIMClassMSG_AMBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Msg_ID"], (string)attrArgs["InformalName"], (string)attrArgs["Descrip"], (string)attrArgs["GuardCondition"], (string)attrArgs["DurationObservation"], (string)attrArgs["DurationConstraint"], (bool)attrArgs["isFormal"], (string)attrArgs["Label"], (string)attrArgs["SequenceNumb"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMSubClassR1019 SubClassR1019()
        {
            var subClassNames = new List<string>() { "MSG_E", "MSG_IAM", "MSG_SIG" };
            CIMSubClassR1019 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR1019)i).CIMSuperClassMSG_AM() != null && (((CIMSubClassR1019)i).CIMSuperClassMSG_AM().Attr_Msg_ID == this.Attr_Msg_ID));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR1019)candidates.First();
                    break;
                }
            }
            return subClass;

        }

        public CIMClassMSG_M CIMSuperClassMSG_M()
        {
            var candidates = repository.GetCIInstances(domainName, "MSG_M").Where(i => ((CIMClassMSG_M)i).Attr_Msg_ID == this.Attr_Msg_ID);
            CIMClassMSG_M linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassMSG_M)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassMSG_BBase : CIMOOAofOOAClass, CIMClassMSG_B
    {
        public string Attr_Msg_ID { get; set; }
        public string Attr_Brg_ID { get; set; }

        public CIMClassMSG_BBase(CIModelRepository repository, string Msg_ID, string Brg_ID ) : base(repository, "MSG_B")
        {
            Attr_Msg_ID = Msg_ID;
            Attr_Brg_ID = Brg_ID;
        }

        public CIMClassMSG_BBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Msg_ID"], (string)attrArgs["Brg_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassS_BRG LinkedToR1012()
        {
            var candidates = repository.GetCIInstances(domainName, "S_BRG").Where(i => ((CIMClassS_BRG)i).Attr_Brg_ID == this.Attr_Brg_ID);
            CIMClassS_BRG linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_BRG)candidates.First();
            }
            return linked;

        }

        public CIMClassMSG_SM CIMSuperClassMSG_SM()
        {
            var candidates = repository.GetCIInstances(domainName, "MSG_SM").Where(i => ((CIMClassMSG_SM)i).Attr_Msg_ID == this.Attr_Msg_ID);
            CIMClassMSG_SM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassMSG_SM)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassMSG_BABase : CIMOOAofOOAClass, CIMClassMSG_BA
    {
        public string Attr_Arg_ID { get; set; }
        public string Attr_BParm_ID { get; set; }

        public CIMClassMSG_BABase(CIModelRepository repository, string Arg_ID, string BParm_ID ) : base(repository, "MSG_BA")
        {
            Attr_Arg_ID = Arg_ID;
            Attr_BParm_ID = BParm_ID;
        }

        public CIMClassMSG_BABase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Arg_ID"], (string)attrArgs["BParm_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassS_BPARM LinkedToR1014()
        {
            var candidates = repository.GetCIInstances(domainName, "S_BPARM").Where(i => ((CIMClassS_BPARM)i).Attr_BParm_ID == this.Attr_BParm_ID);
            CIMClassS_BPARM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_BPARM)candidates.First();
            }
            return linked;

        }

        public CIMClassMSG_A CIMSuperClassMSG_A()
        {
            var candidates = repository.GetCIInstances(domainName, "MSG_A").Where(i => ((CIMClassMSG_A)i).Attr_Arg_ID == this.Attr_Arg_ID);
            CIMClassMSG_A linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassMSG_A)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassMSG_EBase : CIMOOAofOOAClass, CIMClassMSG_E
    {
        public string Attr_Msg_ID { get; set; }
        public string Attr_SMevt_ID { get; set; }

        public CIMClassMSG_EBase(CIModelRepository repository, string Msg_ID, string SMevt_ID ) : base(repository, "MSG_E")
        {
            Attr_Msg_ID = Msg_ID;
            Attr_SMevt_ID = SMevt_ID;
        }

        public CIMClassMSG_EBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Msg_ID"], (string)attrArgs["SMevt_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSM_EVT LinkedToR1009()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_EVT").Where(i => ((CIMClassSM_EVT)i).Attr_SMevt_ID == this.Attr_SMevt_ID);
            CIMClassSM_EVT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_EVT)candidates.First();
            }
            return linked;

        }

        public CIMClassMSG_AM CIMSuperClassMSG_AM()
        {
            var candidates = repository.GetCIInstances(domainName, "MSG_AM").Where(i => ((CIMClassMSG_AM)i).Attr_Msg_ID == this.Attr_Msg_ID);
            CIMClassMSG_AM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassMSG_AM)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassMSG_EABase : CIMOOAofOOAClass, CIMClassMSG_EA
    {
        public string Attr_Arg_ID { get; set; }
        public string Attr_SM_ID { get; set; }
        public string Attr_SMedi_ID { get; set; }

        public CIMClassMSG_EABase(CIModelRepository repository, string Arg_ID, string SM_ID, string SMedi_ID ) : base(repository, "MSG_EA")
        {
            Attr_Arg_ID = Arg_ID;
            Attr_SM_ID = SM_ID;
            Attr_SMedi_ID = SMedi_ID;
        }

        public CIMClassMSG_EABase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Arg_ID"], (string)attrArgs["SM_ID"], (string)attrArgs["SMedi_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSM_EVTDI LinkedToR1017()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_EVTDI").Where(i => ((CIMClassSM_EVTDI)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_EVTDI)i).Attr_SMedi_ID == this.Attr_SMedi_ID);
            CIMClassSM_EVTDI linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_EVTDI)candidates.First();
            }
            return linked;

        }

        public CIMClassMSG_A CIMSuperClassMSG_A()
        {
            var candidates = repository.GetCIInstances(domainName, "MSG_A").Where(i => ((CIMClassMSG_A)i).Attr_Arg_ID == this.Attr_Arg_ID);
            CIMClassMSG_A linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassMSG_A)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassMSG_EPABase : CIMOOAofOOAClass, CIMClassMSG_EPA
    {
        public string Attr_Arg_ID { get; set; }
        public string Attr_PP_Id { get; set; }

        public CIMClassMSG_EPABase(CIModelRepository repository, string Arg_ID, string PP_Id ) : base(repository, "MSG_EPA")
        {
            Attr_Arg_ID = Arg_ID;
            Attr_PP_Id = PP_Id;
        }

        public CIMClassMSG_EPABase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Arg_ID"], (string)attrArgs["PP_Id"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassC_PP LinkedToR1023()
        {
            var candidates = repository.GetCIInstances(domainName, "C_PP").Where(i => ((CIMClassC_PP)i).Attr_PP_Id == this.Attr_PP_Id);
            CIMClassC_PP linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_PP)candidates.First();
            }
            return linked;

        }

        public CIMClassMSG_A CIMSuperClassMSG_A()
        {
            var candidates = repository.GetCIInstances(domainName, "MSG_A").Where(i => ((CIMClassMSG_A)i).Attr_Arg_ID == this.Attr_Arg_ID);
            CIMClassMSG_A linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassMSG_A)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassMSG_FBase : CIMOOAofOOAClass, CIMClassMSG_F
    {
        public string Attr_Msg_ID { get; set; }
        public string Attr_Sync_ID { get; set; }

        public CIMClassMSG_FBase(CIModelRepository repository, string Msg_ID, string Sync_ID ) : base(repository, "MSG_F")
        {
            Attr_Msg_ID = Msg_ID;
            Attr_Sync_ID = Sync_ID;
        }

        public CIMClassMSG_FBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Msg_ID"], (string)attrArgs["Sync_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassS_SYNC LinkedToR1010()
        {
            var candidates = repository.GetCIInstances(domainName, "S_SYNC").Where(i => ((CIMClassS_SYNC)i).Attr_Sync_ID == this.Attr_Sync_ID);
            CIMClassS_SYNC linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_SYNC)candidates.First();
            }
            return linked;

        }

        public CIMClassMSG_SM CIMSuperClassMSG_SM()
        {
            var candidates = repository.GetCIInstances(domainName, "MSG_SM").Where(i => ((CIMClassMSG_SM)i).Attr_Msg_ID == this.Attr_Msg_ID);
            CIMClassMSG_SM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassMSG_SM)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassMSG_FABase : CIMOOAofOOAClass, CIMClassMSG_FA
    {
        public string Attr_Arg_ID { get; set; }
        public string Attr_SParm_ID { get; set; }

        public CIMClassMSG_FABase(CIModelRepository repository, string Arg_ID, string SParm_ID ) : base(repository, "MSG_FA")
        {
            Attr_Arg_ID = Arg_ID;
            Attr_SParm_ID = SParm_ID;
        }

        public CIMClassMSG_FABase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Arg_ID"], (string)attrArgs["SParm_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassS_SPARM LinkedToR1016()
        {
            var candidates = repository.GetCIInstances(domainName, "S_SPARM").Where(i => ((CIMClassS_SPARM)i).Attr_SParm_ID == this.Attr_SParm_ID);
            CIMClassS_SPARM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_SPARM)candidates.First();
            }
            return linked;

        }

        public CIMClassMSG_A CIMSuperClassMSG_A()
        {
            var candidates = repository.GetCIInstances(domainName, "MSG_A").Where(i => ((CIMClassMSG_A)i).Attr_Arg_ID == this.Attr_Arg_ID);
            CIMClassMSG_A linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassMSG_A)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassMSG_IABase : CIMOOAofOOAClass, CIMClassMSG_IA
    {
        public string Attr_Arg_ID { get; set; }

        public CIMClassMSG_IABase(CIModelRepository repository, string Arg_ID ) : base(repository, "MSG_IA")
        {
            Attr_Arg_ID = Arg_ID;
        }

        public CIMClassMSG_IABase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Arg_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassMSG_A CIMSuperClassMSG_A()
        {
            var candidates = repository.GetCIInstances(domainName, "MSG_A").Where(i => ((CIMClassMSG_A)i).Attr_Arg_ID == this.Attr_Arg_ID);
            CIMClassMSG_A linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassMSG_A)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassMSG_IAMBase : CIMOOAofOOAClass, CIMClassMSG_IAM
    {
        public string Attr_Msg_ID { get; set; }

        public CIMClassMSG_IAMBase(CIModelRepository repository, string Msg_ID ) : base(repository, "MSG_IAM")
        {
            Attr_Msg_ID = Msg_ID;
        }

        public CIMClassMSG_IAMBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Msg_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassMSG_AM CIMSuperClassMSG_AM()
        {
            var candidates = repository.GetCIInstances(domainName, "MSG_AM").Where(i => ((CIMClassMSG_AM)i).Attr_Msg_ID == this.Attr_Msg_ID);
            CIMClassMSG_AM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassMSG_AM)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassMSG_IOPBase : CIMOOAofOOAClass, CIMClassMSG_IOP
    {
        public string Attr_Msg_ID { get; set; }
        public string Attr_Id { get; set; }

        public CIMClassMSG_IOPBase(CIModelRepository repository, string Msg_ID, string Id ) : base(repository, "MSG_IOP")
        {
            Attr_Msg_ID = Msg_ID;
            Attr_Id = Id;
        }

        public CIMClassMSG_IOPBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Msg_ID"], (string)attrArgs["Id"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassC_IO LinkedToR1022()
        {
            var candidates = repository.GetCIInstances(domainName, "C_IO").Where(i => ((CIMClassC_IO)i).Attr_Id == this.Attr_Id);
            CIMClassC_IO linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_IO)candidates.First();
            }
            return linked;

        }

        public CIMClassMSG_SM CIMSuperClassMSG_SM()
        {
            var candidates = repository.GetCIInstances(domainName, "MSG_SM").Where(i => ((CIMClassMSG_SM)i).Attr_Msg_ID == this.Attr_Msg_ID);
            CIMClassMSG_SM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassMSG_SM)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassMSG_ISMBase : CIMOOAofOOAClass, CIMClassMSG_ISM
    {
        public string Attr_Msg_ID { get; set; }

        public CIMClassMSG_ISMBase(CIModelRepository repository, string Msg_ID ) : base(repository, "MSG_ISM")
        {
            Attr_Msg_ID = Msg_ID;
        }

        public CIMClassMSG_ISMBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Msg_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassMSG_SM CIMSuperClassMSG_SM()
        {
            var candidates = repository.GetCIInstances(domainName, "MSG_SM").Where(i => ((CIMClassMSG_SM)i).Attr_Msg_ID == this.Attr_Msg_ID);
            CIMClassMSG_SM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassMSG_SM)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassMSG_MBase : CIMOOAofOOAClass, CIMClassMSG_M
    {
        public string Attr_Msg_ID { get; set; }
        public string Attr_Receiver_Part_ID { get; set; }
        public string Attr_Sender_Part_ID { get; set; }
        public bool Attr_participatesInCommunication { get; set; }

        public CIMClassMSG_MBase(CIModelRepository repository, string Msg_ID, string Receiver_Part_ID, string Sender_Part_ID, bool participatesInCommunication ) : base(repository, "MSG_M")
        {
            Attr_Msg_ID = Msg_ID;
            Attr_Receiver_Part_ID = Receiver_Part_ID;
            Attr_Sender_Part_ID = Sender_Part_ID;
            Attr_participatesInCommunication = participatesInCommunication;
        }

        public CIMClassMSG_MBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Msg_ID"], (string)attrArgs["Receiver_Part_ID"], (string)attrArgs["Sender_Part_ID"], (bool)attrArgs["participatesInCommunication"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSQ_P LinkedToR1007()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_P").Where(i => ((CIMClassSQ_P)i).Attr_Part_ID == this.Attr_Sender_Part_ID);
            CIMClassSQ_P linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSQ_P)candidates.First();
            }
            return linked;

        }

        public CIMClassSQ_P LinkedToR1008()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_P").Where(i => ((CIMClassSQ_P)i).Attr_Part_ID == this.Attr_Receiver_Part_ID);
            CIMClassSQ_P linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSQ_P)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassMSG_A> LinkedFromR1000()
        {
            var candidates = repository.GetCIInstances(domainName, "MSG_A").Where(i => ((CIMClassMSG_A)i).Attr_Informal_Msg_ID == this.Attr_Msg_ID);
            var linked = new List<CIMClassMSG_A>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassMSG_A)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassMSG_A> LinkedFromR1001()
        {
            var candidates = repository.GetCIInstances(domainName, "MSG_A").Where(i => ((CIMClassMSG_A)i).Attr_Formal_Msg_ID == this.Attr_Msg_ID);
            var linked = new List<CIMClassMSG_A>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassMSG_A)c);
            }
            return linked;

        }

        public CIMSubClassR1018 SubClassR1018()
        {
            var subClassNames = new List<string>() { "MSG_AM", "MSG_SM", "MSG_R" };
            CIMSubClassR1018 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR1018)i).CIMSuperClassMSG_M() != null && (((CIMSubClassR1018)i).CIMSuperClassMSG_M().Attr_Msg_ID == this.Attr_Msg_ID));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR1018)candidates.First();
                    break;
                }
            }
            return subClass;

        }

        public CIMClassPE_PE CIMSuperClassPE_PE()
        {
            var candidates = repository.GetCIInstances(domainName, "PE_PE").Where(i => ((CIMClassPE_PE)i).Attr_Element_ID == this.Attr_Msg_ID);
            CIMClassPE_PE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassPE_PE)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassMSG_OBase : CIMOOAofOOAClass, CIMClassMSG_O
    {
        public string Attr_Msg_ID { get; set; }
        public string Attr_Tfr_ID { get; set; }

        public CIMClassMSG_OBase(CIModelRepository repository, string Msg_ID, string Tfr_ID ) : base(repository, "MSG_O")
        {
            Attr_Msg_ID = Msg_ID;
            Attr_Tfr_ID = Tfr_ID;
        }

        public CIMClassMSG_OBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Msg_ID"], (string)attrArgs["Tfr_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassO_TFR LinkedToR1011()
        {
            var candidates = repository.GetCIInstances(domainName, "O_TFR").Where(i => ((CIMClassO_TFR)i).Attr_Tfr_ID == this.Attr_Tfr_ID);
            CIMClassO_TFR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_TFR)candidates.First();
            }
            return linked;

        }

        public CIMClassMSG_SM CIMSuperClassMSG_SM()
        {
            var candidates = repository.GetCIInstances(domainName, "MSG_SM").Where(i => ((CIMClassMSG_SM)i).Attr_Msg_ID == this.Attr_Msg_ID);
            CIMClassMSG_SM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassMSG_SM)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassMSG_OABase : CIMOOAofOOAClass, CIMClassMSG_OA
    {
        public string Attr_Arg_ID { get; set; }
        public string Attr_TParm_ID { get; set; }

        public CIMClassMSG_OABase(CIModelRepository repository, string Arg_ID, string TParm_ID ) : base(repository, "MSG_OA")
        {
            Attr_Arg_ID = Arg_ID;
            Attr_TParm_ID = TParm_ID;
        }

        public CIMClassMSG_OABase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Arg_ID"], (string)attrArgs["TParm_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassO_TPARM LinkedToR1015()
        {
            var candidates = repository.GetCIInstances(domainName, "O_TPARM").Where(i => ((CIMClassO_TPARM)i).Attr_TParm_ID == this.Attr_TParm_ID);
            CIMClassO_TPARM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_TPARM)candidates.First();
            }
            return linked;

        }

        public CIMClassMSG_A CIMSuperClassMSG_A()
        {
            var candidates = repository.GetCIInstances(domainName, "MSG_A").Where(i => ((CIMClassMSG_A)i).Attr_Arg_ID == this.Attr_Arg_ID);
            CIMClassMSG_A linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassMSG_A)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassMSG_RBase : CIMOOAofOOAClass, CIMClassMSG_R
    {
        public string Attr_Msg_ID { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }
        public string Attr_GuardCondition { get; set; }
        public string Attr_ResultTarget { get; set; }
        public string Attr_ReturnValue { get; set; }
        public string Attr_SequenceNumb { get; set; }

        public CIMClassMSG_RBase(CIModelRepository repository, string Msg_ID, string Name, string Descrip, string GuardCondition, string ResultTarget, string ReturnValue, string SequenceNumb ) : base(repository, "MSG_R")
        {
            Attr_Msg_ID = Msg_ID;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
            Attr_GuardCondition = GuardCondition;
            Attr_ResultTarget = ResultTarget;
            Attr_ReturnValue = ReturnValue;
            Attr_SequenceNumb = SequenceNumb;
        }

        public CIMClassMSG_RBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Msg_ID"], (string)attrArgs["Name"], (string)attrArgs["Descrip"], (string)attrArgs["GuardCondition"], (string)attrArgs["ResultTarget"], (string)attrArgs["ReturnValue"], (string)attrArgs["SequenceNumb"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassMSG_M CIMSuperClassMSG_M()
        {
            var candidates = repository.GetCIInstances(domainName, "MSG_M").Where(i => ((CIMClassMSG_M)i).Attr_Msg_ID == this.Attr_Msg_ID);
            CIMClassMSG_M linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassMSG_M)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassMSG_SIGBase : CIMOOAofOOAClass, CIMClassMSG_SIG
    {
        public string Attr_Msg_ID { get; set; }
        public string Attr_Id { get; set; }

        public CIMClassMSG_SIGBase(CIModelRepository repository, string Msg_ID, string Id ) : base(repository, "MSG_SIG")
        {
            Attr_Msg_ID = Msg_ID;
            Attr_Id = Id;
        }

        public CIMClassMSG_SIGBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Msg_ID"], (string)attrArgs["Id"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassC_AS LinkedToR1021()
        {
            var candidates = repository.GetCIInstances(domainName, "C_AS").Where(i => ((CIMClassC_AS)i).Attr_Id == this.Attr_Id);
            CIMClassC_AS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_AS)candidates.First();
            }
            return linked;

        }

        public CIMClassMSG_AM CIMSuperClassMSG_AM()
        {
            var candidates = repository.GetCIInstances(domainName, "MSG_AM").Where(i => ((CIMClassMSG_AM)i).Attr_Msg_ID == this.Attr_Msg_ID);
            CIMClassMSG_AM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassMSG_AM)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassMSG_SMBase : CIMOOAofOOAClass, CIMClassMSG_SM
    {
        public string Attr_Msg_ID { get; set; }
        public string Attr_InformalName { get; set; }
        public string Attr_Descrip { get; set; }
        public string Attr_GuardCondition { get; set; }
        public string Attr_ResultTarget { get; set; }
        public string Attr_ReturnValue { get; set; }
        public bool Attr_isFormal { get; set; }
        public string Attr_Label { get; set; }
        public string Attr_SequenceNumb { get; set; }

        public CIMClassMSG_SMBase(CIModelRepository repository, string Msg_ID, string InformalName, string Descrip, string GuardCondition, string ResultTarget, string ReturnValue, bool isFormal, string Label, string SequenceNumb ) : base(repository, "MSG_SM")
        {
            Attr_Msg_ID = Msg_ID;
            Attr_InformalName = InformalName;
            Attr_Descrip = Descrip;
            Attr_GuardCondition = GuardCondition;
            Attr_ResultTarget = ResultTarget;
            Attr_ReturnValue = ReturnValue;
            Attr_isFormal = isFormal;
            Attr_Label = Label;
            Attr_SequenceNumb = SequenceNumb;
        }

        public CIMClassMSG_SMBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Msg_ID"], (string)attrArgs["InformalName"], (string)attrArgs["Descrip"], (string)attrArgs["GuardCondition"], (string)attrArgs["ResultTarget"], (string)attrArgs["ReturnValue"], (bool)attrArgs["isFormal"], (string)attrArgs["Label"], (string)attrArgs["SequenceNumb"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMSubClassR1020 SubClassR1020()
        {
            var subClassNames = new List<string>() { "MSG_F", "MSG_O", "MSG_B", "MSG_ISM", "MSG_IOP" };
            CIMSubClassR1020 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR1020)i).CIMSuperClassMSG_SM() != null && (((CIMSubClassR1020)i).CIMSuperClassMSG_SM().Attr_Msg_ID == this.Attr_Msg_ID));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR1020)candidates.First();
                    break;
                }
            }
            return subClass;

        }

        public CIMClassMSG_M CIMSuperClassMSG_M()
        {
            var candidates = repository.GetCIInstances(domainName, "MSG_M").Where(i => ((CIMClassMSG_M)i).Attr_Msg_ID == this.Attr_Msg_ID);
            CIMClassMSG_M linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassMSG_M)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassO_ATTRBase : CIMOOAofOOAClass, CIMClassO_ATTR
    {
        public string Attr_Attr_ID { get; set; }
        public string Attr_Obj_ID { get; set; }
        public string Attr_PAttr_ID { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }
        public string Attr_Prefix { get; set; }
        public string Attr_Root_Nam { get; set; }
        public int Attr_Pfx_Mode { get; set; }
        public string Attr_DT_ID { get; set; }
        public string Attr_Dimensions { get; set; }
        public string Attr_DefaultValue { get; set; }

        public CIMClassO_ATTRBase(CIModelRepository repository, string Attr_ID, string Obj_ID, string PAttr_ID, string Name, string Descrip, string Prefix, string Root_Nam, int Pfx_Mode, string DT_ID, string Dimensions, string DefaultValue ) : base(repository, "O_ATTR")
        {
            Attr_Attr_ID = Attr_ID;
            Attr_Obj_ID = Obj_ID;
            Attr_PAttr_ID = PAttr_ID;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
            Attr_Prefix = Prefix;
            Attr_Root_Nam = Root_Nam;
            Attr_Pfx_Mode = Pfx_Mode;
            Attr_DT_ID = DT_ID;
            Attr_Dimensions = Dimensions;
            Attr_DefaultValue = DefaultValue;
        }

        public CIMClassO_ATTRBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Attr_ID"], (string)attrArgs["Obj_ID"], (string)attrArgs["PAttr_ID"], (string)attrArgs["Name"], (string)attrArgs["Descrip"], (string)attrArgs["Prefix"], (string)attrArgs["Root_Nam"], (int)attrArgs["Pfx_Mode"], (string)attrArgs["DT_ID"], (string)attrArgs["Dimensions"], (string)attrArgs["DefaultValue"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassO_OBJ LinkedToR102()
        {
            var candidates = repository.GetCIInstances(domainName, "O_OBJ").Where(i => ((CIMClassO_OBJ)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_OBJ linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_OBJ)candidates.First();
            }
            return linked;

        }

        public CIMClassO_ATTR LinkedToR103Precedes()
        {
            var candidates = repository.GetCIInstances(domainName, "O_ATTR").Where(i => ((CIMClassO_ATTR)i).Attr_Attr_ID == this.Attr_PAttr_ID && ((CIMClassO_ATTR)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_ATTR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_ATTR)candidates.First();
            }
            return linked;

        }

        public CIMClassS_DT LinkedToR114()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DT").Where(i => ((CIMClassS_DT)i).Attr_DT_ID == this.Attr_DT_ID);
            CIMClassS_DT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_DT)candidates.First();
            }
            return linked;

        }

        public CIMClassO_ATTR LinkedFromR103Succeeds()
        {
            var candidates = repository.GetCIInstances(domainName, "O_ATTR").Where(i => ((CIMClassO_ATTR)i).Attr_PAttr_ID == this.Attr_Attr_ID && ((CIMClassO_ATTR)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_ATTR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_ATTR)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassS_DIM> LinkedFromR120()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DIM").Where(i => ((CIMClassS_DIM)i).Attr_Attr_ID == this.Attr_Attr_ID && ((CIMClassS_DIM)i).Attr_Obj_ID == this.Attr_Obj_ID);
            var linked = new List<CIMClassS_DIM>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassS_DIM)c);
            }
            return linked;

        }

        public CIMClassTE_ATTR LinkedFromR2033()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_ATTR").Where(i => ((CIMClassTE_ATTR)i).Attr_Attr_ID == this.Attr_Attr_ID && ((CIMClassTE_ATTR)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassTE_ATTR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_ATTR)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassI_AVL> LinkedFromR2910()
        {
            var candidates = repository.GetCIInstances(domainName, "I_AVL").Where(i => ((CIMClassI_AVL)i).Attr_Attr_ID == this.Attr_Attr_ID && ((CIMClassI_AVL)i).Attr_Obj_ID == this.Attr_Obj_ID);
            var linked = new List<CIMClassI_AVL>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_AVL)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassV_AVL> LinkedFromR806()
        {
            var candidates = repository.GetCIInstances(domainName, "V_AVL").Where(i => ((CIMClassV_AVL)i).Attr_Attr_ID == this.Attr_Attr_ID && ((CIMClassV_AVL)i).Attr_Obj_ID == this.Attr_Obj_ID);
            var linked = new List<CIMClassV_AVL>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_AVL)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassV_SLR> LinkedFromR812()
        {
            var candidates = repository.GetCIInstances(domainName, "V_SLR").Where(i => ((CIMClassV_SLR)i).Attr_Attr_ID == this.Attr_Attr_ID && ((CIMClassV_SLR)i).Attr_Obj_ID == this.Attr_Obj_ID);
            var linked = new List<CIMClassV_SLR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_SLR)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassSQ_AV> LinkedFromR938()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_AV").Where(i => ((CIMClassSQ_AV)i).Attr_Attr_ID == this.Attr_Attr_ID && ((CIMClassSQ_AV)i).Attr_Obj_ID == this.Attr_Obj_ID);
            var linked = new List<CIMClassSQ_AV>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassSQ_AV)c);
            }
            return linked;

        }

        public CIMSubClassR106 SubClassR106()
        {
            var subClassNames = new List<string>() { "O_BATTR", "O_RATTR" };
            CIMSubClassR106 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR106)i).CIMSuperClassO_ATTR() != null && (((CIMSubClassR106)i).CIMSuperClassO_ATTR().Attr_Attr_ID == this.Attr_Attr_ID && ((CIMSubClassR106)i).CIMSuperClassO_ATTR().Attr_Obj_ID == this.Attr_Obj_ID));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR106)candidates.First();
                    break;
                }
            }
            return subClass;

        }

        public IEnumerable<CIMClassO_OIDA> LinkedOneSideR105()
        {
            var candidates = repository.GetCIInstances(domainName, "O_OIDA").Where(i => ((CIMClassO_OIDA)i).Attr_Attr_ID == this.Attr_Attr_ID && ((CIMClassO_OIDA)i).Attr_Obj_ID == this.Attr_Obj_ID);
            var linked = new List<CIMClassO_OIDA>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassO_OIDA)c);
            }
            return linked;

        }
    }
    public class CIMClassO_BATTRBase : CIMOOAofOOAClass, CIMClassO_BATTR
    {
        public string Attr_Attr_ID { get; set; }
        public string Attr_Obj_ID { get; set; }

        public CIMClassO_BATTRBase(CIModelRepository repository, string Attr_ID, string Obj_ID ) : base(repository, "O_BATTR")
        {
            Attr_Attr_ID = Attr_ID;
            Attr_Obj_ID = Obj_ID;
        }

        public CIMClassO_BATTRBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Attr_ID"], (string)attrArgs["Obj_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public IEnumerable<CIMClassO_RATTR> LinkedFromR113()
        {
            var candidates = repository.GetCIInstances(domainName, "O_RATTR").Where(i => ((CIMClassO_RATTR)i).Attr_BAttr_ID == this.Attr_Attr_ID && ((CIMClassO_RATTR)i).Attr_BObj_ID == this.Attr_Obj_ID);
            var linked = new List<CIMClassO_RATTR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassO_RATTR)c);
            }
            return linked;

        }

        public CIMSubClassR107 SubClassR107()
        {
            var subClassNames = new List<string>() { "O_DBATTR", "O_NBATTR" };
            CIMSubClassR107 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR107)i).CIMSuperClassO_BATTR() != null && (((CIMSubClassR107)i).CIMSuperClassO_BATTR().Attr_Attr_ID == this.Attr_Attr_ID && ((CIMSubClassR107)i).CIMSuperClassO_BATTR().Attr_Obj_ID == this.Attr_Obj_ID));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR107)candidates.First();
                    break;
                }
            }
            return subClass;

        }

        public CIMClassO_ATTR CIMSuperClassO_ATTR()
        {
            var candidates = repository.GetCIInstances(domainName, "O_ATTR").Where(i => ((CIMClassO_ATTR)i).Attr_Attr_ID == this.Attr_Attr_ID && ((CIMClassO_ATTR)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_ATTR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_ATTR)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassO_DBATTRBase : CIMOOAofOOAClass, CIMClassO_DBATTR
    {
        public string Attr_Attr_ID { get; set; }
        public string Attr_Obj_ID { get; set; }
        public string Attr_Action_Semantics { get; set; }
        public int Attr_Suc_Pars { get; set; }
        public int Attr_Dialect { get; set; }

        public CIMClassO_DBATTRBase(CIModelRepository repository, string Attr_ID, string Obj_ID, string Action_Semantics, int Suc_Pars, int Dialect ) : base(repository, "O_DBATTR")
        {
            Attr_Attr_ID = Attr_ID;
            Attr_Obj_ID = Obj_ID;
            Attr_Action_Semantics = Action_Semantics;
            Attr_Suc_Pars = Suc_Pars;
            Attr_Dialect = Dialect;
        }

        public CIMClassO_DBATTRBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Attr_ID"], (string)attrArgs["Obj_ID"], (string)attrArgs["Action_Semantics"], (int)attrArgs["Suc_Pars"], (int)attrArgs["Dialect"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_DBATTR LinkedFromR2026()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_DBATTR").Where(i => ((CIMClassTE_DBATTR)i).Attr_Attr_ID == this.Attr_Attr_ID && ((CIMClassTE_DBATTR)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassTE_DBATTR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_DBATTR)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_DAB LinkedFromR693()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_DAB").Where(i => ((CIMClassACT_DAB)i).Attr_Attr_ID == this.Attr_Attr_ID && ((CIMClassACT_DAB)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassACT_DAB linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_DAB)candidates.First();
            }
            return linked;

        }

        public CIMClassO_BATTR CIMSuperClassO_BATTR()
        {
            var candidates = repository.GetCIInstances(domainName, "O_BATTR").Where(i => ((CIMClassO_BATTR)i).Attr_Attr_ID == this.Attr_Attr_ID && ((CIMClassO_BATTR)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_BATTR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_BATTR)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassO_DEFBase : CIMOOAofOOAClass, CIMClassO_DEF
    {
        public string Attr_Tfr_ID { get; set; }
        public string Attr_Rel_ID { get; set; }
        public int Attr_required { get; set; }

        public CIMClassO_DEFBase(CIModelRepository repository, string Tfr_ID, string Rel_ID, int required ) : base(repository, "O_DEF")
        {
            Attr_Tfr_ID = Tfr_ID;
            Attr_Rel_ID = Rel_ID;
            Attr_required = required;
        }

        public CIMClassO_DEFBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Tfr_ID"], (string)attrArgs["Rel_ID"], (int)attrArgs["required"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

         public CIMClassR_REL LinkedOneSideR126()
         {
            var candidates = repository.GetCIInstances(domainName, "R_REL").Where(i => ((CIMClassR_REL)i).Attr_Rel_ID == this.Attr_Rel_ID);
            CIMClassR_REL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_REL)candidates.First();
            }
            return linked;

        }

        public CIMClassO_TFR LinkedOtherSideR126()
        {
            var candidates = repository.GetCIInstances(domainName, "O_TFR").Where(i => ((CIMClassO_TFR)i).Attr_Tfr_ID == this.Attr_Tfr_ID);
            CIMClassO_TFR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_TFR)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassO_IDBase : CIMOOAofOOAClass, CIMClassO_ID
    {
        public int Attr_Oid_ID { get; set; }
        public string Attr_Obj_ID { get; set; }

        public CIMClassO_IDBase(CIModelRepository repository, int Oid_ID, string Obj_ID ) : base(repository, "O_ID")
        {
            Attr_Oid_ID = Oid_ID;
            Attr_Obj_ID = Obj_ID;
        }

        public CIMClassO_IDBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (int)attrArgs["Oid_ID"], (string)attrArgs["Obj_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassO_OBJ LinkedToR104()
        {
            var candidates = repository.GetCIInstances(domainName, "O_OBJ").Where(i => ((CIMClassO_OBJ)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_OBJ linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_OBJ)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassR_RTO> LinkedFromR109()
        {
            var candidates = repository.GetCIInstances(domainName, "R_RTO").Where(i => ((CIMClassR_RTO)i).Attr_Oid_ID == this.Attr_Oid_ID && ((CIMClassR_RTO)i).Attr_Obj_ID == this.Attr_Obj_ID);
            var linked = new List<CIMClassR_RTO>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassR_RTO)c);
            }
            return linked;

        }

        public CIMClassTE_WHERE LinkedFromR2032()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_WHERE").Where(i => ((CIMClassTE_WHERE)i).Attr_Oid_ID == this.Attr_Oid_ID && ((CIMClassTE_WHERE)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassTE_WHERE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_WHERE)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassO_OIDA> LinkedOtherSideR105()
        {
            var candidates = repository.GetCIInstances(domainName, "O_OIDA").Where(i => ((CIMClassO_OIDA)i).Attr_Oid_ID == this.Attr_Oid_ID && ((CIMClassO_OIDA)i).Attr_Obj_ID == this.Attr_Obj_ID);
            var linked = new List<CIMClassO_OIDA>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassO_OIDA)c);
            }
            return linked;

        }

    }
    public class CIMClassO_IOBJBase : CIMOOAofOOAClass, CIMClassO_IOBJ
    {
        public string Attr_IObj_ID { get; set; }
        public string Attr_Obj_ID { get; set; }
        public int Attr_Modl_Typ { get; set; }
        public string Attr_SS_IDdeprecated { get; set; }
        public string Attr_Obj_Name { get; set; }
        public string Attr_Obj_KL { get; set; }

        public CIMClassO_IOBJBase(CIModelRepository repository, string IObj_ID, string Obj_ID, int Modl_Typ, string SS_IDdeprecated, string Obj_Name, string Obj_KL ) : base(repository, "O_IOBJ")
        {
            Attr_IObj_ID = IObj_ID;
            Attr_Obj_ID = Obj_ID;
            Attr_Modl_Typ = Modl_Typ;
            Attr_SS_IDdeprecated = SS_IDdeprecated;
            Attr_Obj_Name = Obj_Name;
            Attr_Obj_KL = Obj_KL;
        }

        public CIMClassO_IOBJBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["IObj_ID"], (string)attrArgs["Obj_ID"], (int)attrArgs["Modl_Typ"], (string)attrArgs["SS_IDdeprecated"], (string)attrArgs["Obj_Name"], (string)attrArgs["Obj_KL"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassO_OBJ LinkedToR101()
        {
            var candidates = repository.GetCIInstances(domainName, "O_OBJ").Where(i => ((CIMClassO_OBJ)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_OBJ linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_OBJ)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassR_OIR> LinkedFromR202()
        {
            var candidates = repository.GetCIInstances(domainName, "R_OIR").Where(i => ((CIMClassR_OIR)i).Attr_IObj_ID == this.Attr_IObj_ID);
            var linked = new List<CIMClassR_OIR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassR_OIR)c);
            }
            return linked;

        }

        public CIMClassPE_PE CIMSuperClassPE_PE()
        {
            var candidates = repository.GetCIInstances(domainName, "PE_PE").Where(i => ((CIMClassPE_PE)i).Attr_Element_ID == this.Attr_IObj_ID);
            CIMClassPE_PE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassPE_PE)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassO_NBATTRBase : CIMOOAofOOAClass, CIMClassO_NBATTR
    {
        public string Attr_Attr_ID { get; set; }
        public string Attr_Obj_ID { get; set; }

        public CIMClassO_NBATTRBase(CIModelRepository repository, string Attr_ID, string Obj_ID ) : base(repository, "O_NBATTR")
        {
            Attr_Attr_ID = Attr_ID;
            Attr_Obj_ID = Obj_ID;
        }

        public CIMClassO_NBATTRBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Attr_ID"], (string)attrArgs["Obj_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassO_BATTR CIMSuperClassO_BATTR()
        {
            var candidates = repository.GetCIInstances(domainName, "O_BATTR").Where(i => ((CIMClassO_BATTR)i).Attr_Attr_ID == this.Attr_Attr_ID && ((CIMClassO_BATTR)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_BATTR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_BATTR)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassO_OBJBase : CIMOOAofOOAClass, CIMClassO_OBJ
    {
        public string Attr_Obj_ID { get; set; }
        public string Attr_Name { get; set; }
        public int Attr_Numb { get; set; }
        public string Attr_Key_Lett { get; set; }
        public string Attr_Descrip { get; set; }
        public string Attr_SS_IDdeprecated { get; set; }

        public CIMClassO_OBJBase(CIModelRepository repository, string Obj_ID, string Name, int Numb, string Key_Lett, string Descrip, string SS_IDdeprecated ) : base(repository, "O_OBJ")
        {
            Attr_Obj_ID = Obj_ID;
            Attr_Name = Name;
            Attr_Numb = Numb;
            Attr_Key_Lett = Key_Lett;
            Attr_Descrip = Descrip;
            Attr_SS_IDdeprecated = SS_IDdeprecated;
        }

        public CIMClassO_OBJBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Obj_ID"], (string)attrArgs["Name"], (int)attrArgs["Numb"], (string)attrArgs["Key_Lett"], (string)attrArgs["Descrip"], (string)attrArgs["SS_IDdeprecated"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public IEnumerable<CIMClassO_IOBJ> LinkedFromR101()
        {
            var candidates = repository.GetCIInstances(domainName, "O_IOBJ").Where(i => ((CIMClassO_IOBJ)i).Attr_Obj_ID == this.Attr_Obj_ID);
            var linked = new List<CIMClassO_IOBJ>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassO_IOBJ)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassO_ATTR> LinkedFromR102()
        {
            var candidates = repository.GetCIInstances(domainName, "O_ATTR").Where(i => ((CIMClassO_ATTR)i).Attr_Obj_ID == this.Attr_Obj_ID);
            var linked = new List<CIMClassO_ATTR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassO_ATTR)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassO_ID> LinkedFromR104()
        {
            var candidates = repository.GetCIInstances(domainName, "O_ID").Where(i => ((CIMClassO_ID)i).Attr_Obj_ID == this.Attr_Obj_ID);
            var linked = new List<CIMClassO_ID>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassO_ID)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassO_TFR> LinkedFromR115()
        {
            var candidates = repository.GetCIInstances(domainName, "O_TFR").Where(i => ((CIMClassO_TFR)i).Attr_Obj_ID == this.Attr_Obj_ID);
            var linked = new List<CIMClassO_TFR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassO_TFR)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassS_IRDT> LinkedFromR123()
        {
            var candidates = repository.GetCIInstances(domainName, "S_IRDT").Where(i => ((CIMClassS_IRDT)i).Attr_Obj_ID == this.Attr_Obj_ID);
            var linked = new List<CIMClassS_IRDT>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassS_IRDT)c);
            }
            return linked;

        }

        public CIMClassTE_CLASS LinkedFromR2019()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_CLASS").Where(i => ((CIMClassTE_CLASS)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassTE_CLASS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_CLASS)candidates.First();
            }
            return linked;

        }

        public CIMClassSM_ISM LinkedFromR518()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_ISM").Where(i => ((CIMClassSM_ISM)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassSM_ISM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_ISM)candidates.First();
            }
            return linked;

        }

        public CIMClassSM_ASM LinkedFromR519()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_ASM").Where(i => ((CIMClassSM_ASM)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassSM_ASM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_ASM)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_FOR> LinkedFromR670()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_FOR").Where(i => ((CIMClassACT_FOR)i).Attr_Obj_ID == this.Attr_Obj_ID);
            var linked = new List<CIMClassACT_FOR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_FOR)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_CR> LinkedFromR671()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_CR").Where(i => ((CIMClassACT_CR)i).Attr_Obj_ID == this.Attr_Obj_ID);
            var linked = new List<CIMClassACT_CR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_CR)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_CNV> LinkedFromR672()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_CNV").Where(i => ((CIMClassACT_CNV)i).Attr_Obj_ID == this.Attr_Obj_ID);
            var linked = new List<CIMClassACT_CNV>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_CNV)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_FIW> LinkedFromR676()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_FIW").Where(i => ((CIMClassACT_FIW)i).Attr_Obj_ID == this.Attr_Obj_ID);
            var linked = new List<CIMClassACT_FIW>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_FIW)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_FIO> LinkedFromR677()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_FIO").Where(i => ((CIMClassACT_FIO)i).Attr_Obj_ID == this.Attr_Obj_ID);
            var linked = new List<CIMClassACT_FIO>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_FIO)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_LNK> LinkedFromR678()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_LNK").Where(i => ((CIMClassACT_LNK)i).Attr_Obj_ID == this.Attr_Obj_ID);
            var linked = new List<CIMClassACT_LNK>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_LNK)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassV_INT> LinkedFromR818()
        {
            var candidates = repository.GetCIInstances(domainName, "V_INT").Where(i => ((CIMClassV_INT)i).Attr_Obj_ID == this.Attr_Obj_ID);
            var linked = new List<CIMClassV_INT>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_INT)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassV_INS> LinkedFromR819()
        {
            var candidates = repository.GetCIInstances(domainName, "V_INS").Where(i => ((CIMClassV_INS)i).Attr_Obj_ID == this.Attr_Obj_ID);
            var linked = new List<CIMClassV_INS>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_INS)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassSQ_CIP> LinkedFromR934()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_CIP").Where(i => ((CIMClassSQ_CIP)i).Attr_Obj_ID == this.Attr_Obj_ID);
            var linked = new List<CIMClassSQ_CIP>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassSQ_CIP)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassSQ_CP> LinkedFromR939()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_CP").Where(i => ((CIMClassSQ_CP)i).Attr_Obj_ID == this.Attr_Obj_ID);
            var linked = new List<CIMClassSQ_CP>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassSQ_CP)c);
            }
            return linked;

        }

        public CIMClassPE_PE CIMSuperClassPE_PE()
        {
            var candidates = repository.GetCIInstances(domainName, "PE_PE").Where(i => ((CIMClassPE_PE)i).Attr_Element_ID == this.Attr_Obj_ID);
            CIMClassPE_PE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassPE_PE)candidates.First();
            }
            return linked;

        }
        public IEnumerable<CIMClassR_OIR> LinkedOneSideR201()
        {
            var candidates = repository.GetCIInstances(domainName, "R_OIR").Where(i => ((CIMClassR_OIR)i).Attr_Obj_ID == this.Attr_Obj_ID);
            var linked = new List<CIMClassR_OIR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassR_OIR)c);
            }
            return linked;

        }
    }
    public class CIMClassO_OIDABase : CIMOOAofOOAClass, CIMClassO_OIDA
    {
        public string Attr_Attr_ID { get; set; }
        public string Attr_Obj_ID { get; set; }
        public int Attr_Oid_ID { get; set; }
        public string Attr_localAttributeName { get; set; }

        public CIMClassO_OIDABase(CIModelRepository repository, string Attr_ID, string Obj_ID, int Oid_ID, string localAttributeName ) : base(repository, "O_OIDA")
        {
            Attr_Attr_ID = Attr_ID;
            Attr_Obj_ID = Obj_ID;
            Attr_Oid_ID = Oid_ID;
            Attr_localAttributeName = localAttributeName;
        }

        public CIMClassO_OIDABase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Attr_ID"], (string)attrArgs["Obj_ID"], (int)attrArgs["Oid_ID"], (string)attrArgs["localAttributeName"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public IEnumerable<CIMClassO_RTIDA> LinkedOneSideR110()
        {
            var candidates = repository.GetCIInstances(domainName, "O_RTIDA").Where(i => ((CIMClassO_RTIDA)i).Attr_Attr_ID == this.Attr_Attr_ID && ((CIMClassO_RTIDA)i).Attr_Oid_ID == this.Attr_Oid_ID && ((CIMClassO_RTIDA)i).Attr_Obj_ID == this.Attr_Obj_ID);
            var linked = new List<CIMClassO_RTIDA>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassO_RTIDA)c);
            }
            return linked;

        }
         public CIMClassO_ID LinkedOneSideR105()
         {
            var candidates = repository.GetCIInstances(domainName, "O_ID").Where(i => ((CIMClassO_ID)i).Attr_Oid_ID == this.Attr_Oid_ID && ((CIMClassO_ID)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_ID linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_ID)candidates.First();
            }
            return linked;

        }

        public CIMClassO_ATTR LinkedOtherSideR105()
        {
            var candidates = repository.GetCIInstances(domainName, "O_ATTR").Where(i => ((CIMClassO_ATTR)i).Attr_Attr_ID == this.Attr_Attr_ID && ((CIMClassO_ATTR)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_ATTR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_ATTR)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassO_RATTRBase : CIMOOAofOOAClass, CIMClassO_RATTR
    {
        public string Attr_Attr_ID { get; set; }
        public string Attr_Obj_ID { get; set; }
        public string Attr_BAttr_ID { get; set; }
        public string Attr_BObj_ID { get; set; }
        public int Attr_Ref_Mode { get; set; }
        public string Attr_BaseAttrName { get; set; }

        public CIMClassO_RATTRBase(CIModelRepository repository, string Attr_ID, string Obj_ID, string BAttr_ID, string BObj_ID, int Ref_Mode, string BaseAttrName ) : base(repository, "O_RATTR")
        {
            Attr_Attr_ID = Attr_ID;
            Attr_Obj_ID = Obj_ID;
            Attr_BAttr_ID = BAttr_ID;
            Attr_BObj_ID = BObj_ID;
            Attr_Ref_Mode = Ref_Mode;
            Attr_BaseAttrName = BaseAttrName;
        }

        public CIMClassO_RATTRBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Attr_ID"], (string)attrArgs["Obj_ID"], (string)attrArgs["BAttr_ID"], (string)attrArgs["BObj_ID"], (int)attrArgs["Ref_Mode"], (string)attrArgs["BaseAttrName"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassO_BATTR LinkedToR113()
        {
            var candidates = repository.GetCIInstances(domainName, "O_BATTR").Where(i => ((CIMClassO_BATTR)i).Attr_Attr_ID == this.Attr_BAttr_ID && ((CIMClassO_BATTR)i).Attr_Obj_ID == this.Attr_BObj_ID);
            CIMClassO_BATTR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_BATTR)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassO_REF> LinkedFromR108()
        {
            var candidates = repository.GetCIInstances(domainName, "O_REF").Where(i => ((CIMClassO_REF)i).Attr_Attr_ID == this.Attr_Attr_ID && ((CIMClassO_REF)i).Attr_Obj_ID == this.Attr_Obj_ID);
            var linked = new List<CIMClassO_REF>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassO_REF)c);
            }
            return linked;

        }

        public CIMClassO_ATTR CIMSuperClassO_ATTR()
        {
            var candidates = repository.GetCIInstances(domainName, "O_ATTR").Where(i => ((CIMClassO_ATTR)i).Attr_Attr_ID == this.Attr_Attr_ID && ((CIMClassO_ATTR)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_ATTR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_ATTR)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassO_REFBase : CIMOOAofOOAClass, CIMClassO_REF
    {
        public string Attr_Obj_ID { get; set; }
        public string Attr_RObj_ID { get; set; }
        public int Attr_ROid_ID { get; set; }
        public string Attr_RAttr_ID { get; set; }
        public string Attr_Rel_ID { get; set; }
        public string Attr_OIR_ID { get; set; }
        public string Attr_ROIR_ID { get; set; }
        public string Attr_Attr_ID { get; set; }
        public string Attr_ARef_ID { get; set; }
        public string Attr_PARef_ID { get; set; }
        public bool Attr_Is_Cstrd { get; set; }
        public string Attr_Descrip { get; set; }
        public string Attr_RObj_Name { get; set; }
        public string Attr_RAttr_Name { get; set; }
        public string Attr_Rel_Name { get; set; }

        public CIMClassO_REFBase(CIModelRepository repository, string Obj_ID, string RObj_ID, int ROid_ID, string RAttr_ID, string Rel_ID, string OIR_ID, string ROIR_ID, string Attr_ID, string ARef_ID, string PARef_ID, bool Is_Cstrd, string Descrip, string RObj_Name, string RAttr_Name, string Rel_Name ) : base(repository, "O_REF")
        {
            Attr_Obj_ID = Obj_ID;
            Attr_RObj_ID = RObj_ID;
            Attr_ROid_ID = ROid_ID;
            Attr_RAttr_ID = RAttr_ID;
            Attr_Rel_ID = Rel_ID;
            Attr_OIR_ID = OIR_ID;
            Attr_ROIR_ID = ROIR_ID;
            Attr_Attr_ID = Attr_ID;
            Attr_ARef_ID = ARef_ID;
            Attr_PARef_ID = PARef_ID;
            Attr_Is_Cstrd = Is_Cstrd;
            Attr_Descrip = Descrip;
            Attr_RObj_Name = RObj_Name;
            Attr_RAttr_Name = RAttr_Name;
            Attr_Rel_Name = Rel_Name;
        }

        public CIMClassO_REFBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Obj_ID"], (string)attrArgs["RObj_ID"], (int)attrArgs["ROid_ID"], (string)attrArgs["RAttr_ID"], (string)attrArgs["Rel_ID"], (string)attrArgs["OIR_ID"], (string)attrArgs["ROIR_ID"], (string)attrArgs["Attr_ID"], (string)attrArgs["ARef_ID"], (string)attrArgs["PARef_ID"], (bool)attrArgs["Is_Cstrd"], (string)attrArgs["Descrip"], (string)attrArgs["RObj_Name"], (string)attrArgs["RAttr_Name"], (string)attrArgs["Rel_Name"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassO_RATTR LinkedToR108()
        {
            var candidates = repository.GetCIInstances(domainName, "O_RATTR").Where(i => ((CIMClassO_RATTR)i).Attr_Attr_ID == this.Attr_Attr_ID && ((CIMClassO_RATTR)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_RATTR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_RATTR)candidates.First();
            }
            return linked;

        }

        public CIMClassO_REF LinkedToR112Precedes()
        {
            var candidates = repository.GetCIInstances(domainName, "O_REF").Where(i => ((CIMClassO_REF)i).Attr_ARef_ID == this.Attr_PARef_ID);
            CIMClassO_REF linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_REF)candidates.First();
            }
            return linked;

        }

        public CIMClassO_REF LinkedFromR112Succeeds()
        {
            var candidates = repository.GetCIInstances(domainName, "O_REF").Where(i => ((CIMClassO_REF)i).Attr_PARef_ID == this.Attr_ARef_ID);
            CIMClassO_REF linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_REF)candidates.First();
            }
            return linked;

        }

         public CIMClassR_RGO LinkedOneSideR111()
         {
            var candidates = repository.GetCIInstances(domainName, "R_RGO").Where(i => ((CIMClassR_RGO)i).Attr_OIR_ID == this.Attr_OIR_ID && ((CIMClassR_RGO)i).Attr_Rel_ID == this.Attr_Rel_ID && ((CIMClassR_RGO)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassR_RGO linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_RGO)candidates.First();
            }
            return linked;

        }

        public CIMClassO_RTIDA LinkedOtherSideR111()
        {
            var candidates = repository.GetCIInstances(domainName, "O_RTIDA").Where(i => ((CIMClassO_RTIDA)i).Attr_Attr_ID == this.Attr_RAttr_ID && ((CIMClassO_RTIDA)i).Attr_OIR_ID == this.Attr_ROIR_ID && ((CIMClassO_RTIDA)i).Attr_Obj_ID == this.Attr_RObj_ID && ((CIMClassO_RTIDA)i).Attr_Oid_ID == this.Attr_ROid_ID && ((CIMClassO_RTIDA)i).Attr_Rel_ID == this.Attr_Rel_ID);
            CIMClassO_RTIDA linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_RTIDA)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassO_RTIDABase : CIMOOAofOOAClass, CIMClassO_RTIDA
    {
        public string Attr_Attr_ID { get; set; }
        public string Attr_Obj_ID { get; set; }
        public int Attr_Oid_ID { get; set; }
        public string Attr_Rel_ID { get; set; }
        public string Attr_OIR_ID { get; set; }

        public CIMClassO_RTIDABase(CIModelRepository repository, string Attr_ID, string Obj_ID, int Oid_ID, string Rel_ID, string OIR_ID ) : base(repository, "O_RTIDA")
        {
            Attr_Attr_ID = Attr_ID;
            Attr_Obj_ID = Obj_ID;
            Attr_Oid_ID = Oid_ID;
            Attr_Rel_ID = Rel_ID;
            Attr_OIR_ID = OIR_ID;
        }

        public CIMClassO_RTIDABase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Attr_ID"], (string)attrArgs["Obj_ID"], (int)attrArgs["Oid_ID"], (string)attrArgs["Rel_ID"], (string)attrArgs["OIR_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public IEnumerable<CIMClassO_REF> LinkedOneSideR111()
        {
            var candidates = repository.GetCIInstances(domainName, "O_REF").Where(i => ((CIMClassO_REF)i).Attr_RAttr_ID == this.Attr_Attr_ID && ((CIMClassO_REF)i).Attr_ROIR_ID == this.Attr_OIR_ID && ((CIMClassO_REF)i).Attr_RObj_ID == this.Attr_Obj_ID && ((CIMClassO_REF)i).Attr_ROid_ID == this.Attr_Oid_ID && ((CIMClassO_REF)i).Attr_Rel_ID == this.Attr_Rel_ID);
            var linked = new List<CIMClassO_REF>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassO_REF)c);
            }
            return linked;

        }
         public CIMClassR_RTO LinkedOneSideR110()
         {
            var candidates = repository.GetCIInstances(domainName, "R_RTO").Where(i => ((CIMClassR_RTO)i).Attr_OIR_ID == this.Attr_OIR_ID && ((CIMClassR_RTO)i).Attr_Rel_ID == this.Attr_Rel_ID && ((CIMClassR_RTO)i).Attr_Oid_ID == this.Attr_Oid_ID && ((CIMClassR_RTO)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassR_RTO linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_RTO)candidates.First();
            }
            return linked;

        }

        public CIMClassO_OIDA LinkedOtherSideR110()
        {
            var candidates = repository.GetCIInstances(domainName, "O_OIDA").Where(i => ((CIMClassO_OIDA)i).Attr_Attr_ID == this.Attr_Attr_ID && ((CIMClassO_OIDA)i).Attr_Oid_ID == this.Attr_Oid_ID && ((CIMClassO_OIDA)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_OIDA linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_OIDA)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassO_TFRBase : CIMOOAofOOAClass, CIMClassO_TFR
    {
        public string Attr_Tfr_ID { get; set; }
        public string Attr_Obj_ID { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }
        public string Attr_DT_ID { get; set; }
        public int Attr_Instance_Based { get; set; }
        public string Attr_Action_Semantics { get; set; }
        public int Attr_Suc_Pars { get; set; }
        public string Attr_Return_Dimensions { get; set; }
        public string Attr_Previous_Tfr_ID { get; set; }
        public int Attr_Dialect { get; set; }
        public int Attr_Numb { get; set; }

        public CIMClassO_TFRBase(CIModelRepository repository, string Tfr_ID, string Obj_ID, string Name, string Descrip, string DT_ID, int Instance_Based, string Action_Semantics, int Suc_Pars, string Return_Dimensions, string Previous_Tfr_ID, int Dialect, int Numb ) : base(repository, "O_TFR")
        {
            Attr_Tfr_ID = Tfr_ID;
            Attr_Obj_ID = Obj_ID;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
            Attr_DT_ID = DT_ID;
            Attr_Instance_Based = Instance_Based;
            Attr_Action_Semantics = Action_Semantics;
            Attr_Suc_Pars = Suc_Pars;
            Attr_Return_Dimensions = Return_Dimensions;
            Attr_Previous_Tfr_ID = Previous_Tfr_ID;
            Attr_Dialect = Dialect;
            Attr_Numb = Numb;
        }

        public CIMClassO_TFRBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Tfr_ID"], (string)attrArgs["Obj_ID"], (string)attrArgs["Name"], (string)attrArgs["Descrip"], (string)attrArgs["DT_ID"], (int)attrArgs["Instance_Based"], (string)attrArgs["Action_Semantics"], (int)attrArgs["Suc_Pars"], (string)attrArgs["Return_Dimensions"], (string)attrArgs["Previous_Tfr_ID"], (int)attrArgs["Dialect"], (int)attrArgs["Numb"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassO_OBJ LinkedToR115()
        {
            var candidates = repository.GetCIInstances(domainName, "O_OBJ").Where(i => ((CIMClassO_OBJ)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_OBJ linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_OBJ)candidates.First();
            }
            return linked;

        }

        public CIMClassS_DT LinkedToR116()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DT").Where(i => ((CIMClassS_DT)i).Attr_DT_ID == this.Attr_DT_ID);
            CIMClassS_DT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_DT)candidates.First();
            }
            return linked;

        }

        public CIMClassO_TFR LinkedToR125Precedes()
        {
            var candidates = repository.GetCIInstances(domainName, "O_TFR").Where(i => ((CIMClassO_TFR)i).Attr_Tfr_ID == this.Attr_Previous_Tfr_ID);
            CIMClassO_TFR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_TFR)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassMSG_O> LinkedFromR1011()
        {
            var candidates = repository.GetCIInstances(domainName, "MSG_O").Where(i => ((CIMClassMSG_O)i).Attr_Tfr_ID == this.Attr_Tfr_ID);
            var linked = new List<CIMClassMSG_O>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassMSG_O)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassO_TPARM> LinkedFromR117()
        {
            var candidates = repository.GetCIInstances(domainName, "O_TPARM").Where(i => ((CIMClassO_TPARM)i).Attr_Tfr_ID == this.Attr_Tfr_ID);
            var linked = new List<CIMClassO_TPARM>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassO_TPARM)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassS_DIM> LinkedFromR122()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DIM").Where(i => ((CIMClassS_DIM)i).Attr_Tfr_ID == this.Attr_Tfr_ID);
            var linked = new List<CIMClassS_DIM>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassS_DIM)c);
            }
            return linked;

        }

        public CIMClassO_TFR LinkedFromR125Succeeds()
        {
            var candidates = repository.GetCIInstances(domainName, "O_TFR").Where(i => ((CIMClassO_TFR)i).Attr_Previous_Tfr_ID == this.Attr_Tfr_ID);
            CIMClassO_TFR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_TFR)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_TFR LinkedFromR2024()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_TFR").Where(i => ((CIMClassTE_TFR)i).Attr_Tfr_ID == this.Attr_Tfr_ID);
            CIMClassTE_TFR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_TFR)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_TFM> LinkedFromR673()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_TFM").Where(i => ((CIMClassACT_TFM)i).Attr_Tfr_ID == this.Attr_Tfr_ID);
            var linked = new List<CIMClassACT_TFM>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_TFM)c);
            }
            return linked;

        }

        public CIMClassACT_OPB LinkedFromR696()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_OPB").Where(i => ((CIMClassACT_OPB)i).Attr_Tfr_ID == this.Attr_Tfr_ID);
            CIMClassACT_OPB linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_OPB)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassV_TRV> LinkedFromR829()
        {
            var candidates = repository.GetCIInstances(domainName, "V_TRV").Where(i => ((CIMClassV_TRV)i).Attr_Tfr_ID == this.Attr_Tfr_ID);
            var linked = new List<CIMClassV_TRV>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_TRV)c);
            }
            return linked;

        }

        public CIMClassO_DEF LinkedOneSideR126()
        {
            var candidates = repository.GetCIInstances(domainName, "O_DEF").Where(i => ((CIMClassO_DEF)i).Attr_Tfr_ID == this.Attr_Tfr_ID);
            CIMClassO_DEF linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_DEF)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassO_TPARMBase : CIMOOAofOOAClass, CIMClassO_TPARM
    {
        public string Attr_TParm_ID { get; set; }
        public string Attr_Tfr_ID { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_DT_ID { get; set; }
        public int Attr_By_Ref { get; set; }
        public string Attr_Dimensions { get; set; }
        public string Attr_Previous_TParm_ID { get; set; }
        public string Attr_Descrip { get; set; }

        public CIMClassO_TPARMBase(CIModelRepository repository, string TParm_ID, string Tfr_ID, string Name, string DT_ID, int By_Ref, string Dimensions, string Previous_TParm_ID, string Descrip ) : base(repository, "O_TPARM")
        {
            Attr_TParm_ID = TParm_ID;
            Attr_Tfr_ID = Tfr_ID;
            Attr_Name = Name;
            Attr_DT_ID = DT_ID;
            Attr_By_Ref = By_Ref;
            Attr_Dimensions = Dimensions;
            Attr_Previous_TParm_ID = Previous_TParm_ID;
            Attr_Descrip = Descrip;
        }

        public CIMClassO_TPARMBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["TParm_ID"], (string)attrArgs["Tfr_ID"], (string)attrArgs["Name"], (string)attrArgs["DT_ID"], (int)attrArgs["By_Ref"], (string)attrArgs["Dimensions"], (string)attrArgs["Previous_TParm_ID"], (string)attrArgs["Descrip"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassO_TFR LinkedToR117()
        {
            var candidates = repository.GetCIInstances(domainName, "O_TFR").Where(i => ((CIMClassO_TFR)i).Attr_Tfr_ID == this.Attr_Tfr_ID);
            CIMClassO_TFR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_TFR)candidates.First();
            }
            return linked;

        }

        public CIMClassS_DT LinkedToR118()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DT").Where(i => ((CIMClassS_DT)i).Attr_DT_ID == this.Attr_DT_ID);
            CIMClassS_DT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_DT)candidates.First();
            }
            return linked;

        }

        public CIMClassO_TPARM LinkedToR124Precedes()
        {
            var candidates = repository.GetCIInstances(domainName, "O_TPARM").Where(i => ((CIMClassO_TPARM)i).Attr_TParm_ID == this.Attr_Previous_TParm_ID);
            CIMClassO_TPARM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_TPARM)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassMSG_OA> LinkedFromR1015()
        {
            var candidates = repository.GetCIInstances(domainName, "MSG_OA").Where(i => ((CIMClassMSG_OA)i).Attr_TParm_ID == this.Attr_TParm_ID);
            var linked = new List<CIMClassMSG_OA>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassMSG_OA)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassS_DIM> LinkedFromR121()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DIM").Where(i => ((CIMClassS_DIM)i).Attr_TParm_ID == this.Attr_TParm_ID);
            var linked = new List<CIMClassS_DIM>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassS_DIM)c);
            }
            return linked;

        }

        public CIMClassO_TPARM LinkedFromR124Succeeds()
        {
            var candidates = repository.GetCIInstances(domainName, "O_TPARM").Where(i => ((CIMClassO_TPARM)i).Attr_Previous_TParm_ID == this.Attr_TParm_ID);
            CIMClassO_TPARM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_TPARM)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_PARM LinkedFromR2029()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_PARM").Where(i => ((CIMClassTE_PARM)i).Attr_TParm_ID == this.Attr_TParm_ID);
            CIMClassTE_PARM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_PARM)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassV_PVL> LinkedFromR833()
        {
            var candidates = repository.GetCIInstances(domainName, "V_PVL").Where(i => ((CIMClassV_PVL)i).Attr_TParm_ID == this.Attr_TParm_ID);
            var linked = new List<CIMClassV_PVL>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_PVL)c);
            }
            return linked;

        }

    }
    public class CIMClassPA_DICBase : CIMOOAofOOAClass, CIMClassPA_DIC
    {
        public string Attr_Component_Id { get; set; }
        public string Attr_Delegation_Id { get; set; }

        public CIMClassPA_DICBase(CIModelRepository repository, string Component_Id, string Delegation_Id ) : base(repository, "PA_DIC")
        {
            Attr_Component_Id = Component_Id;
            Attr_Delegation_Id = Delegation_Id;
        }

        public CIMClassPA_DICBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Component_Id"], (string)attrArgs["Delegation_Id"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

         public CIMClassC_C LinkedOneSideR9002()
         {
            var candidates = repository.GetCIInstances(domainName, "C_C").Where(i => ((CIMClassC_C)i).Attr_Id == this.Attr_Component_Id);
            CIMClassC_C linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_C)candidates.First();
            }
            return linked;

        }

        public CIMClassC_DG LinkedOtherSideR9002()
        {
            var candidates = repository.GetCIInstances(domainName, "C_DG").Where(i => ((CIMClassC_DG)i).Attr_Id == this.Attr_Delegation_Id);
            CIMClassC_DG linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_DG)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassPA_SICBase : CIMOOAofOOAClass, CIMClassPA_SIC
    {
        public string Attr_Component_Id { get; set; }
        public string Attr_Satisfaction_Id { get; set; }

        public CIMClassPA_SICBase(CIModelRepository repository, string Component_Id, string Satisfaction_Id ) : base(repository, "PA_SIC")
        {
            Attr_Component_Id = Component_Id;
            Attr_Satisfaction_Id = Satisfaction_Id;
        }

        public CIMClassPA_SICBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Component_Id"], (string)attrArgs["Satisfaction_Id"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

         public CIMClassC_C LinkedOneSideR9000()
         {
            var candidates = repository.GetCIInstances(domainName, "C_C").Where(i => ((CIMClassC_C)i).Attr_Id == this.Attr_Component_Id);
            CIMClassC_C linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_C)candidates.First();
            }
            return linked;

        }

        public CIMClassC_SF LinkedOtherSideR9000()
        {
            var candidates = repository.GetCIInstances(domainName, "C_SF").Where(i => ((CIMClassC_SF)i).Attr_Id == this.Attr_Satisfaction_Id);
            CIMClassC_SF linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_SF)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassPE_CRSBase : CIMOOAofOOAClass, CIMClassPE_CRS
    {
        public string Attr_Id { get; set; }
        public string Attr_Name { get; set; }
        public int Attr_Type { get; set; }

        public CIMClassPE_CRSBase(CIModelRepository repository, string Id, string Name, int Type ) : base(repository, "PE_CRS")
        {
            Attr_Id = Id;
            Attr_Name = Name;
            Attr_Type = Type;
        }

        public CIMClassPE_CRSBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Id"], (string)attrArgs["Name"], (int)attrArgs["Type"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassC_C LinkedToR8007()
        {
            var candidates = repository.GetCIInstances(domainName, "C_C").Where(i => ((CIMClassC_C)i).Attr_Id == this.Attr_Id);
            CIMClassC_C linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_C)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassPE_CVS> LinkedFromR8008()
        {
            var candidates = repository.GetCIInstances(domainName, "PE_CVS").Where(i => ((CIMClassPE_CVS)i).Attr_Type == this.Attr_Type && ((CIMClassPE_CVS)i).Attr_Name == this.Attr_Name && ((CIMClassPE_CVS)i).Attr_Id == this.Attr_Id);
            var linked = new List<CIMClassPE_CVS>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassPE_CVS)c);
            }
            return linked;

        }

    }
    public class CIMClassPE_CVSBase : CIMOOAofOOAClass, CIMClassPE_CVS
    {
        public string Attr_Visibility_ID { get; set; }
        public string Attr_Element_ID { get; set; }
        public string Attr_Id { get; set; }
        public string Attr_Name { get; set; }
        public int Attr_Type { get; set; }

        public CIMClassPE_CVSBase(CIModelRepository repository, string Visibility_ID, string Element_ID, string Id, string Name, int Type ) : base(repository, "PE_CVS")
        {
            Attr_Visibility_ID = Visibility_ID;
            Attr_Element_ID = Element_ID;
            Attr_Id = Id;
            Attr_Name = Name;
            Attr_Type = Type;
        }

        public CIMClassPE_CVSBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Visibility_ID"], (string)attrArgs["Element_ID"], (string)attrArgs["Id"], (string)attrArgs["Name"], (int)attrArgs["Type"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassPE_CRS LinkedToR8008()
        {
            var candidates = repository.GetCIInstances(domainName, "PE_CRS").Where(i => ((CIMClassPE_CRS)i).Attr_Type == this.Attr_Type && ((CIMClassPE_CRS)i).Attr_Name == this.Attr_Name && ((CIMClassPE_CRS)i).Attr_Id == this.Attr_Id);
            CIMClassPE_CRS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassPE_CRS)candidates.First();
            }
            return linked;

        }

         public CIMClassC_C LinkedOneSideR8004()
         {
            var candidates = repository.GetCIInstances(domainName, "C_C").Where(i => ((CIMClassC_C)i).Attr_Id == this.Attr_Id);
            CIMClassC_C linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_C)candidates.First();
            }
            return linked;

        }

        public CIMClassPE_PE LinkedOtherSideR8004()
        {
            var candidates = repository.GetCIInstances(domainName, "PE_PE").Where(i => ((CIMClassPE_PE)i).Attr_Element_ID == this.Attr_Element_ID);
            CIMClassPE_PE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassPE_PE)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassPE_PEBase : CIMOOAofOOAClass, CIMClassPE_PE
    {
        public string Attr_Element_ID { get; set; }
        public int Attr_Visibility { get; set; }
        public string Attr_Package_ID { get; set; }
        public string Attr_Component_ID { get; set; }
        public int Attr_type { get; set; }

        public CIMClassPE_PEBase(CIModelRepository repository, string Element_ID, int Visibility, string Package_ID, string Component_ID, int type ) : base(repository, "PE_PE")
        {
            Attr_Element_ID = Element_ID;
            Attr_Visibility = Visibility;
            Attr_Package_ID = Package_ID;
            Attr_Component_ID = Component_ID;
            Attr_type = type;
        }

        public CIMClassPE_PEBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Element_ID"], (int)attrArgs["Visibility"], (string)attrArgs["Package_ID"], (string)attrArgs["Component_ID"], (int)attrArgs["type"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassEP_PKG LinkedToR8000()
        {
            var candidates = repository.GetCIInstances(domainName, "EP_PKG").Where(i => ((CIMClassEP_PKG)i).Attr_Package_ID == this.Attr_Package_ID);
            CIMClassEP_PKG linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassEP_PKG)candidates.First();
            }
            return linked;

        }

        public CIMClassC_C LinkedToR8003()
        {
            var candidates = repository.GetCIInstances(domainName, "C_C").Where(i => ((CIMClassC_C)i).Attr_Id == this.Attr_Component_ID);
            CIMClassC_C linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_C)candidates.First();
            }
            return linked;

        }

        public CIMSubClassR8001 SubClassR8001()
        {
            var subClassNames = new List<string>() { "S_DT", "SQ_P", "UC_UCA", "A_N", "O_OBJ", "C_C", "CL_IC", "C_I", "EP_PKG", "CNST_CSP", "A_AP", "A_E", "MSG_M", "O_IOBJ", "R_REL", "S_EE", "S_SYNC", "C_SF", "C_DG", "S_EXP", "D_DEPL" };
            CIMSubClassR8001 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR8001)i).CIMSuperClassPE_PE() != null && (((CIMSubClassR8001)i).CIMSuperClassPE_PE().Attr_Element_ID == this.Attr_Element_ID));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR8001)candidates.First();
                    break;
                }
            }
            return subClass;

        }

        public IEnumerable<CIMClassPE_VIS> LinkedOtherSideR8002()
        {
            var candidates = repository.GetCIInstances(domainName, "PE_VIS").Where(i => ((CIMClassPE_VIS)i).Attr_Element_ID == this.Attr_Element_ID);
            var linked = new List<CIMClassPE_VIS>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassPE_VIS)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassG_EIS> LinkedOtherSideR9100()
        {
            var candidates = repository.GetCIInstances(domainName, "G_EIS").Where(i => ((CIMClassG_EIS)i).Attr_Element_ID == this.Attr_Element_ID);
            var linked = new List<CIMClassG_EIS>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassG_EIS)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_BIE> LinkedOneSideR640()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_BIE").Where(i => ((CIMClassACT_BIE)i).Attr_Element_ID == this.Attr_Element_ID);
            var linked = new List<CIMClassACT_BIE>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_BIE)c);
            }
            return linked;

        }
        public IEnumerable<CIMClassPE_CVS> LinkedOneSideR8004()
        {
            var candidates = repository.GetCIInstances(domainName, "PE_CVS").Where(i => ((CIMClassPE_CVS)i).Attr_Element_ID == this.Attr_Element_ID);
            var linked = new List<CIMClassPE_CVS>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassPE_CVS)c);
            }
            return linked;

        }
    }
    public class CIMClassPE_SRSBase : CIMOOAofOOAClass, CIMClassPE_SRS
    {
        public string Attr_Package_ID { get; set; }
        public string Attr_Name { get; set; }
        public int Attr_Type { get; set; }

        public CIMClassPE_SRSBase(CIModelRepository repository, string Package_ID, string Name, int Type ) : base(repository, "PE_SRS")
        {
            Attr_Package_ID = Package_ID;
            Attr_Name = Name;
            Attr_Type = Type;
        }

        public CIMClassPE_SRSBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Package_ID"], (string)attrArgs["Name"], (int)attrArgs["Type"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassEP_PKG LinkedToR8005()
        {
            var candidates = repository.GetCIInstances(domainName, "EP_PKG").Where(i => ((CIMClassEP_PKG)i).Attr_Package_ID == this.Attr_Package_ID);
            CIMClassEP_PKG linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassEP_PKG)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassPE_VIS> LinkedFromR8006()
        {
            var candidates = repository.GetCIInstances(domainName, "PE_VIS").Where(i => ((CIMClassPE_VIS)i).Attr_Package_ID == this.Attr_Package_ID && ((CIMClassPE_VIS)i).Attr_Type == this.Attr_Type && ((CIMClassPE_VIS)i).Attr_Name == this.Attr_Name);
            var linked = new List<CIMClassPE_VIS>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassPE_VIS)c);
            }
            return linked;

        }

    }
    public class CIMClassPE_VISBase : CIMOOAofOOAClass, CIMClassPE_VIS
    {
        public string Attr_Visibility_ID { get; set; }
        public string Attr_Element_ID { get; set; }
        public string Attr_Package_ID { get; set; }
        public string Attr_Name { get; set; }
        public int Attr_Type { get; set; }

        public CIMClassPE_VISBase(CIModelRepository repository, string Visibility_ID, string Element_ID, string Package_ID, string Name, int Type ) : base(repository, "PE_VIS")
        {
            Attr_Visibility_ID = Visibility_ID;
            Attr_Element_ID = Element_ID;
            Attr_Package_ID = Package_ID;
            Attr_Name = Name;
            Attr_Type = Type;
        }

        public CIMClassPE_VISBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Visibility_ID"], (string)attrArgs["Element_ID"], (string)attrArgs["Package_ID"], (string)attrArgs["Name"], (int)attrArgs["Type"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassPE_SRS LinkedToR8006()
        {
            var candidates = repository.GetCIInstances(domainName, "PE_SRS").Where(i => ((CIMClassPE_SRS)i).Attr_Package_ID == this.Attr_Package_ID && ((CIMClassPE_SRS)i).Attr_Type == this.Attr_Type && ((CIMClassPE_SRS)i).Attr_Name == this.Attr_Name);
            CIMClassPE_SRS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassPE_SRS)candidates.First();
            }
            return linked;

        }

         public CIMClassPE_PE LinkedOneSideR8002()
         {
            var candidates = repository.GetCIInstances(domainName, "PE_PE").Where(i => ((CIMClassPE_PE)i).Attr_Element_ID == this.Attr_Element_ID);
            CIMClassPE_PE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassPE_PE)candidates.First();
            }
            return linked;

        }

        public CIMClassEP_PKG LinkedOtherSideR8002()
        {
            var candidates = repository.GetCIInstances(domainName, "EP_PKG").Where(i => ((CIMClassEP_PKG)i).Attr_Package_ID == this.Attr_Package_ID);
            CIMClassEP_PKG linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassEP_PKG)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassR_AONEBase : CIMOOAofOOAClass, CIMClassR_AONE
    {
        public string Attr_Obj_ID { get; set; }
        public string Attr_Rel_ID { get; set; }
        public string Attr_OIR_ID { get; set; }
        public int Attr_Mult { get; set; }
        public int Attr_Cond { get; set; }
        public string Attr_Txt_Phrs { get; set; }

        public CIMClassR_AONEBase(CIModelRepository repository, string Obj_ID, string Rel_ID, string OIR_ID, int Mult, int Cond, string Txt_Phrs ) : base(repository, "R_AONE")
        {
            Attr_Obj_ID = Obj_ID;
            Attr_Rel_ID = Rel_ID;
            Attr_OIR_ID = OIR_ID;
            Attr_Mult = Mult;
            Attr_Cond = Cond;
            Attr_Txt_Phrs = Txt_Phrs;
        }

        public CIMClassR_AONEBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Obj_ID"], (string)attrArgs["Rel_ID"], (string)attrArgs["OIR_ID"], (int)attrArgs["Mult"], (int)attrArgs["Cond"], (string)attrArgs["Txt_Phrs"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassR_ASSOC LinkedToR209()
        {
            var candidates = repository.GetCIInstances(domainName, "R_ASSOC").Where(i => ((CIMClassR_ASSOC)i).Attr_Rel_ID == this.Attr_Rel_ID);
            CIMClassR_ASSOC linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_ASSOC)candidates.First();
            }
            return linked;

        }

        public CIMClassR_RTO CIMSuperClassR_RTO()
        {
            var candidates = repository.GetCIInstances(domainName, "R_RTO").Where(i => ((CIMClassR_RTO)i).Attr_OIR_ID == this.Attr_OIR_ID && ((CIMClassR_RTO)i).Attr_Rel_ID == this.Attr_Rel_ID && ((CIMClassR_RTO)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassR_RTO linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_RTO)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassR_AOTHBase : CIMOOAofOOAClass, CIMClassR_AOTH
    {
        public string Attr_Obj_ID { get; set; }
        public string Attr_Rel_ID { get; set; }
        public string Attr_OIR_ID { get; set; }
        public int Attr_Mult { get; set; }
        public int Attr_Cond { get; set; }
        public string Attr_Txt_Phrs { get; set; }

        public CIMClassR_AOTHBase(CIModelRepository repository, string Obj_ID, string Rel_ID, string OIR_ID, int Mult, int Cond, string Txt_Phrs ) : base(repository, "R_AOTH")
        {
            Attr_Obj_ID = Obj_ID;
            Attr_Rel_ID = Rel_ID;
            Attr_OIR_ID = OIR_ID;
            Attr_Mult = Mult;
            Attr_Cond = Cond;
            Attr_Txt_Phrs = Txt_Phrs;
        }

        public CIMClassR_AOTHBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Obj_ID"], (string)attrArgs["Rel_ID"], (string)attrArgs["OIR_ID"], (int)attrArgs["Mult"], (int)attrArgs["Cond"], (string)attrArgs["Txt_Phrs"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassR_ASSOC LinkedToR210()
        {
            var candidates = repository.GetCIInstances(domainName, "R_ASSOC").Where(i => ((CIMClassR_ASSOC)i).Attr_Rel_ID == this.Attr_Rel_ID);
            CIMClassR_ASSOC linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_ASSOC)candidates.First();
            }
            return linked;

        }

        public CIMClassR_RTO CIMSuperClassR_RTO()
        {
            var candidates = repository.GetCIInstances(domainName, "R_RTO").Where(i => ((CIMClassR_RTO)i).Attr_OIR_ID == this.Attr_OIR_ID && ((CIMClassR_RTO)i).Attr_Rel_ID == this.Attr_Rel_ID && ((CIMClassR_RTO)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassR_RTO linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_RTO)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassR_ASSOCBase : CIMOOAofOOAClass, CIMClassR_ASSOC
    {
        public string Attr_Rel_ID { get; set; }

        public CIMClassR_ASSOCBase(CIModelRepository repository, string Rel_ID ) : base(repository, "R_ASSOC")
        {
            Attr_Rel_ID = Rel_ID;
        }

        public CIMClassR_ASSOCBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Rel_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassR_AONE LinkedFromR209()
        {
            var candidates = repository.GetCIInstances(domainName, "R_AONE").Where(i => ((CIMClassR_AONE)i).Attr_Rel_ID == this.Attr_Rel_ID);
            CIMClassR_AONE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_AONE)candidates.First();
            }
            return linked;

        }

        public CIMClassR_AOTH LinkedFromR210()
        {
            var candidates = repository.GetCIInstances(domainName, "R_AOTH").Where(i => ((CIMClassR_AOTH)i).Attr_Rel_ID == this.Attr_Rel_ID);
            CIMClassR_AOTH linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_AOTH)candidates.First();
            }
            return linked;

        }

        public CIMClassR_ASSR LinkedFromR211()
        {
            var candidates = repository.GetCIInstances(domainName, "R_ASSR").Where(i => ((CIMClassR_ASSR)i).Attr_Rel_ID == this.Attr_Rel_ID);
            CIMClassR_ASSR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_ASSR)candidates.First();
            }
            return linked;

        }

        public CIMClassR_REL CIMSuperClassR_REL()
        {
            var candidates = repository.GetCIInstances(domainName, "R_REL").Where(i => ((CIMClassR_REL)i).Attr_Rel_ID == this.Attr_Rel_ID);
            CIMClassR_REL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_REL)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassR_ASSRBase : CIMOOAofOOAClass, CIMClassR_ASSR
    {
        public string Attr_Obj_ID { get; set; }
        public string Attr_Rel_ID { get; set; }
        public string Attr_OIR_ID { get; set; }
        public int Attr_Mult { get; set; }

        public CIMClassR_ASSRBase(CIModelRepository repository, string Obj_ID, string Rel_ID, string OIR_ID, int Mult ) : base(repository, "R_ASSR")
        {
            Attr_Obj_ID = Obj_ID;
            Attr_Rel_ID = Rel_ID;
            Attr_OIR_ID = OIR_ID;
            Attr_Mult = Mult;
        }

        public CIMClassR_ASSRBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Obj_ID"], (string)attrArgs["Rel_ID"], (string)attrArgs["OIR_ID"], (int)attrArgs["Mult"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassR_ASSOC LinkedToR211()
        {
            var candidates = repository.GetCIInstances(domainName, "R_ASSOC").Where(i => ((CIMClassR_ASSOC)i).Attr_Rel_ID == this.Attr_Rel_ID);
            CIMClassR_ASSOC linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_ASSOC)candidates.First();
            }
            return linked;

        }

        public CIMClassR_RGO CIMSuperClassR_RGO()
        {
            var candidates = repository.GetCIInstances(domainName, "R_RGO").Where(i => ((CIMClassR_RGO)i).Attr_OIR_ID == this.Attr_OIR_ID && ((CIMClassR_RGO)i).Attr_Rel_ID == this.Attr_Rel_ID && ((CIMClassR_RGO)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassR_RGO linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_RGO)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassR_COMPBase : CIMOOAofOOAClass, CIMClassR_COMP
    {
        public string Attr_Rel_ID { get; set; }
        public string Attr_Rel_Chn { get; set; }

        public CIMClassR_COMPBase(CIModelRepository repository, string Rel_ID, string Rel_Chn ) : base(repository, "R_COMP")
        {
            Attr_Rel_ID = Rel_ID;
            Attr_Rel_Chn = Rel_Chn;
        }

        public CIMClassR_COMPBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Rel_ID"], (string)attrArgs["Rel_Chn"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassR_CONE LinkedFromR214()
        {
            var candidates = repository.GetCIInstances(domainName, "R_CONE").Where(i => ((CIMClassR_CONE)i).Attr_Rel_ID == this.Attr_Rel_ID);
            CIMClassR_CONE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_CONE)candidates.First();
            }
            return linked;

        }

        public CIMClassR_COTH LinkedFromR215()
        {
            var candidates = repository.GetCIInstances(domainName, "R_COTH").Where(i => ((CIMClassR_COTH)i).Attr_Rel_ID == this.Attr_Rel_ID);
            CIMClassR_COTH linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_COTH)candidates.First();
            }
            return linked;

        }

        public CIMClassR_REL CIMSuperClassR_REL()
        {
            var candidates = repository.GetCIInstances(domainName, "R_REL").Where(i => ((CIMClassR_REL)i).Attr_Rel_ID == this.Attr_Rel_ID);
            CIMClassR_REL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_REL)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassR_CONEBase : CIMOOAofOOAClass, CIMClassR_CONE
    {
        public string Attr_Obj_ID { get; set; }
        public string Attr_Rel_ID { get; set; }
        public string Attr_OIR_ID { get; set; }
        public int Attr_Mult { get; set; }
        public int Attr_Cond { get; set; }
        public string Attr_Txt_Phrs { get; set; }

        public CIMClassR_CONEBase(CIModelRepository repository, string Obj_ID, string Rel_ID, string OIR_ID, int Mult, int Cond, string Txt_Phrs ) : base(repository, "R_CONE")
        {
            Attr_Obj_ID = Obj_ID;
            Attr_Rel_ID = Rel_ID;
            Attr_OIR_ID = OIR_ID;
            Attr_Mult = Mult;
            Attr_Cond = Cond;
            Attr_Txt_Phrs = Txt_Phrs;
        }

        public CIMClassR_CONEBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Obj_ID"], (string)attrArgs["Rel_ID"], (string)attrArgs["OIR_ID"], (int)attrArgs["Mult"], (int)attrArgs["Cond"], (string)attrArgs["Txt_Phrs"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassR_COMP LinkedToR214()
        {
            var candidates = repository.GetCIInstances(domainName, "R_COMP").Where(i => ((CIMClassR_COMP)i).Attr_Rel_ID == this.Attr_Rel_ID);
            CIMClassR_COMP linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_COMP)candidates.First();
            }
            return linked;

        }

        public CIMClassR_OIR CIMSuperClassR_OIR()
        {
            var candidates = repository.GetCIInstances(domainName, "R_OIR").Where(i => ((CIMClassR_OIR)i).Attr_OIR_ID == this.Attr_OIR_ID && ((CIMClassR_OIR)i).Attr_Rel_ID == this.Attr_Rel_ID && ((CIMClassR_OIR)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassR_OIR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_OIR)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassR_COTHBase : CIMOOAofOOAClass, CIMClassR_COTH
    {
        public string Attr_Obj_ID { get; set; }
        public string Attr_Rel_ID { get; set; }
        public string Attr_OIR_ID { get; set; }
        public int Attr_Mult { get; set; }
        public int Attr_Cond { get; set; }
        public string Attr_Txt_Phrs { get; set; }

        public CIMClassR_COTHBase(CIModelRepository repository, string Obj_ID, string Rel_ID, string OIR_ID, int Mult, int Cond, string Txt_Phrs ) : base(repository, "R_COTH")
        {
            Attr_Obj_ID = Obj_ID;
            Attr_Rel_ID = Rel_ID;
            Attr_OIR_ID = OIR_ID;
            Attr_Mult = Mult;
            Attr_Cond = Cond;
            Attr_Txt_Phrs = Txt_Phrs;
        }

        public CIMClassR_COTHBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Obj_ID"], (string)attrArgs["Rel_ID"], (string)attrArgs["OIR_ID"], (int)attrArgs["Mult"], (int)attrArgs["Cond"], (string)attrArgs["Txt_Phrs"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassR_COMP LinkedToR215()
        {
            var candidates = repository.GetCIInstances(domainName, "R_COMP").Where(i => ((CIMClassR_COMP)i).Attr_Rel_ID == this.Attr_Rel_ID);
            CIMClassR_COMP linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_COMP)candidates.First();
            }
            return linked;

        }

        public CIMClassR_OIR CIMSuperClassR_OIR()
        {
            var candidates = repository.GetCIInstances(domainName, "R_OIR").Where(i => ((CIMClassR_OIR)i).Attr_OIR_ID == this.Attr_OIR_ID && ((CIMClassR_OIR)i).Attr_Rel_ID == this.Attr_Rel_ID && ((CIMClassR_OIR)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassR_OIR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_OIR)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassR_FORMBase : CIMOOAofOOAClass, CIMClassR_FORM
    {
        public string Attr_Obj_ID { get; set; }
        public string Attr_Rel_ID { get; set; }
        public string Attr_OIR_ID { get; set; }
        public int Attr_Mult { get; set; }
        public int Attr_Cond { get; set; }
        public string Attr_Txt_Phrs { get; set; }

        public CIMClassR_FORMBase(CIModelRepository repository, string Obj_ID, string Rel_ID, string OIR_ID, int Mult, int Cond, string Txt_Phrs ) : base(repository, "R_FORM")
        {
            Attr_Obj_ID = Obj_ID;
            Attr_Rel_ID = Rel_ID;
            Attr_OIR_ID = OIR_ID;
            Attr_Mult = Mult;
            Attr_Cond = Cond;
            Attr_Txt_Phrs = Txt_Phrs;
        }

        public CIMClassR_FORMBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Obj_ID"], (string)attrArgs["Rel_ID"], (string)attrArgs["OIR_ID"], (int)attrArgs["Mult"], (int)attrArgs["Cond"], (string)attrArgs["Txt_Phrs"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassR_SIMP LinkedToR208()
        {
            var candidates = repository.GetCIInstances(domainName, "R_SIMP").Where(i => ((CIMClassR_SIMP)i).Attr_Rel_ID == this.Attr_Rel_ID);
            CIMClassR_SIMP linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_SIMP)candidates.First();
            }
            return linked;

        }

        public CIMClassR_RGO CIMSuperClassR_RGO()
        {
            var candidates = repository.GetCIInstances(domainName, "R_RGO").Where(i => ((CIMClassR_RGO)i).Attr_OIR_ID == this.Attr_OIR_ID && ((CIMClassR_RGO)i).Attr_Rel_ID == this.Attr_Rel_ID && ((CIMClassR_RGO)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassR_RGO linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_RGO)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassR_OIRBase : CIMOOAofOOAClass, CIMClassR_OIR
    {
        public string Attr_Obj_ID { get; set; }
        public string Attr_Rel_ID { get; set; }
        public string Attr_OIR_ID { get; set; }
        public string Attr_IObj_ID { get; set; }

        public CIMClassR_OIRBase(CIModelRepository repository, string Obj_ID, string Rel_ID, string OIR_ID, string IObj_ID ) : base(repository, "R_OIR")
        {
            Attr_Obj_ID = Obj_ID;
            Attr_Rel_ID = Rel_ID;
            Attr_OIR_ID = OIR_ID;
            Attr_IObj_ID = IObj_ID;
        }

        public CIMClassR_OIRBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Obj_ID"], (string)attrArgs["Rel_ID"], (string)attrArgs["OIR_ID"], (string)attrArgs["IObj_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassO_IOBJ LinkedToR202()
        {
            var candidates = repository.GetCIInstances(domainName, "O_IOBJ").Where(i => ((CIMClassO_IOBJ)i).Attr_IObj_ID == this.Attr_IObj_ID);
            CIMClassO_IOBJ linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_IOBJ)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_OIR LinkedFromR2035()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_OIR").Where(i => ((CIMClassTE_OIR)i).Attr_OIR_ID == this.Attr_OIR_ID && ((CIMClassTE_OIR)i).Attr_Rel_ID == this.Attr_Rel_ID && ((CIMClassTE_OIR)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassTE_OIR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_OIR)candidates.First();
            }
            return linked;

        }

        public CIMSubClassR203 SubClassR203()
        {
            var subClassNames = new List<string>() { "R_RTO", "R_RGO", "R_CONE", "R_COTH" };
            CIMSubClassR203 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR203)i).CIMSuperClassR_OIR() != null && (((CIMSubClassR203)i).CIMSuperClassR_OIR().Attr_OIR_ID == this.Attr_OIR_ID && ((CIMSubClassR203)i).CIMSuperClassR_OIR().Attr_Rel_ID == this.Attr_Rel_ID && ((CIMSubClassR203)i).CIMSuperClassR_OIR().Attr_Obj_ID == this.Attr_Obj_ID));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR203)candidates.First();
                    break;
                }
            }
            return subClass;

        }

         public CIMClassR_REL LinkedOneSideR201()
         {
            var candidates = repository.GetCIInstances(domainName, "R_REL").Where(i => ((CIMClassR_REL)i).Attr_Rel_ID == this.Attr_Rel_ID);
            CIMClassR_REL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_REL)candidates.First();
            }
            return linked;

        }

        public CIMClassO_OBJ LinkedOtherSideR201()
        {
            var candidates = repository.GetCIInstances(domainName, "O_OBJ").Where(i => ((CIMClassO_OBJ)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_OBJ linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_OBJ)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassR_PARTBase : CIMOOAofOOAClass, CIMClassR_PART
    {
        public string Attr_Obj_ID { get; set; }
        public string Attr_Rel_ID { get; set; }
        public string Attr_OIR_ID { get; set; }
        public int Attr_Mult { get; set; }
        public int Attr_Cond { get; set; }
        public string Attr_Txt_Phrs { get; set; }

        public CIMClassR_PARTBase(CIModelRepository repository, string Obj_ID, string Rel_ID, string OIR_ID, int Mult, int Cond, string Txt_Phrs ) : base(repository, "R_PART")
        {
            Attr_Obj_ID = Obj_ID;
            Attr_Rel_ID = Rel_ID;
            Attr_OIR_ID = OIR_ID;
            Attr_Mult = Mult;
            Attr_Cond = Cond;
            Attr_Txt_Phrs = Txt_Phrs;
        }

        public CIMClassR_PARTBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Obj_ID"], (string)attrArgs["Rel_ID"], (string)attrArgs["OIR_ID"], (int)attrArgs["Mult"], (int)attrArgs["Cond"], (string)attrArgs["Txt_Phrs"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassR_SIMP LinkedToR207()
        {
            var candidates = repository.GetCIInstances(domainName, "R_SIMP").Where(i => ((CIMClassR_SIMP)i).Attr_Rel_ID == this.Attr_Rel_ID);
            CIMClassR_SIMP linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_SIMP)candidates.First();
            }
            return linked;

        }

        public CIMClassR_RTO CIMSuperClassR_RTO()
        {
            var candidates = repository.GetCIInstances(domainName, "R_RTO").Where(i => ((CIMClassR_RTO)i).Attr_OIR_ID == this.Attr_OIR_ID && ((CIMClassR_RTO)i).Attr_Rel_ID == this.Attr_Rel_ID && ((CIMClassR_RTO)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassR_RTO linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_RTO)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassR_RELBase : CIMOOAofOOAClass, CIMClassR_REL
    {
        public string Attr_Rel_ID { get; set; }
        public int Attr_Numb { get; set; }
        public string Attr_Descrip { get; set; }
        public string Attr_SS_IDdeprecated { get; set; }

        public CIMClassR_RELBase(CIModelRepository repository, string Rel_ID, int Numb, string Descrip, string SS_IDdeprecated ) : base(repository, "R_REL")
        {
            Attr_Rel_ID = Rel_ID;
            Attr_Numb = Numb;
            Attr_Descrip = Descrip;
            Attr_SS_IDdeprecated = SS_IDdeprecated;
        }

        public CIMClassR_RELBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Rel_ID"], (int)attrArgs["Numb"], (string)attrArgs["Descrip"], (string)attrArgs["SS_IDdeprecated"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public IEnumerable<CIMClassCOMM_LNK> LinkedFromR1128()
        {
            var candidates = repository.GetCIInstances(domainName, "COMM_LNK").Where(i => ((CIMClassCOMM_LNK)i).Attr_Rel_ID == this.Attr_Rel_ID);
            var linked = new List<CIMClassCOMM_LNK>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassCOMM_LNK)c);
            }
            return linked;

        }

        public CIMClassTE_REL LinkedFromR2034()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_REL").Where(i => ((CIMClassTE_REL)i).Attr_Rel_ID == this.Attr_Rel_ID);
            CIMClassTE_REL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_REL)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassI_LNK> LinkedFromR2904()
        {
            var candidates = repository.GetCIInstances(domainName, "I_LNK").Where(i => ((CIMClassI_LNK)i).Attr_Rel_ID == this.Attr_Rel_ID);
            var linked = new List<CIMClassI_LNK>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_LNK)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassI_LIP> LinkedFromR2959()
        {
            var candidates = repository.GetCIInstances(domainName, "I_LIP").Where(i => ((CIMClassI_LIP)i).Attr_Rel_ID == this.Attr_Rel_ID);
            var linked = new List<CIMClassI_LIP>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_LIP)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_REL> LinkedFromR653()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_REL").Where(i => ((CIMClassACT_REL)i).Attr_Rel_ID == this.Attr_Rel_ID);
            var linked = new List<CIMClassACT_REL>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_REL)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_RU> LinkedFromR654()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_RU").Where(i => ((CIMClassACT_RU)i).Attr_Rel_ID == this.Attr_Rel_ID);
            var linked = new List<CIMClassACT_RU>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_RU)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_UNR> LinkedFromR655()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_UNR").Where(i => ((CIMClassACT_UNR)i).Attr_Rel_ID == this.Attr_Rel_ID);
            var linked = new List<CIMClassACT_UNR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_UNR)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_URU> LinkedFromR656()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_URU").Where(i => ((CIMClassACT_URU)i).Attr_Rel_ID == this.Attr_Rel_ID);
            var linked = new List<CIMClassACT_URU>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_URU)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_LNK> LinkedFromR681()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_LNK").Where(i => ((CIMClassACT_LNK)i).Attr_Rel_ID == this.Attr_Rel_ID);
            var linked = new List<CIMClassACT_LNK>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_LNK)c);
            }
            return linked;

        }

        public CIMSubClassR206 SubClassR206()
        {
            var subClassNames = new List<string>() { "R_SIMP", "R_COMP", "R_ASSOC", "R_SUBSUP" };
            CIMSubClassR206 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR206)i).CIMSuperClassR_REL() != null && (((CIMSubClassR206)i).CIMSuperClassR_REL().Attr_Rel_ID == this.Attr_Rel_ID));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR206)candidates.First();
                    break;
                }
            }
            return subClass;

        }

        public CIMClassPE_PE CIMSuperClassPE_PE()
        {
            var candidates = repository.GetCIInstances(domainName, "PE_PE").Where(i => ((CIMClassPE_PE)i).Attr_Element_ID == this.Attr_Rel_ID);
            CIMClassPE_PE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassPE_PE)candidates.First();
            }
            return linked;

        }
        public IEnumerable<CIMClassO_DEF> LinkedOtherSideR126()
        {
            var candidates = repository.GetCIInstances(domainName, "O_DEF").Where(i => ((CIMClassO_DEF)i).Attr_Rel_ID == this.Attr_Rel_ID);
            var linked = new List<CIMClassO_DEF>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassO_DEF)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassR_OIR> LinkedOtherSideR201()
        {
            var candidates = repository.GetCIInstances(domainName, "R_OIR").Where(i => ((CIMClassR_OIR)i).Attr_Rel_ID == this.Attr_Rel_ID);
            var linked = new List<CIMClassR_OIR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassR_OIR)c);
            }
            return linked;

        }

    }
    public class CIMClassR_RGOBase : CIMOOAofOOAClass, CIMClassR_RGO
    {
        public string Attr_Obj_ID { get; set; }
        public string Attr_Rel_ID { get; set; }
        public string Attr_OIR_ID { get; set; }

        public CIMClassR_RGOBase(CIModelRepository repository, string Obj_ID, string Rel_ID, string OIR_ID ) : base(repository, "R_RGO")
        {
            Attr_Obj_ID = Obj_ID;
            Attr_Rel_ID = Rel_ID;
            Attr_OIR_ID = OIR_ID;
        }

        public CIMClassR_RGOBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Obj_ID"], (string)attrArgs["Rel_ID"], (string)attrArgs["OIR_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMSubClassR205 SubClassR205()
        {
            var subClassNames = new List<string>() { "R_SUB", "R_FORM", "R_ASSR" };
            CIMSubClassR205 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR205)i).CIMSuperClassR_RGO() != null && (((CIMSubClassR205)i).CIMSuperClassR_RGO().Attr_OIR_ID == this.Attr_OIR_ID && ((CIMSubClassR205)i).CIMSuperClassR_RGO().Attr_Rel_ID == this.Attr_Rel_ID && ((CIMSubClassR205)i).CIMSuperClassR_RGO().Attr_Obj_ID == this.Attr_Obj_ID));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR205)candidates.First();
                    break;
                }
            }
            return subClass;

        }

        public CIMClassR_OIR CIMSuperClassR_OIR()
        {
            var candidates = repository.GetCIInstances(domainName, "R_OIR").Where(i => ((CIMClassR_OIR)i).Attr_OIR_ID == this.Attr_OIR_ID && ((CIMClassR_OIR)i).Attr_Rel_ID == this.Attr_Rel_ID && ((CIMClassR_OIR)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassR_OIR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_OIR)candidates.First();
            }
            return linked;

        }
        public IEnumerable<CIMClassO_REF> LinkedOtherSideR111()
        {
            var candidates = repository.GetCIInstances(domainName, "O_REF").Where(i => ((CIMClassO_REF)i).Attr_OIR_ID == this.Attr_OIR_ID && ((CIMClassO_REF)i).Attr_Rel_ID == this.Attr_Rel_ID && ((CIMClassO_REF)i).Attr_Obj_ID == this.Attr_Obj_ID);
            var linked = new List<CIMClassO_REF>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassO_REF)c);
            }
            return linked;

        }

    }
    public class CIMClassR_RTOBase : CIMOOAofOOAClass, CIMClassR_RTO
    {
        public string Attr_Obj_ID { get; set; }
        public string Attr_Rel_ID { get; set; }
        public string Attr_OIR_ID { get; set; }
        public int Attr_Oid_ID { get; set; }

        public CIMClassR_RTOBase(CIModelRepository repository, string Obj_ID, string Rel_ID, string OIR_ID, int Oid_ID ) : base(repository, "R_RTO")
        {
            Attr_Obj_ID = Obj_ID;
            Attr_Rel_ID = Rel_ID;
            Attr_OIR_ID = OIR_ID;
            Attr_Oid_ID = Oid_ID;
        }

        public CIMClassR_RTOBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Obj_ID"], (string)attrArgs["Rel_ID"], (string)attrArgs["OIR_ID"], (int)attrArgs["Oid_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassO_ID LinkedToR109()
        {
            var candidates = repository.GetCIInstances(domainName, "O_ID").Where(i => ((CIMClassO_ID)i).Attr_Oid_ID == this.Attr_Oid_ID && ((CIMClassO_ID)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_ID linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_ID)candidates.First();
            }
            return linked;

        }

        public CIMSubClassR204 SubClassR204()
        {
            var subClassNames = new List<string>() { "R_SUPER", "R_PART", "R_AONE", "R_AOTH" };
            CIMSubClassR204 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR204)i).CIMSuperClassR_RTO() != null && (((CIMSubClassR204)i).CIMSuperClassR_RTO().Attr_OIR_ID == this.Attr_OIR_ID && ((CIMSubClassR204)i).CIMSuperClassR_RTO().Attr_Rel_ID == this.Attr_Rel_ID && ((CIMSubClassR204)i).CIMSuperClassR_RTO().Attr_Obj_ID == this.Attr_Obj_ID));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR204)candidates.First();
                    break;
                }
            }
            return subClass;

        }

        public CIMClassR_OIR CIMSuperClassR_OIR()
        {
            var candidates = repository.GetCIInstances(domainName, "R_OIR").Where(i => ((CIMClassR_OIR)i).Attr_OIR_ID == this.Attr_OIR_ID && ((CIMClassR_OIR)i).Attr_Rel_ID == this.Attr_Rel_ID && ((CIMClassR_OIR)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassR_OIR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_OIR)candidates.First();
            }
            return linked;

        }
        public IEnumerable<CIMClassO_RTIDA> LinkedOtherSideR110()
        {
            var candidates = repository.GetCIInstances(domainName, "O_RTIDA").Where(i => ((CIMClassO_RTIDA)i).Attr_OIR_ID == this.Attr_OIR_ID && ((CIMClassO_RTIDA)i).Attr_Rel_ID == this.Attr_Rel_ID && ((CIMClassO_RTIDA)i).Attr_Oid_ID == this.Attr_Oid_ID && ((CIMClassO_RTIDA)i).Attr_Obj_ID == this.Attr_Obj_ID);
            var linked = new List<CIMClassO_RTIDA>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassO_RTIDA)c);
            }
            return linked;

        }

    }
    public class CIMClassR_SIMPBase : CIMOOAofOOAClass, CIMClassR_SIMP
    {
        public string Attr_Rel_ID { get; set; }

        public CIMClassR_SIMPBase(CIModelRepository repository, string Rel_ID ) : base(repository, "R_SIMP")
        {
            Attr_Rel_ID = Rel_ID;
        }

        public CIMClassR_SIMPBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Rel_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public IEnumerable<CIMClassR_PART> LinkedFromR207()
        {
            var candidates = repository.GetCIInstances(domainName, "R_PART").Where(i => ((CIMClassR_PART)i).Attr_Rel_ID == this.Attr_Rel_ID);
            var linked = new List<CIMClassR_PART>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassR_PART)c);
            }
            return linked;

        }

        public CIMClassR_FORM LinkedFromR208()
        {
            var candidates = repository.GetCIInstances(domainName, "R_FORM").Where(i => ((CIMClassR_FORM)i).Attr_Rel_ID == this.Attr_Rel_ID);
            CIMClassR_FORM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_FORM)candidates.First();
            }
            return linked;

        }

        public CIMClassR_REL CIMSuperClassR_REL()
        {
            var candidates = repository.GetCIInstances(domainName, "R_REL").Where(i => ((CIMClassR_REL)i).Attr_Rel_ID == this.Attr_Rel_ID);
            CIMClassR_REL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_REL)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassR_SUBBase : CIMOOAofOOAClass, CIMClassR_SUB
    {
        public string Attr_Obj_ID { get; set; }
        public string Attr_Rel_ID { get; set; }
        public string Attr_OIR_ID { get; set; }

        public CIMClassR_SUBBase(CIModelRepository repository, string Obj_ID, string Rel_ID, string OIR_ID ) : base(repository, "R_SUB")
        {
            Attr_Obj_ID = Obj_ID;
            Attr_Rel_ID = Rel_ID;
            Attr_OIR_ID = OIR_ID;
        }

        public CIMClassR_SUBBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Obj_ID"], (string)attrArgs["Rel_ID"], (string)attrArgs["OIR_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassR_SUBSUP LinkedToR213()
        {
            var candidates = repository.GetCIInstances(domainName, "R_SUBSUP").Where(i => ((CIMClassR_SUBSUP)i).Attr_Rel_ID == this.Attr_Rel_ID);
            CIMClassR_SUBSUP linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_SUBSUP)candidates.First();
            }
            return linked;

        }

        public CIMClassR_RGO CIMSuperClassR_RGO()
        {
            var candidates = repository.GetCIInstances(domainName, "R_RGO").Where(i => ((CIMClassR_RGO)i).Attr_OIR_ID == this.Attr_OIR_ID && ((CIMClassR_RGO)i).Attr_Rel_ID == this.Attr_Rel_ID && ((CIMClassR_RGO)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassR_RGO linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_RGO)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassR_SUBSUPBase : CIMOOAofOOAClass, CIMClassR_SUBSUP
    {
        public string Attr_Rel_ID { get; set; }

        public CIMClassR_SUBSUPBase(CIModelRepository repository, string Rel_ID ) : base(repository, "R_SUBSUP")
        {
            Attr_Rel_ID = Rel_ID;
        }

        public CIMClassR_SUBSUPBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Rel_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassR_SUPER LinkedFromR212()
        {
            var candidates = repository.GetCIInstances(domainName, "R_SUPER").Where(i => ((CIMClassR_SUPER)i).Attr_Rel_ID == this.Attr_Rel_ID);
            CIMClassR_SUPER linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_SUPER)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassR_SUB> LinkedFromR213()
        {
            var candidates = repository.GetCIInstances(domainName, "R_SUB").Where(i => ((CIMClassR_SUB)i).Attr_Rel_ID == this.Attr_Rel_ID);
            var linked = new List<CIMClassR_SUB>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassR_SUB)c);
            }
            return linked;

        }

        public CIMClassR_REL CIMSuperClassR_REL()
        {
            var candidates = repository.GetCIInstances(domainName, "R_REL").Where(i => ((CIMClassR_REL)i).Attr_Rel_ID == this.Attr_Rel_ID);
            CIMClassR_REL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_REL)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassR_SUPERBase : CIMOOAofOOAClass, CIMClassR_SUPER
    {
        public string Attr_Obj_ID { get; set; }
        public string Attr_Rel_ID { get; set; }
        public string Attr_OIR_ID { get; set; }

        public CIMClassR_SUPERBase(CIModelRepository repository, string Obj_ID, string Rel_ID, string OIR_ID ) : base(repository, "R_SUPER")
        {
            Attr_Obj_ID = Obj_ID;
            Attr_Rel_ID = Rel_ID;
            Attr_OIR_ID = OIR_ID;
        }

        public CIMClassR_SUPERBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Obj_ID"], (string)attrArgs["Rel_ID"], (string)attrArgs["OIR_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassR_SUBSUP LinkedToR212()
        {
            var candidates = repository.GetCIInstances(domainName, "R_SUBSUP").Where(i => ((CIMClassR_SUBSUP)i).Attr_Rel_ID == this.Attr_Rel_ID);
            CIMClassR_SUBSUP linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_SUBSUP)candidates.First();
            }
            return linked;

        }

        public CIMClassR_RTO CIMSuperClassR_RTO()
        {
            var candidates = repository.GetCIInstances(domainName, "R_RTO").Where(i => ((CIMClassR_RTO)i).Attr_OIR_ID == this.Attr_OIR_ID && ((CIMClassR_RTO)i).Attr_Rel_ID == this.Attr_Rel_ID && ((CIMClassR_RTO)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassR_RTO linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_RTO)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassSM_ACTBase : CIMOOAofOOAClass, CIMClassSM_ACT
    {
        public string Attr_Act_ID { get; set; }
        public string Attr_SM_ID { get; set; }
        public int Attr_Suc_Pars { get; set; }
        public string Attr_Action_Semantics { get; set; }
        public string Attr_Descrip { get; set; }
        public int Attr_Dialect { get; set; }

        public CIMClassSM_ACTBase(CIModelRepository repository, string Act_ID, string SM_ID, int Suc_Pars, string Action_Semantics, string Descrip, int Dialect ) : base(repository, "SM_ACT")
        {
            Attr_Act_ID = Act_ID;
            Attr_SM_ID = SM_ID;
            Attr_Suc_Pars = Suc_Pars;
            Attr_Action_Semantics = Action_Semantics;
            Attr_Descrip = Descrip;
            Attr_Dialect = Dialect;
        }

        public CIMClassSM_ACTBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Act_ID"], (string)attrArgs["SM_ID"], (int)attrArgs["Suc_Pars"], (string)attrArgs["Action_Semantics"], (string)attrArgs["Descrip"], (int)attrArgs["Dialect"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSM_SM LinkedToR515()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_SM").Where(i => ((CIMClassSM_SM)i).Attr_SM_ID == this.Attr_SM_ID);
            CIMClassSM_SM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_SM)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_ACT LinkedFromR2022()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_ACT").Where(i => ((CIMClassTE_ACT)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassTE_ACT)i).Attr_Act_ID == this.Attr_Act_ID);
            CIMClassTE_ACT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_ACT)candidates.First();
            }
            return linked;

        }

        public CIMClassSM_AH LinkedFromR514()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_AH").Where(i => ((CIMClassSM_AH)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_AH)i).Attr_Act_ID == this.Attr_Act_ID);
            CIMClassSM_AH linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_AH)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_TAB LinkedFromR688()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_TAB").Where(i => ((CIMClassACT_TAB)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassACT_TAB)i).Attr_Act_ID == this.Attr_Act_ID);
            CIMClassACT_TAB linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_TAB)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_SAB LinkedFromR691()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SAB").Where(i => ((CIMClassACT_SAB)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassACT_SAB)i).Attr_Act_ID == this.Attr_Act_ID);
            CIMClassACT_SAB linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_SAB)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassSM_AHBase : CIMOOAofOOAClass, CIMClassSM_AH
    {
        public string Attr_Act_ID { get; set; }
        public string Attr_SM_ID { get; set; }

        public CIMClassSM_AHBase(CIModelRepository repository, string Act_ID, string SM_ID ) : base(repository, "SM_AH")
        {
            Attr_Act_ID = Act_ID;
            Attr_SM_ID = SM_ID;
        }

        public CIMClassSM_AHBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Act_ID"], (string)attrArgs["SM_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSM_ACT LinkedToR514()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_ACT").Where(i => ((CIMClassSM_ACT)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_ACT)i).Attr_Act_ID == this.Attr_Act_ID);
            CIMClassSM_ACT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_ACT)candidates.First();
            }
            return linked;

        }

        public CIMSubClassR513 SubClassR513()
        {
            var subClassNames = new List<string>() { "SM_MOAH", "SM_MEAH", "SM_TAH" };
            CIMSubClassR513 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR513)i).CIMSuperClassSM_AH() != null && (((CIMSubClassR513)i).CIMSuperClassSM_AH().Attr_SM_ID == this.Attr_SM_ID && ((CIMSubClassR513)i).CIMSuperClassSM_AH().Attr_Act_ID == this.Attr_Act_ID));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR513)candidates.First();
                    break;
                }
            }
            return subClass;

        }

    }
    public class CIMClassSM_ASMBase : CIMOOAofOOAClass, CIMClassSM_ASM
    {
        public string Attr_SM_ID { get; set; }
        public string Attr_Obj_ID { get; set; }

        public CIMClassSM_ASMBase(CIModelRepository repository, string SM_ID, string Obj_ID ) : base(repository, "SM_ASM")
        {
            Attr_SM_ID = SM_ID;
            Attr_Obj_ID = Obj_ID;
        }

        public CIMClassSM_ASMBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["SM_ID"], (string)attrArgs["Obj_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassO_OBJ LinkedToR519()
        {
            var candidates = repository.GetCIInstances(domainName, "O_OBJ").Where(i => ((CIMClassO_OBJ)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_OBJ linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_OBJ)candidates.First();
            }
            return linked;

        }

        public CIMClassSM_SM CIMSuperClassSM_SM()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_SM").Where(i => ((CIMClassSM_SM)i).Attr_SM_ID == this.Attr_SM_ID);
            CIMClassSM_SM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_SM)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassSM_CHBase : CIMOOAofOOAClass, CIMClassSM_CH
    {
        public string Attr_SMstt_ID { get; set; }
        public string Attr_SMevt_ID { get; set; }
        public string Attr_SM_ID { get; set; }
        public string Attr_SMspd_IDdeprecated { get; set; }
        public string Attr_Descrip { get; set; }

        public CIMClassSM_CHBase(CIModelRepository repository, string SMstt_ID, string SMevt_ID, string SM_ID, string SMspd_IDdeprecated, string Descrip ) : base(repository, "SM_CH")
        {
            Attr_SMstt_ID = SMstt_ID;
            Attr_SMevt_ID = SMevt_ID;
            Attr_SM_ID = SM_ID;
            Attr_SMspd_IDdeprecated = SMspd_IDdeprecated;
            Attr_Descrip = Descrip;
        }

        public CIMClassSM_CHBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["SMstt_ID"], (string)attrArgs["SMevt_ID"], (string)attrArgs["SM_ID"], (string)attrArgs["SMspd_IDdeprecated"], (string)attrArgs["Descrip"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSM_SEME CIMSuperClassSM_SEME()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_SEME").Where(i => ((CIMClassSM_SEME)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_SEME)i).Attr_SMevt_ID == this.Attr_SMevt_ID && ((CIMClassSM_SEME)i).Attr_SMstt_ID == this.Attr_SMstt_ID);
            CIMClassSM_SEME linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_SEME)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassSM_CRTXNBase : CIMOOAofOOAClass, CIMClassSM_CRTXN
    {
        public string Attr_Trans_ID { get; set; }
        public string Attr_SM_ID { get; set; }
        public string Attr_SMevt_ID { get; set; }
        public string Attr_SMspd_IDdeprecated { get; set; }

        public CIMClassSM_CRTXNBase(CIModelRepository repository, string Trans_ID, string SM_ID, string SMevt_ID, string SMspd_IDdeprecated ) : base(repository, "SM_CRTXN")
        {
            Attr_Trans_ID = Trans_ID;
            Attr_SM_ID = SM_ID;
            Attr_SMevt_ID = SMevt_ID;
            Attr_SMspd_IDdeprecated = SMspd_IDdeprecated;
        }

        public CIMClassSM_CRTXNBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Trans_ID"], (string)attrArgs["SM_ID"], (string)attrArgs["SMevt_ID"], (string)attrArgs["SMspd_IDdeprecated"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSM_LEVT LinkedToR509()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_LEVT").Where(i => ((CIMClassSM_LEVT)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_LEVT)i).Attr_SMevt_ID == this.Attr_SMevt_ID);
            CIMClassSM_LEVT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_LEVT)candidates.First();
            }
            return linked;

        }

        public CIMClassSM_TXN CIMSuperClassSM_TXN()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_TXN").Where(i => ((CIMClassSM_TXN)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_TXN)i).Attr_Trans_ID == this.Attr_Trans_ID);
            CIMClassSM_TXN linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_TXN)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassSM_EIGNBase : CIMOOAofOOAClass, CIMClassSM_EIGN
    {
        public string Attr_SMstt_ID { get; set; }
        public string Attr_SMevt_ID { get; set; }
        public string Attr_SM_ID { get; set; }
        public string Attr_SMspd_IDdeprecated { get; set; }
        public string Attr_Descrip { get; set; }

        public CIMClassSM_EIGNBase(CIModelRepository repository, string SMstt_ID, string SMevt_ID, string SM_ID, string SMspd_IDdeprecated, string Descrip ) : base(repository, "SM_EIGN")
        {
            Attr_SMstt_ID = SMstt_ID;
            Attr_SMevt_ID = SMevt_ID;
            Attr_SM_ID = SM_ID;
            Attr_SMspd_IDdeprecated = SMspd_IDdeprecated;
            Attr_Descrip = Descrip;
        }

        public CIMClassSM_EIGNBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["SMstt_ID"], (string)attrArgs["SMevt_ID"], (string)attrArgs["SM_ID"], (string)attrArgs["SMspd_IDdeprecated"], (string)attrArgs["Descrip"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSM_SEME CIMSuperClassSM_SEME()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_SEME").Where(i => ((CIMClassSM_SEME)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_SEME)i).Attr_SMevt_ID == this.Attr_SMevt_ID && ((CIMClassSM_SEME)i).Attr_SMstt_ID == this.Attr_SMstt_ID);
            CIMClassSM_SEME linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_SEME)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassSM_EVTBase : CIMOOAofOOAClass, CIMClassSM_EVT
    {
        public string Attr_SMevt_ID { get; set; }
        public string Attr_SM_ID { get; set; }
        public string Attr_SMspd_IDdeprecated { get; set; }
        public int Attr_Numb { get; set; }
        public string Attr_Mning { get; set; }
        public int Attr_Is_Lbl_U { get; set; }
        public string Attr_Unq_Lbl { get; set; }
        public string Attr_Drv_Lbl { get; set; }
        public string Attr_Descrip { get; set; }

        public CIMClassSM_EVTBase(CIModelRepository repository, string SMevt_ID, string SM_ID, string SMspd_IDdeprecated, int Numb, string Mning, int Is_Lbl_U, string Unq_Lbl, string Drv_Lbl, string Descrip ) : base(repository, "SM_EVT")
        {
            Attr_SMevt_ID = SMevt_ID;
            Attr_SM_ID = SM_ID;
            Attr_SMspd_IDdeprecated = SMspd_IDdeprecated;
            Attr_Numb = Numb;
            Attr_Mning = Mning;
            Attr_Is_Lbl_U = Is_Lbl_U;
            Attr_Unq_Lbl = Unq_Lbl;
            Attr_Drv_Lbl = Drv_Lbl;
            Attr_Descrip = Descrip;
        }

        public CIMClassSM_EVTBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["SMevt_ID"], (string)attrArgs["SM_ID"], (string)attrArgs["SMspd_IDdeprecated"], (int)attrArgs["Numb"], (string)attrArgs["Mning"], (int)attrArgs["Is_Lbl_U"], (string)attrArgs["Unq_Lbl"], (string)attrArgs["Drv_Lbl"], (string)attrArgs["Descrip"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSM_SM LinkedToR502()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_SM").Where(i => ((CIMClassSM_SM)i).Attr_SM_ID == this.Attr_SM_ID);
            CIMClassSM_SM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_SM)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassMSG_E> LinkedFromR1009()
        {
            var candidates = repository.GetCIInstances(domainName, "MSG_E").Where(i => ((CIMClassMSG_E)i).Attr_SMevt_ID == this.Attr_SMevt_ID);
            var linked = new List<CIMClassMSG_E>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassMSG_E)c);
            }
            return linked;

        }

        public CIMClassTE_EVT LinkedFromR2036()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_EVT").Where(i => ((CIMClassTE_EVT)i).Attr_SMevt_ID == this.Attr_SMevt_ID);
            CIMClassTE_EVT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_EVT)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassI_EVI> LinkedFromR2906()
        {
            var candidates = repository.GetCIInstances(domainName, "I_EVI").Where(i => ((CIMClassI_EVI)i).Attr_SMevt_ID == this.Attr_SMevt_ID);
            var linked = new List<CIMClassI_EVI>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_EVI)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassSM_EVTDI> LinkedFromR532()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_EVTDI").Where(i => ((CIMClassSM_EVTDI)i).Attr_SMevt_ID == this.Attr_SMevt_ID);
            var linked = new List<CIMClassSM_EVTDI>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassSM_EVTDI)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassE_CSME> LinkedFromR706()
        {
            var candidates = repository.GetCIInstances(domainName, "E_CSME").Where(i => ((CIMClassE_CSME)i).Attr_SMevt_ID == this.Attr_SMevt_ID);
            var linked = new List<CIMClassE_CSME>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassE_CSME)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassE_GSME> LinkedFromR707()
        {
            var candidates = repository.GetCIInstances(domainName, "E_GSME").Where(i => ((CIMClassE_GSME)i).Attr_SMevt_ID == this.Attr_SMevt_ID);
            var linked = new List<CIMClassE_GSME>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassE_GSME)c);
            }
            return linked;

        }

        public CIMSubClassR525 SubClassR525()
        {
            var subClassNames = new List<string>() { "SM_SEVT", "SM_PEVT" };
            CIMSubClassR525 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR525)i).CIMSuperClassSM_EVT() != null && (((CIMSubClassR525)i).CIMSuperClassSM_EVT().Attr_SM_ID == this.Attr_SM_ID && ((CIMSubClassR525)i).CIMSuperClassSM_EVT().Attr_SMevt_ID == this.Attr_SMevt_ID));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR525)candidates.First();
                    break;
                }
            }
            return subClass;

        }

    }
    public class CIMClassSM_EVTDIBase : CIMOOAofOOAClass, CIMClassSM_EVTDI
    {
        public string Attr_SMedi_ID { get; set; }
        public string Attr_SM_ID { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }
        public string Attr_DT_ID { get; set; }
        public string Attr_Dimensions { get; set; }
        public string Attr_SMevt_ID { get; set; }
        public string Attr_Previous_SMedi_ID { get; set; }

        public CIMClassSM_EVTDIBase(CIModelRepository repository, string SMedi_ID, string SM_ID, string Name, string Descrip, string DT_ID, string Dimensions, string SMevt_ID, string Previous_SMedi_ID ) : base(repository, "SM_EVTDI")
        {
            Attr_SMedi_ID = SMedi_ID;
            Attr_SM_ID = SM_ID;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
            Attr_DT_ID = DT_ID;
            Attr_Dimensions = Dimensions;
            Attr_SMevt_ID = SMevt_ID;
            Attr_Previous_SMedi_ID = Previous_SMedi_ID;
        }

        public CIMClassSM_EVTDIBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["SMedi_ID"], (string)attrArgs["SM_ID"], (string)attrArgs["Name"], (string)attrArgs["Descrip"], (string)attrArgs["DT_ID"], (string)attrArgs["Dimensions"], (string)attrArgs["SMevt_ID"], (string)attrArgs["Previous_SMedi_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSM_SM LinkedToR516()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_SM").Where(i => ((CIMClassSM_SM)i).Attr_SM_ID == this.Attr_SM_ID);
            CIMClassSM_SM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_SM)candidates.First();
            }
            return linked;

        }

        public CIMClassS_DT LinkedToR524()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DT").Where(i => ((CIMClassS_DT)i).Attr_DT_ID == this.Attr_DT_ID);
            CIMClassS_DT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_DT)candidates.First();
            }
            return linked;

        }

        public CIMClassSM_EVT LinkedToR532()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_EVT").Where(i => ((CIMClassSM_EVT)i).Attr_SMevt_ID == this.Attr_SMevt_ID);
            CIMClassSM_EVT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_EVT)candidates.First();
            }
            return linked;

        }

        public CIMClassSM_EVTDI LinkedToR533Precedes()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_EVTDI").Where(i => ((CIMClassSM_EVTDI)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_EVTDI)i).Attr_SMedi_ID == this.Attr_Previous_SMedi_ID);
            CIMClassSM_EVTDI linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_EVTDI)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassMSG_EA> LinkedFromR1017()
        {
            var candidates = repository.GetCIInstances(domainName, "MSG_EA").Where(i => ((CIMClassMSG_EA)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassMSG_EA)i).Attr_SMedi_ID == this.Attr_SMedi_ID);
            var linked = new List<CIMClassMSG_EA>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassMSG_EA)c);
            }
            return linked;

        }

        public CIMClassTE_PARM LinkedFromR2031()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_PARM").Where(i => ((CIMClassTE_PARM)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassTE_PARM)i).Attr_SMedi_ID == this.Attr_SMedi_ID);
            CIMClassTE_PARM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_PARM)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassI_DIV> LinkedFromR2934()
        {
            var candidates = repository.GetCIInstances(domainName, "I_DIV").Where(i => ((CIMClassI_DIV)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassI_DIV)i).Attr_SMedi_ID == this.Attr_SMedi_ID);
            var linked = new List<CIMClassI_DIV>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_DIV)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassS_DIM> LinkedFromR531()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DIM").Where(i => ((CIMClassS_DIM)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassS_DIM)i).Attr_SMedi_ID == this.Attr_SMedi_ID);
            var linked = new List<CIMClassS_DIM>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassS_DIM)c);
            }
            return linked;

        }

        public CIMClassSM_EVTDI LinkedFromR533Succeeds()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_EVTDI").Where(i => ((CIMClassSM_EVTDI)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_EVTDI)i).Attr_Previous_SMedi_ID == this.Attr_SMedi_ID);
            CIMClassSM_EVTDI linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_EVTDI)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassV_EPR> LinkedFromR846()
        {
            var candidates = repository.GetCIInstances(domainName, "V_EPR").Where(i => ((CIMClassV_EPR)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassV_EPR)i).Attr_SMedi_ID == this.Attr_SMedi_ID);
            var linked = new List<CIMClassV_EPR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_EPR)c);
            }
            return linked;

        }

    }
    public class CIMClassSM_ISMBase : CIMOOAofOOAClass, CIMClassSM_ISM
    {
        public string Attr_SM_ID { get; set; }
        public string Attr_Obj_ID { get; set; }

        public CIMClassSM_ISMBase(CIModelRepository repository, string SM_ID, string Obj_ID ) : base(repository, "SM_ISM")
        {
            Attr_SM_ID = SM_ID;
            Attr_Obj_ID = Obj_ID;
        }

        public CIMClassSM_ISMBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["SM_ID"], (string)attrArgs["Obj_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassO_OBJ LinkedToR518()
        {
            var candidates = repository.GetCIInstances(domainName, "O_OBJ").Where(i => ((CIMClassO_OBJ)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_OBJ linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_OBJ)candidates.First();
            }
            return linked;

        }

        public CIMClassSM_SM CIMSuperClassSM_SM()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_SM").Where(i => ((CIMClassSM_SM)i).Attr_SM_ID == this.Attr_SM_ID);
            CIMClassSM_SM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_SM)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassSM_LEVTBase : CIMOOAofOOAClass, CIMClassSM_LEVT
    {
        public string Attr_SMevt_ID { get; set; }
        public string Attr_SM_ID { get; set; }
        public string Attr_SMspd_IDdeprecated { get; set; }

        public CIMClassSM_LEVTBase(CIModelRepository repository, string SMevt_ID, string SM_ID, string SMspd_IDdeprecated ) : base(repository, "SM_LEVT")
        {
            Attr_SMevt_ID = SMevt_ID;
            Attr_SM_ID = SM_ID;
            Attr_SMspd_IDdeprecated = SMspd_IDdeprecated;
        }

        public CIMClassSM_LEVTBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["SMevt_ID"], (string)attrArgs["SM_ID"], (string)attrArgs["SMspd_IDdeprecated"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSM_CRTXN LinkedFromR509()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_CRTXN").Where(i => ((CIMClassSM_CRTXN)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_CRTXN)i).Attr_SMevt_ID == this.Attr_SMevt_ID);
            CIMClassSM_CRTXN linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_CRTXN)candidates.First();
            }
            return linked;

        }

        public CIMClassSM_SEVT CIMSuperClassSM_SEVT()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_SEVT").Where(i => ((CIMClassSM_SEVT)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_SEVT)i).Attr_SMevt_ID == this.Attr_SMevt_ID);
            CIMClassSM_SEVT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_SEVT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassSM_MEAHBase : CIMOOAofOOAClass, CIMClassSM_MEAH
    {
        public string Attr_Act_ID { get; set; }
        public string Attr_SM_ID { get; set; }
        public string Attr_Trans_ID { get; set; }

        public CIMClassSM_MEAHBase(CIModelRepository repository, string Act_ID, string SM_ID, string Trans_ID ) : base(repository, "SM_MEAH")
        {
            Attr_Act_ID = Act_ID;
            Attr_SM_ID = SM_ID;
            Attr_Trans_ID = Trans_ID;
        }

        public CIMClassSM_MEAHBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Act_ID"], (string)attrArgs["SM_ID"], (string)attrArgs["Trans_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSM_AH CIMSuperClassSM_AH()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_AH").Where(i => ((CIMClassSM_AH)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_AH)i).Attr_Act_ID == this.Attr_Act_ID);
            CIMClassSM_AH linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_AH)candidates.First();
            }
            return linked;

        }
         public CIMClassSM_MEALY LinkedOneSideR512()
         {
            var candidates = repository.GetCIInstances(domainName, "SM_MEALY").Where(i => ((CIMClassSM_MEALY)i).Attr_SM_ID == this.Attr_SM_ID);
            CIMClassSM_MEALY linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_MEALY)candidates.First();
            }
            return linked;

        }

        public CIMClassSM_TXN LinkedOtherSideR512()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_TXN").Where(i => ((CIMClassSM_TXN)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_TXN)i).Attr_Trans_ID == this.Attr_Trans_ID);
            CIMClassSM_TXN linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_TXN)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassSM_MEALYBase : CIMOOAofOOAClass, CIMClassSM_MEALY
    {
        public string Attr_SM_ID { get; set; }

        public CIMClassSM_MEALYBase(CIModelRepository repository, string SM_ID ) : base(repository, "SM_MEALY")
        {
            Attr_SM_ID = SM_ID;
        }

        public CIMClassSM_MEALYBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["SM_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSM_SM CIMSuperClassSM_SM()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_SM").Where(i => ((CIMClassSM_SM)i).Attr_SM_ID == this.Attr_SM_ID);
            CIMClassSM_SM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_SM)candidates.First();
            }
            return linked;

        }
        public IEnumerable<CIMClassSM_MEAH> LinkedOtherSideR512()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_MEAH").Where(i => ((CIMClassSM_MEAH)i).Attr_SM_ID == this.Attr_SM_ID);
            var linked = new List<CIMClassSM_MEAH>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassSM_MEAH)c);
            }
            return linked;

        }

    }
    public class CIMClassSM_MOAHBase : CIMOOAofOOAClass, CIMClassSM_MOAH
    {
        public string Attr_Act_ID { get; set; }
        public string Attr_SM_ID { get; set; }
        public string Attr_SMstt_ID { get; set; }

        public CIMClassSM_MOAHBase(CIModelRepository repository, string Act_ID, string SM_ID, string SMstt_ID ) : base(repository, "SM_MOAH")
        {
            Attr_Act_ID = Act_ID;
            Attr_SM_ID = SM_ID;
            Attr_SMstt_ID = SMstt_ID;
        }

        public CIMClassSM_MOAHBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Act_ID"], (string)attrArgs["SM_ID"], (string)attrArgs["SMstt_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSM_AH CIMSuperClassSM_AH()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_AH").Where(i => ((CIMClassSM_AH)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_AH)i).Attr_Act_ID == this.Attr_Act_ID);
            CIMClassSM_AH linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_AH)candidates.First();
            }
            return linked;

        }
         public CIMClassSM_MOORE LinkedOneSideR511()
         {
            var candidates = repository.GetCIInstances(domainName, "SM_MOORE").Where(i => ((CIMClassSM_MOORE)i).Attr_SM_ID == this.Attr_SM_ID);
            CIMClassSM_MOORE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_MOORE)candidates.First();
            }
            return linked;

        }

        public CIMClassSM_STATE LinkedOtherSideR511()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_STATE").Where(i => ((CIMClassSM_STATE)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_STATE)i).Attr_SMstt_ID == this.Attr_SMstt_ID);
            CIMClassSM_STATE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_STATE)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassSM_MOOREBase : CIMOOAofOOAClass, CIMClassSM_MOORE
    {
        public string Attr_SM_ID { get; set; }

        public CIMClassSM_MOOREBase(CIModelRepository repository, string SM_ID ) : base(repository, "SM_MOORE")
        {
            Attr_SM_ID = SM_ID;
        }

        public CIMClassSM_MOOREBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["SM_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSM_SM CIMSuperClassSM_SM()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_SM").Where(i => ((CIMClassSM_SM)i).Attr_SM_ID == this.Attr_SM_ID);
            CIMClassSM_SM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_SM)candidates.First();
            }
            return linked;

        }
        public IEnumerable<CIMClassSM_MOAH> LinkedOtherSideR511()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_MOAH").Where(i => ((CIMClassSM_MOAH)i).Attr_SM_ID == this.Attr_SM_ID);
            var linked = new List<CIMClassSM_MOAH>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassSM_MOAH)c);
            }
            return linked;

        }

    }
    public class CIMClassSM_NETXNBase : CIMOOAofOOAClass, CIMClassSM_NETXN
    {
        public string Attr_Trans_ID { get; set; }
        public string Attr_SM_ID { get; set; }
        public string Attr_SMstt_ID { get; set; }
        public string Attr_SMspd_IDdeprecated { get; set; }

        public CIMClassSM_NETXNBase(CIModelRepository repository, string Trans_ID, string SM_ID, string SMstt_ID, string SMspd_IDdeprecated ) : base(repository, "SM_NETXN")
        {
            Attr_Trans_ID = Trans_ID;
            Attr_SM_ID = SM_ID;
            Attr_SMstt_ID = SMstt_ID;
            Attr_SMspd_IDdeprecated = SMspd_IDdeprecated;
        }

        public CIMClassSM_NETXNBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Trans_ID"], (string)attrArgs["SM_ID"], (string)attrArgs["SMstt_ID"], (string)attrArgs["SMspd_IDdeprecated"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSM_STATE LinkedToR508()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_STATE").Where(i => ((CIMClassSM_STATE)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_STATE)i).Attr_SMstt_ID == this.Attr_SMstt_ID);
            CIMClassSM_STATE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_STATE)candidates.First();
            }
            return linked;

        }

        public CIMClassSM_TXN CIMSuperClassSM_TXN()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_TXN").Where(i => ((CIMClassSM_TXN)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_TXN)i).Attr_Trans_ID == this.Attr_Trans_ID);
            CIMClassSM_TXN linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_TXN)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassSM_NLEVTBase : CIMOOAofOOAClass, CIMClassSM_NLEVT
    {
        public string Attr_SMevt_ID { get; set; }
        public string Attr_SM_ID { get; set; }
        public string Attr_SMspd_IDdeprecated { get; set; }
        public string Attr_polySMevt_ID { get; set; }
        public string Attr_polySM_ID { get; set; }
        public string Attr_polySMspd_IDdeprecated { get; set; }
        public string Attr_Local_Meaning { get; set; }

        public CIMClassSM_NLEVTBase(CIModelRepository repository, string SMevt_ID, string SM_ID, string SMspd_IDdeprecated, string polySMevt_ID, string polySM_ID, string polySMspd_IDdeprecated, string Local_Meaning ) : base(repository, "SM_NLEVT")
        {
            Attr_SMevt_ID = SMevt_ID;
            Attr_SM_ID = SM_ID;
            Attr_SMspd_IDdeprecated = SMspd_IDdeprecated;
            Attr_polySMevt_ID = polySMevt_ID;
            Attr_polySM_ID = polySM_ID;
            Attr_polySMspd_IDdeprecated = polySMspd_IDdeprecated;
            Attr_Local_Meaning = Local_Meaning;
        }

        public CIMClassSM_NLEVTBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["SMevt_ID"], (string)attrArgs["SM_ID"], (string)attrArgs["SMspd_IDdeprecated"], (string)attrArgs["polySMevt_ID"], (string)attrArgs["polySM_ID"], (string)attrArgs["polySMspd_IDdeprecated"], (string)attrArgs["Local_Meaning"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSM_PEVT LinkedToR527()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_PEVT").Where(i => ((CIMClassSM_PEVT)i).Attr_SM_ID == this.Attr_polySM_ID && ((CIMClassSM_PEVT)i).Attr_SMevt_ID == this.Attr_polySMevt_ID);
            CIMClassSM_PEVT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_PEVT)candidates.First();
            }
            return linked;

        }

        public CIMClassSM_SEVT CIMSuperClassSM_SEVT()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_SEVT").Where(i => ((CIMClassSM_SEVT)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_SEVT)i).Attr_SMevt_ID == this.Attr_SMevt_ID);
            CIMClassSM_SEVT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_SEVT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassSM_NSTXNBase : CIMOOAofOOAClass, CIMClassSM_NSTXN
    {
        public string Attr_Trans_ID { get; set; }
        public string Attr_SM_ID { get; set; }
        public string Attr_SMstt_ID { get; set; }
        public string Attr_SMevt_ID { get; set; }
        public string Attr_SMspd_IDdeprecated { get; set; }

        public CIMClassSM_NSTXNBase(CIModelRepository repository, string Trans_ID, string SM_ID, string SMstt_ID, string SMevt_ID, string SMspd_IDdeprecated ) : base(repository, "SM_NSTXN")
        {
            Attr_Trans_ID = Trans_ID;
            Attr_SM_ID = SM_ID;
            Attr_SMstt_ID = SMstt_ID;
            Attr_SMevt_ID = SMevt_ID;
            Attr_SMspd_IDdeprecated = SMspd_IDdeprecated;
        }

        public CIMClassSM_NSTXNBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Trans_ID"], (string)attrArgs["SM_ID"], (string)attrArgs["SMstt_ID"], (string)attrArgs["SMevt_ID"], (string)attrArgs["SMspd_IDdeprecated"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSM_SEME CIMSuperClassSM_SEME()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_SEME").Where(i => ((CIMClassSM_SEME)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_SEME)i).Attr_SMevt_ID == this.Attr_SMevt_ID && ((CIMClassSM_SEME)i).Attr_SMstt_ID == this.Attr_SMstt_ID);
            CIMClassSM_SEME linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_SEME)candidates.First();
            }
            return linked;

        }
        public CIMClassSM_TXN CIMSuperClassSM_TXN()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_TXN").Where(i => ((CIMClassSM_TXN)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_TXN)i).Attr_Trans_ID == this.Attr_Trans_ID);
            CIMClassSM_TXN linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_TXN)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassSM_PEVTBase : CIMOOAofOOAClass, CIMClassSM_PEVT
    {
        public string Attr_SMevt_ID { get; set; }
        public string Attr_SM_ID { get; set; }
        public string Attr_SMspd_IDdeprecated { get; set; }
        public string Attr_localClassName { get; set; }
        public string Attr_localClassKL { get; set; }
        public string Attr_localEventMning { get; set; }

        public CIMClassSM_PEVTBase(CIModelRepository repository, string SMevt_ID, string SM_ID, string SMspd_IDdeprecated, string localClassName, string localClassKL, string localEventMning ) : base(repository, "SM_PEVT")
        {
            Attr_SMevt_ID = SMevt_ID;
            Attr_SM_ID = SM_ID;
            Attr_SMspd_IDdeprecated = SMspd_IDdeprecated;
            Attr_localClassName = localClassName;
            Attr_localClassKL = localClassKL;
            Attr_localEventMning = localEventMning;
        }

        public CIMClassSM_PEVTBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["SMevt_ID"], (string)attrArgs["SM_ID"], (string)attrArgs["SMspd_IDdeprecated"], (string)attrArgs["localClassName"], (string)attrArgs["localClassKL"], (string)attrArgs["localEventMning"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public IEnumerable<CIMClassSM_NLEVT> LinkedFromR527()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_NLEVT").Where(i => ((CIMClassSM_NLEVT)i).Attr_polySM_ID == this.Attr_SM_ID && ((CIMClassSM_NLEVT)i).Attr_polySMevt_ID == this.Attr_SMevt_ID);
            var linked = new List<CIMClassSM_NLEVT>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassSM_NLEVT)c);
            }
            return linked;

        }

        public CIMClassSM_EVT CIMSuperClassSM_EVT()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_EVT").Where(i => ((CIMClassSM_EVT)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_EVT)i).Attr_SMevt_ID == this.Attr_SMevt_ID);
            CIMClassSM_EVT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_EVT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassSM_SEMEBase : CIMOOAofOOAClass, CIMClassSM_SEME
    {
        public string Attr_SMstt_ID { get; set; }
        public string Attr_SMevt_ID { get; set; }
        public string Attr_SM_ID { get; set; }
        public string Attr_SMspd_IDdeprecated { get; set; }

        public CIMClassSM_SEMEBase(CIModelRepository repository, string SMstt_ID, string SMevt_ID, string SM_ID, string SMspd_IDdeprecated ) : base(repository, "SM_SEME")
        {
            Attr_SMstt_ID = SMstt_ID;
            Attr_SMevt_ID = SMevt_ID;
            Attr_SM_ID = SM_ID;
            Attr_SMspd_IDdeprecated = SMspd_IDdeprecated;
        }

        public CIMClassSM_SEMEBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["SMstt_ID"], (string)attrArgs["SMevt_ID"], (string)attrArgs["SM_ID"], (string)attrArgs["SMspd_IDdeprecated"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMSubClassR504 SubClassR504()
        {
            var subClassNames = new List<string>() { "SM_EIGN", "SM_CH", "SM_NSTXN" };
            CIMSubClassR504 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR504)i).CIMSuperClassSM_SEME() != null && (((CIMSubClassR504)i).CIMSuperClassSM_SEME().Attr_SM_ID == this.Attr_SM_ID && ((CIMSubClassR504)i).CIMSuperClassSM_SEME().Attr_SMevt_ID == this.Attr_SMevt_ID && ((CIMSubClassR504)i).CIMSuperClassSM_SEME().Attr_SMstt_ID == this.Attr_SMstt_ID));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR504)candidates.First();
                    break;
                }
            }
            return subClass;

        }

         public CIMClassSM_STATE LinkedOneSideR503()
         {
            var candidates = repository.GetCIInstances(domainName, "SM_STATE").Where(i => ((CIMClassSM_STATE)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_STATE)i).Attr_SMstt_ID == this.Attr_SMstt_ID);
            CIMClassSM_STATE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_STATE)candidates.First();
            }
            return linked;

        }

        public CIMClassSM_SEVT LinkedOtherSideR503()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_SEVT").Where(i => ((CIMClassSM_SEVT)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_SEVT)i).Attr_SMevt_ID == this.Attr_SMevt_ID);
            CIMClassSM_SEVT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_SEVT)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassSM_SEVTBase : CIMOOAofOOAClass, CIMClassSM_SEVT
    {
        public string Attr_SMevt_ID { get; set; }
        public string Attr_SM_ID { get; set; }
        public string Attr_SMspd_IDdeprecated { get; set; }

        public CIMClassSM_SEVTBase(CIModelRepository repository, string SMevt_ID, string SM_ID, string SMspd_IDdeprecated ) : base(repository, "SM_SEVT")
        {
            Attr_SMevt_ID = SMevt_ID;
            Attr_SM_ID = SM_ID;
            Attr_SMspd_IDdeprecated = SMspd_IDdeprecated;
        }

        public CIMClassSM_SEVTBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["SMevt_ID"], (string)attrArgs["SM_ID"], (string)attrArgs["SMspd_IDdeprecated"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMSubClassR526 SubClassR526()
        {
            var subClassNames = new List<string>() { "SM_NLEVT", "SM_LEVT", "SM_SGEVT" };
            CIMSubClassR526 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR526)i).CIMSuperClassSM_SEVT() != null && (((CIMSubClassR526)i).CIMSuperClassSM_SEVT().Attr_SM_ID == this.Attr_SM_ID && ((CIMSubClassR526)i).CIMSuperClassSM_SEVT().Attr_SMevt_ID == this.Attr_SMevt_ID));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR526)candidates.First();
                    break;
                }
            }
            return subClass;

        }

        public CIMClassSM_EVT CIMSuperClassSM_EVT()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_EVT").Where(i => ((CIMClassSM_EVT)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_EVT)i).Attr_SMevt_ID == this.Attr_SMevt_ID);
            CIMClassSM_EVT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_EVT)candidates.First();
            }
            return linked;

        }
        public IEnumerable<CIMClassSM_SEME> LinkedOneSideR503()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_SEME").Where(i => ((CIMClassSM_SEME)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_SEME)i).Attr_SMevt_ID == this.Attr_SMevt_ID);
            var linked = new List<CIMClassSM_SEME>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassSM_SEME)c);
            }
            return linked;

        }
    }
    public class CIMClassSM_SGEVTBase : CIMOOAofOOAClass, CIMClassSM_SGEVT
    {
        public string Attr_SMevt_ID { get; set; }
        public string Attr_SM_ID { get; set; }
        public string Attr_SMspd_IDdeprecated { get; set; }
        public string Attr_Provided_Signal_Id { get; set; }
        public string Attr_Required_Signal_Id { get; set; }
        public string Attr_signal_name { get; set; }

        public CIMClassSM_SGEVTBase(CIModelRepository repository, string SMevt_ID, string SM_ID, string SMspd_IDdeprecated, string Provided_Signal_Id, string Required_Signal_Id, string signal_name ) : base(repository, "SM_SGEVT")
        {
            Attr_SMevt_ID = SMevt_ID;
            Attr_SM_ID = SM_ID;
            Attr_SMspd_IDdeprecated = SMspd_IDdeprecated;
            Attr_Provided_Signal_Id = Provided_Signal_Id;
            Attr_Required_Signal_Id = Required_Signal_Id;
            Attr_signal_name = signal_name;
        }

        public CIMClassSM_SGEVTBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["SMevt_ID"], (string)attrArgs["SM_ID"], (string)attrArgs["SMspd_IDdeprecated"], (string)attrArgs["Provided_Signal_Id"], (string)attrArgs["Required_Signal_Id"], (string)attrArgs["signal_name"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSPR_PS LinkedToR528()
        {
            var candidates = repository.GetCIInstances(domainName, "SPR_PS").Where(i => ((CIMClassSPR_PS)i).Attr_Id == this.Attr_Provided_Signal_Id);
            CIMClassSPR_PS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSPR_PS)candidates.First();
            }
            return linked;

        }

        public CIMClassSPR_RS LinkedToR529()
        {
            var candidates = repository.GetCIInstances(domainName, "SPR_RS").Where(i => ((CIMClassSPR_RS)i).Attr_Id == this.Attr_Required_Signal_Id);
            CIMClassSPR_RS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSPR_RS)candidates.First();
            }
            return linked;

        }

        public CIMClassSM_SEVT CIMSuperClassSM_SEVT()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_SEVT").Where(i => ((CIMClassSM_SEVT)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_SEVT)i).Attr_SMevt_ID == this.Attr_SMevt_ID);
            CIMClassSM_SEVT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_SEVT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassSM_SMBase : CIMOOAofOOAClass, CIMClassSM_SM
    {
        public string Attr_SM_ID { get; set; }
        public string Attr_Descrip { get; set; }
        public int Attr_Config_ID { get; set; }

        public CIMClassSM_SMBase(CIModelRepository repository, string SM_ID, string Descrip, int Config_ID ) : base(repository, "SM_SM")
        {
            Attr_SM_ID = SM_ID;
            Attr_Descrip = Descrip;
            Attr_Config_ID = Config_ID;
        }

        public CIMClassSM_SMBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["SM_ID"], (string)attrArgs["Descrip"], (int)attrArgs["Config_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_SM LinkedFromR2043()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SM").Where(i => ((CIMClassTE_SM)i).Attr_SM_ID == this.Attr_SM_ID);
            CIMClassTE_SM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SM)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassSM_STATE> LinkedFromR501()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_STATE").Where(i => ((CIMClassSM_STATE)i).Attr_SM_ID == this.Attr_SM_ID);
            var linked = new List<CIMClassSM_STATE>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassSM_STATE)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassSM_EVT> LinkedFromR502()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_EVT").Where(i => ((CIMClassSM_EVT)i).Attr_SM_ID == this.Attr_SM_ID);
            var linked = new List<CIMClassSM_EVT>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassSM_EVT)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassSM_TXN> LinkedFromR505()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_TXN").Where(i => ((CIMClassSM_TXN)i).Attr_SM_ID == this.Attr_SM_ID);
            var linked = new List<CIMClassSM_TXN>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassSM_TXN)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassSM_ACT> LinkedFromR515()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_ACT").Where(i => ((CIMClassSM_ACT)i).Attr_SM_ID == this.Attr_SM_ID);
            var linked = new List<CIMClassSM_ACT>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassSM_ACT)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassSM_EVTDI> LinkedFromR516()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_EVTDI").Where(i => ((CIMClassSM_EVTDI)i).Attr_SM_ID == this.Attr_SM_ID);
            var linked = new List<CIMClassSM_EVTDI>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassSM_EVTDI)c);
            }
            return linked;

        }

        public CIMSubClassR510 SubClassR510()
        {
            var subClassNames = new List<string>() { "SM_MEALY", "SM_MOORE" };
            CIMSubClassR510 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR510)i).CIMSuperClassSM_SM() != null && (((CIMSubClassR510)i).CIMSuperClassSM_SM().Attr_SM_ID == this.Attr_SM_ID));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR510)candidates.First();
                    break;
                }
            }
            return subClass;

        }

        public CIMSubClassR517 SubClassR517()
        {
            var subClassNames = new List<string>() { "SM_ISM", "SM_ASM" };
            CIMSubClassR517 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR517)i).CIMSuperClassSM_SM() != null && (((CIMSubClassR517)i).CIMSuperClassSM_SM().Attr_SM_ID == this.Attr_SM_ID));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR517)candidates.First();
                    break;
                }
            }
            return subClass;

        }

    }
    public class CIMClassSM_STATEBase : CIMOOAofOOAClass, CIMClassSM_STATE
    {
        public string Attr_SMstt_ID { get; set; }
        public string Attr_SM_ID { get; set; }
        public string Attr_SMspd_IDdeprecated { get; set; }
        public string Attr_Name { get; set; }
        public int Attr_Numb { get; set; }
        public int Attr_Final { get; set; }

        public CIMClassSM_STATEBase(CIModelRepository repository, string SMstt_ID, string SM_ID, string SMspd_IDdeprecated, string Name, int Numb, int Final ) : base(repository, "SM_STATE")
        {
            Attr_SMstt_ID = SMstt_ID;
            Attr_SM_ID = SM_ID;
            Attr_SMspd_IDdeprecated = SMspd_IDdeprecated;
            Attr_Name = Name;
            Attr_Numb = Numb;
            Attr_Final = Final;
        }

        public CIMClassSM_STATEBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["SMstt_ID"], (string)attrArgs["SM_ID"], (string)attrArgs["SMspd_IDdeprecated"], (string)attrArgs["Name"], (int)attrArgs["Numb"], (int)attrArgs["Final"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSM_SM LinkedToR501()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_SM").Where(i => ((CIMClassSM_SM)i).Attr_SM_ID == this.Attr_SM_ID);
            CIMClassSM_SM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_SM)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_STATE LinkedFromR2037()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_STATE").Where(i => ((CIMClassTE_STATE)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassTE_STATE)i).Attr_SMstt_ID == this.Attr_SMstt_ID);
            CIMClassTE_STATE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_STATE)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassI_INS> LinkedFromR2915()
        {
            var candidates = repository.GetCIInstances(domainName, "I_INS").Where(i => ((CIMClassI_INS)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassI_INS)i).Attr_SMstt_ID == this.Attr_SMstt_ID);
            var linked = new List<CIMClassI_INS>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_INS)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassSM_TXN> LinkedFromR506()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_TXN").Where(i => ((CIMClassSM_TXN)i).Attr_SMstt_ID == this.Attr_SMstt_ID && ((CIMClassSM_TXN)i).Attr_SM_ID == this.Attr_SM_ID);
            var linked = new List<CIMClassSM_TXN>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassSM_TXN)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassSM_NETXN> LinkedFromR508()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_NETXN").Where(i => ((CIMClassSM_NETXN)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_NETXN)i).Attr_SMstt_ID == this.Attr_SMstt_ID);
            var linked = new List<CIMClassSM_NETXN>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassSM_NETXN)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassSM_SEME> LinkedOtherSideR503()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_SEME").Where(i => ((CIMClassSM_SEME)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_SEME)i).Attr_SMstt_ID == this.Attr_SMstt_ID);
            var linked = new List<CIMClassSM_SEME>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassSM_SEME)c);
            }
            return linked;

        }

        public CIMClassSM_MOAH LinkedOneSideR511()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_MOAH").Where(i => ((CIMClassSM_MOAH)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_MOAH)i).Attr_SMstt_ID == this.Attr_SMstt_ID);
            CIMClassSM_MOAH linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_MOAH)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassSM_TAHBase : CIMOOAofOOAClass, CIMClassSM_TAH
    {
        public string Attr_Act_ID { get; set; }
        public string Attr_SM_ID { get; set; }
        public string Attr_Trans_ID { get; set; }

        public CIMClassSM_TAHBase(CIModelRepository repository, string Act_ID, string SM_ID, string Trans_ID ) : base(repository, "SM_TAH")
        {
            Attr_Act_ID = Act_ID;
            Attr_SM_ID = SM_ID;
            Attr_Trans_ID = Trans_ID;
        }

        public CIMClassSM_TAHBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Act_ID"], (string)attrArgs["SM_ID"], (string)attrArgs["Trans_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSM_TXN LinkedToR530()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_TXN").Where(i => ((CIMClassSM_TXN)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_TXN)i).Attr_Trans_ID == this.Attr_Trans_ID);
            CIMClassSM_TXN linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_TXN)candidates.First();
            }
            return linked;

        }

        public CIMClassSM_AH CIMSuperClassSM_AH()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_AH").Where(i => ((CIMClassSM_AH)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_AH)i).Attr_Act_ID == this.Attr_Act_ID);
            CIMClassSM_AH linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_AH)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassSM_TXNBase : CIMOOAofOOAClass, CIMClassSM_TXN
    {
        public string Attr_Trans_ID { get; set; }
        public string Attr_SM_ID { get; set; }
        public string Attr_SMstt_ID { get; set; }
        public string Attr_SMspd_IDdeprecated { get; set; }

        public CIMClassSM_TXNBase(CIModelRepository repository, string Trans_ID, string SM_ID, string SMstt_ID, string SMspd_IDdeprecated ) : base(repository, "SM_TXN")
        {
            Attr_Trans_ID = Trans_ID;
            Attr_SM_ID = SM_ID;
            Attr_SMstt_ID = SMstt_ID;
            Attr_SMspd_IDdeprecated = SMspd_IDdeprecated;
        }

        public CIMClassSM_TXNBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Trans_ID"], (string)attrArgs["SM_ID"], (string)attrArgs["SMstt_ID"], (string)attrArgs["SMspd_IDdeprecated"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSM_SM LinkedToR505()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_SM").Where(i => ((CIMClassSM_SM)i).Attr_SM_ID == this.Attr_SM_ID);
            CIMClassSM_SM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_SM)candidates.First();
            }
            return linked;

        }

        public CIMClassSM_STATE LinkedToR506()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_STATE").Where(i => ((CIMClassSM_STATE)i).Attr_SMstt_ID == this.Attr_SMstt_ID && ((CIMClassSM_STATE)i).Attr_SM_ID == this.Attr_SM_ID);
            CIMClassSM_STATE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_STATE)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassI_INS> LinkedFromR2953()
        {
            var candidates = repository.GetCIInstances(domainName, "I_INS").Where(i => ((CIMClassI_INS)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassI_INS)i).Attr_Trans_ID == this.Attr_Trans_ID);
            var linked = new List<CIMClassI_INS>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_INS)c);
            }
            return linked;

        }

        public CIMClassSM_TAH LinkedFromR530()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_TAH").Where(i => ((CIMClassSM_TAH)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_TAH)i).Attr_Trans_ID == this.Attr_Trans_ID);
            CIMClassSM_TAH linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_TAH)candidates.First();
            }
            return linked;

        }

        public CIMSubClassR507 SubClassR507()
        {
            var subClassNames = new List<string>() { "SM_NETXN", "SM_CRTXN", "SM_NSTXN" };
            CIMSubClassR507 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR507)i).CIMSuperClassSM_TXN() != null && (((CIMSubClassR507)i).CIMSuperClassSM_TXN().Attr_SM_ID == this.Attr_SM_ID && ((CIMSubClassR507)i).CIMSuperClassSM_TXN().Attr_Trans_ID == this.Attr_Trans_ID));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR507)candidates.First();
                    break;
                }
            }
            return subClass;

        }

        public CIMClassSM_MEAH LinkedOneSideR512()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_MEAH").Where(i => ((CIMClassSM_MEAH)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_MEAH)i).Attr_Trans_ID == this.Attr_Trans_ID);
            CIMClassSM_MEAH linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_MEAH)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassSPR_PEPBase : CIMOOAofOOAClass, CIMClassSPR_PEP
    {
        public string Attr_Id { get; set; }
        public string Attr_ExecutableProperty_Id { get; set; }
        public string Attr_Provision_Id { get; set; }

        public CIMClassSPR_PEPBase(CIModelRepository repository, string Id, string ExecutableProperty_Id, string Provision_Id ) : base(repository, "SPR_PEP")
        {
            Attr_Id = Id;
            Attr_ExecutableProperty_Id = ExecutableProperty_Id;
            Attr_Provision_Id = Provision_Id;
        }

        public CIMClassSPR_PEPBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Id"], (string)attrArgs["ExecutableProperty_Id"], (string)attrArgs["Provision_Id"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public IEnumerable<CIMClassV_MSV> LinkedFromR841()
        {
            var candidates = repository.GetCIInstances(domainName, "V_MSV").Where(i => ((CIMClassV_MSV)i).Attr_PEP_Id == this.Attr_Id);
            var linked = new List<CIMClassV_MSV>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_MSV)c);
            }
            return linked;

        }

        public CIMSubClassR4503 SubClassR4503()
        {
            var subClassNames = new List<string>() { "SPR_PO", "SPR_PS" };
            CIMSubClassR4503 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR4503)i).CIMSuperClassSPR_PEP() != null && (((CIMSubClassR4503)i).CIMSuperClassSPR_PEP().Attr_Id == this.Attr_Id));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR4503)candidates.First();
                    break;
                }
            }
            return subClass;

        }

         public CIMClassC_EP LinkedOneSideR4501()
         {
            var candidates = repository.GetCIInstances(domainName, "C_EP").Where(i => ((CIMClassC_EP)i).Attr_Id == this.Attr_ExecutableProperty_Id);
            CIMClassC_EP linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_EP)candidates.First();
            }
            return linked;

        }

        public CIMClassC_P LinkedOtherSideR4501()
        {
            var candidates = repository.GetCIInstances(domainName, "C_P").Where(i => ((CIMClassC_P)i).Attr_Provision_Id == this.Attr_Provision_Id);
            CIMClassC_P linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_P)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassSPR_POBase : CIMOOAofOOAClass, CIMClassSPR_PO
    {
        public string Attr_Id { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }
        public string Attr_Action_Semantics { get; set; }
        public int Attr_Suc_Pars { get; set; }
        public int Attr_Dialect { get; set; }

        public CIMClassSPR_POBase(CIModelRepository repository, string Id, string Name, string Descrip, string Action_Semantics, int Suc_Pars, int Dialect ) : base(repository, "SPR_PO")
        {
            Attr_Id = Id;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
            Attr_Action_Semantics = Action_Semantics;
            Attr_Suc_Pars = Suc_Pars;
            Attr_Dialect = Dialect;
        }

        public CIMClassSPR_POBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Id"], (string)attrArgs["Name"], (string)attrArgs["Descrip"], (string)attrArgs["Action_Semantics"], (int)attrArgs["Suc_Pars"], (int)attrArgs["Dialect"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_MACT LinkedFromR2050()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_MACT").Where(i => ((CIMClassTE_MACT)i).Attr_SPR_POId == this.Attr_Id);
            CIMClassTE_MACT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_MACT)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_IOP> LinkedFromR680()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_IOP").Where(i => ((CIMClassACT_IOP)i).Attr_ProvidedOp_Id == this.Attr_Id);
            var linked = new List<CIMClassACT_IOP>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_IOP)c);
            }
            return linked;

        }

        public CIMClassACT_POB LinkedFromR687()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_POB").Where(i => ((CIMClassACT_POB)i).Attr_Id == this.Attr_Id);
            CIMClassACT_POB linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_POB)candidates.First();
            }
            return linked;

        }

        public CIMClassSPR_PEP CIMSuperClassSPR_PEP()
        {
            var candidates = repository.GetCIInstances(domainName, "SPR_PEP").Where(i => ((CIMClassSPR_PEP)i).Attr_Id == this.Attr_Id);
            CIMClassSPR_PEP linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSPR_PEP)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassSPR_PSBase : CIMOOAofOOAClass, CIMClassSPR_PS
    {
        public string Attr_Id { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }
        public string Attr_Action_Semantics { get; set; }
        public int Attr_Suc_Pars { get; set; }
        public int Attr_Dialect { get; set; }

        public CIMClassSPR_PSBase(CIModelRepository repository, string Id, string Name, string Descrip, string Action_Semantics, int Suc_Pars, int Dialect ) : base(repository, "SPR_PS")
        {
            Attr_Id = Id;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
            Attr_Action_Semantics = Action_Semantics;
            Attr_Suc_Pars = Suc_Pars;
            Attr_Dialect = Dialect;
        }

        public CIMClassSPR_PSBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Id"], (string)attrArgs["Name"], (string)attrArgs["Descrip"], (string)attrArgs["Action_Semantics"], (int)attrArgs["Suc_Pars"], (int)attrArgs["Dialect"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_MACT LinkedFromR2051()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_MACT").Where(i => ((CIMClassTE_MACT)i).Attr_SPR_PSId == this.Attr_Id);
            CIMClassTE_MACT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_MACT)candidates.First();
            }
            return linked;

        }

        public CIMClassSM_SGEVT LinkedFromR528()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_SGEVT").Where(i => ((CIMClassSM_SGEVT)i).Attr_Provided_Signal_Id == this.Attr_Id);
            CIMClassSM_SGEVT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_SGEVT)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_SGN> LinkedFromR663()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SGN").Where(i => ((CIMClassACT_SGN)i).Attr_ProvidedSig_Id == this.Attr_Id);
            var linked = new List<CIMClassACT_SGN>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_SGN)c);
            }
            return linked;

        }

        public CIMClassACT_PSB LinkedFromR686()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_PSB").Where(i => ((CIMClassACT_PSB)i).Attr_Id == this.Attr_Id);
            CIMClassACT_PSB linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_PSB)candidates.First();
            }
            return linked;

        }

        public CIMClassSPR_PEP CIMSuperClassSPR_PEP()
        {
            var candidates = repository.GetCIInstances(domainName, "SPR_PEP").Where(i => ((CIMClassSPR_PEP)i).Attr_Id == this.Attr_Id);
            CIMClassSPR_PEP linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSPR_PEP)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassSPR_REPBase : CIMOOAofOOAClass, CIMClassSPR_REP
    {
        public string Attr_Id { get; set; }
        public string Attr_ExecutableProperty_Id { get; set; }
        public string Attr_Requirement_Id { get; set; }

        public CIMClassSPR_REPBase(CIModelRepository repository, string Id, string ExecutableProperty_Id, string Requirement_Id ) : base(repository, "SPR_REP")
        {
            Attr_Id = Id;
            Attr_ExecutableProperty_Id = ExecutableProperty_Id;
            Attr_Requirement_Id = Requirement_Id;
        }

        public CIMClassSPR_REPBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Id"], (string)attrArgs["ExecutableProperty_Id"], (string)attrArgs["Requirement_Id"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public IEnumerable<CIMClassV_MSV> LinkedFromR845()
        {
            var candidates = repository.GetCIInstances(domainName, "V_MSV").Where(i => ((CIMClassV_MSV)i).Attr_REP_Id == this.Attr_Id);
            var linked = new List<CIMClassV_MSV>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_MSV)c);
            }
            return linked;

        }

        public CIMSubClassR4502 SubClassR4502()
        {
            var subClassNames = new List<string>() { "SPR_RS", "SPR_RO" };
            CIMSubClassR4502 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR4502)i).CIMSuperClassSPR_REP() != null && (((CIMSubClassR4502)i).CIMSuperClassSPR_REP().Attr_Id == this.Attr_Id));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR4502)candidates.First();
                    break;
                }
            }
            return subClass;

        }

         public CIMClassC_EP LinkedOneSideR4500()
         {
            var candidates = repository.GetCIInstances(domainName, "C_EP").Where(i => ((CIMClassC_EP)i).Attr_Id == this.Attr_ExecutableProperty_Id);
            CIMClassC_EP linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_EP)candidates.First();
            }
            return linked;

        }

        public CIMClassC_R LinkedOtherSideR4500()
        {
            var candidates = repository.GetCIInstances(domainName, "C_R").Where(i => ((CIMClassC_R)i).Attr_Requirement_Id == this.Attr_Requirement_Id);
            CIMClassC_R linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_R)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassSPR_ROBase : CIMOOAofOOAClass, CIMClassSPR_RO
    {
        public string Attr_Id { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }
        public string Attr_Action_Semantics { get; set; }
        public int Attr_Suc_Pars { get; set; }
        public int Attr_Dialect { get; set; }
        public int Attr_Numb { get; set; }

        public CIMClassSPR_ROBase(CIModelRepository repository, string Id, string Name, string Descrip, string Action_Semantics, int Suc_Pars, int Dialect, int Numb ) : base(repository, "SPR_RO")
        {
            Attr_Id = Id;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
            Attr_Action_Semantics = Action_Semantics;
            Attr_Suc_Pars = Suc_Pars;
            Attr_Dialect = Dialect;
            Attr_Numb = Numb;
        }

        public CIMClassSPR_ROBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Id"], (string)attrArgs["Name"], (string)attrArgs["Descrip"], (string)attrArgs["Action_Semantics"], (int)attrArgs["Suc_Pars"], (int)attrArgs["Dialect"], (int)attrArgs["Numb"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_MACT LinkedFromR2052()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_MACT").Where(i => ((CIMClassTE_MACT)i).Attr_SPR_ROId == this.Attr_Id);
            CIMClassTE_MACT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_MACT)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_IOP> LinkedFromR657()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_IOP").Where(i => ((CIMClassACT_IOP)i).Attr_RequiredOp_Id == this.Attr_Id);
            var linked = new List<CIMClassACT_IOP>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_IOP)c);
            }
            return linked;

        }

        public CIMClassACT_ROB LinkedFromR685()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_ROB").Where(i => ((CIMClassACT_ROB)i).Attr_Id == this.Attr_Id);
            CIMClassACT_ROB linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_ROB)candidates.First();
            }
            return linked;

        }

        public CIMClassSPR_REP CIMSuperClassSPR_REP()
        {
            var candidates = repository.GetCIInstances(domainName, "SPR_REP").Where(i => ((CIMClassSPR_REP)i).Attr_Id == this.Attr_Id);
            CIMClassSPR_REP linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSPR_REP)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassSPR_RSBase : CIMOOAofOOAClass, CIMClassSPR_RS
    {
        public string Attr_Id { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }
        public string Attr_Action_Semantics { get; set; }
        public int Attr_Suc_Pars { get; set; }
        public int Attr_Dialect { get; set; }

        public CIMClassSPR_RSBase(CIModelRepository repository, string Id, string Name, string Descrip, string Action_Semantics, int Suc_Pars, int Dialect ) : base(repository, "SPR_RS")
        {
            Attr_Id = Id;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
            Attr_Action_Semantics = Action_Semantics;
            Attr_Suc_Pars = Suc_Pars;
            Attr_Dialect = Dialect;
        }

        public CIMClassSPR_RSBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Id"], (string)attrArgs["Name"], (string)attrArgs["Descrip"], (string)attrArgs["Action_Semantics"], (int)attrArgs["Suc_Pars"], (int)attrArgs["Dialect"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_MACT LinkedFromR2053()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_MACT").Where(i => ((CIMClassTE_MACT)i).Attr_SPR_RSId == this.Attr_Id);
            CIMClassTE_MACT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_MACT)candidates.First();
            }
            return linked;

        }

        public CIMClassSM_SGEVT LinkedFromR529()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_SGEVT").Where(i => ((CIMClassSM_SGEVT)i).Attr_Required_Signal_Id == this.Attr_Id);
            CIMClassSM_SGEVT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_SGEVT)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_SGN> LinkedFromR660()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SGN").Where(i => ((CIMClassACT_SGN)i).Attr_RequiredSig_Id == this.Attr_Id);
            var linked = new List<CIMClassACT_SGN>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_SGN)c);
            }
            return linked;

        }

        public CIMClassACT_RSB LinkedFromR684()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_RSB").Where(i => ((CIMClassACT_RSB)i).Attr_Id == this.Attr_Id);
            CIMClassACT_RSB linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_RSB)candidates.First();
            }
            return linked;

        }

        public CIMClassSPR_REP CIMSuperClassSPR_REP()
        {
            var candidates = repository.GetCIInstances(domainName, "SPR_REP").Where(i => ((CIMClassSPR_REP)i).Attr_Id == this.Attr_Id);
            CIMClassSPR_REP linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSPR_REP)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassSQ_APBase : CIMOOAofOOAClass, CIMClassSQ_AP
    {
        public string Attr_Part_ID { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }
        public string Attr_LS_Part_ID { get; set; }

        public CIMClassSQ_APBase(CIModelRepository repository, string Part_ID, string Name, string Descrip, string LS_Part_ID ) : base(repository, "SQ_AP")
        {
            Attr_Part_ID = Part_ID;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
            Attr_LS_Part_ID = LS_Part_ID;
        }

        public CIMClassSQ_APBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Part_ID"], (string)attrArgs["Name"], (string)attrArgs["Descrip"], (string)attrArgs["LS_Part_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSQ_LS LinkedToR949()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_LS").Where(i => ((CIMClassSQ_LS)i).Attr_Part_ID == this.Attr_LS_Part_ID);
            CIMClassSQ_LS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSQ_LS)candidates.First();
            }
            return linked;

        }

        public CIMClassSQ_P CIMSuperClassSQ_P()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_P").Where(i => ((CIMClassSQ_P)i).Attr_Part_ID == this.Attr_Part_ID);
            CIMClassSQ_P linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSQ_P)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassSQ_AVBase : CIMOOAofOOAClass, CIMClassSQ_AV
    {
        public string Attr_Av_ID { get; set; }
        public string Attr_Obj_ID { get; set; }
        public string Attr_Attr_ID { get; set; }
        public string Attr_Label { get; set; }
        public string Attr_Value { get; set; }
        public string Attr_InformalName { get; set; }
        public string Attr_Informal_Part_ID { get; set; }
        public string Attr_Formal_Part_ID { get; set; }
        public string Attr_Descrip { get; set; }
        public bool Attr_isFormal { get; set; }

        public CIMClassSQ_AVBase(CIModelRepository repository, string Av_ID, string Obj_ID, string Attr_ID, string Label, string Value, string InformalName, string Informal_Part_ID, string Formal_Part_ID, string Descrip, bool isFormal ) : base(repository, "SQ_AV")
        {
            Attr_Av_ID = Av_ID;
            Attr_Obj_ID = Obj_ID;
            Attr_Attr_ID = Attr_ID;
            Attr_Label = Label;
            Attr_Value = Value;
            Attr_InformalName = InformalName;
            Attr_Informal_Part_ID = Informal_Part_ID;
            Attr_Formal_Part_ID = Formal_Part_ID;
            Attr_Descrip = Descrip;
            Attr_isFormal = isFormal;
        }

        public CIMClassSQ_AVBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Av_ID"], (string)attrArgs["Obj_ID"], (string)attrArgs["Attr_ID"], (string)attrArgs["Label"], (string)attrArgs["Value"], (string)attrArgs["InformalName"], (string)attrArgs["Informal_Part_ID"], (string)attrArgs["Formal_Part_ID"], (string)attrArgs["Descrip"], (bool)attrArgs["isFormal"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSQ_CIP LinkedToR936()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_CIP").Where(i => ((CIMClassSQ_CIP)i).Attr_Part_ID == this.Attr_Informal_Part_ID);
            CIMClassSQ_CIP linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSQ_CIP)candidates.First();
            }
            return linked;

        }

        public CIMClassSQ_CIP LinkedToR937()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_CIP").Where(i => ((CIMClassSQ_CIP)i).Attr_Part_ID == this.Attr_Formal_Part_ID);
            CIMClassSQ_CIP linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSQ_CIP)candidates.First();
            }
            return linked;

        }

        public CIMClassO_ATTR LinkedToR938()
        {
            var candidates = repository.GetCIInstances(domainName, "O_ATTR").Where(i => ((CIMClassO_ATTR)i).Attr_Attr_ID == this.Attr_Attr_ID && ((CIMClassO_ATTR)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_ATTR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_ATTR)candidates.First();
            }
            return linked;

        }

        public CIMSubClassR948 SubClassR948()
        {
            var subClassNames = new List<string>() { "SQ_IAV", "SQ_FAV" };
            CIMSubClassR948 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR948)i).CIMSuperClassSQ_AV() != null && (((CIMSubClassR948)i).CIMSuperClassSQ_AV().Attr_Av_ID == this.Attr_Av_ID));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR948)candidates.First();
                    break;
                }
            }
            return subClass;

        }

    }
    public class CIMClassSQ_CIPBase : CIMOOAofOOAClass, CIMClassSQ_CIP
    {
        public string Attr_Part_ID { get; set; }
        public string Attr_Obj_ID { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_InformalClassName { get; set; }
        public string Attr_Label { get; set; }
        public string Attr_Descrip { get; set; }
        public bool Attr_isFormal { get; set; }

        public CIMClassSQ_CIPBase(CIModelRepository repository, string Part_ID, string Obj_ID, string Name, string InformalClassName, string Label, string Descrip, bool isFormal ) : base(repository, "SQ_CIP")
        {
            Attr_Part_ID = Part_ID;
            Attr_Obj_ID = Obj_ID;
            Attr_Name = Name;
            Attr_InformalClassName = InformalClassName;
            Attr_Label = Label;
            Attr_Descrip = Descrip;
            Attr_isFormal = isFormal;
        }

        public CIMClassSQ_CIPBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Part_ID"], (string)attrArgs["Obj_ID"], (string)attrArgs["Name"], (string)attrArgs["InformalClassName"], (string)attrArgs["Label"], (string)attrArgs["Descrip"], (bool)attrArgs["isFormal"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassO_OBJ LinkedToR934()
        {
            var candidates = repository.GetCIInstances(domainName, "O_OBJ").Where(i => ((CIMClassO_OBJ)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_OBJ linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_OBJ)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassSQ_AV> LinkedFromR936()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_AV").Where(i => ((CIMClassSQ_AV)i).Attr_Informal_Part_ID == this.Attr_Part_ID);
            var linked = new List<CIMClassSQ_AV>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassSQ_AV)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassSQ_AV> LinkedFromR937()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_AV").Where(i => ((CIMClassSQ_AV)i).Attr_Formal_Part_ID == this.Attr_Part_ID);
            var linked = new List<CIMClassSQ_AV>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassSQ_AV)c);
            }
            return linked;

        }

        public CIMClassSQ_P CIMSuperClassSQ_P()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_P").Where(i => ((CIMClassSQ_P)i).Attr_Part_ID == this.Attr_Part_ID);
            CIMClassSQ_P linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSQ_P)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassSQ_COPBase : CIMOOAofOOAClass, CIMClassSQ_COP
    {
        public string Attr_Part_ID { get; set; }
        public string Attr_Component_Id { get; set; }
        public string Attr_Label { get; set; }
        public string Attr_InformalComponentName { get; set; }
        public string Attr_Descrip { get; set; }
        public bool Attr_isFormal { get; set; }

        public CIMClassSQ_COPBase(CIModelRepository repository, string Part_ID, string Component_Id, string Label, string InformalComponentName, string Descrip, bool isFormal ) : base(repository, "SQ_COP")
        {
            Attr_Part_ID = Part_ID;
            Attr_Component_Id = Component_Id;
            Attr_Label = Label;
            Attr_InformalComponentName = InformalComponentName;
            Attr_Descrip = Descrip;
            Attr_isFormal = isFormal;
        }

        public CIMClassSQ_COPBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Part_ID"], (string)attrArgs["Component_Id"], (string)attrArgs["Label"], (string)attrArgs["InformalComponentName"], (string)attrArgs["Descrip"], (bool)attrArgs["isFormal"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassC_C LinkedToR955()
        {
            var candidates = repository.GetCIInstances(domainName, "C_C").Where(i => ((CIMClassC_C)i).Attr_Id == this.Attr_Component_Id);
            CIMClassC_C linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_C)candidates.First();
            }
            return linked;

        }

        public CIMClassSQ_P CIMSuperClassSQ_P()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_P").Where(i => ((CIMClassSQ_P)i).Attr_Part_ID == this.Attr_Part_ID);
            CIMClassSQ_P linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSQ_P)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassSQ_CPBase : CIMOOAofOOAClass, CIMClassSQ_CP
    {
        public string Attr_Part_ID { get; set; }
        public string Attr_Obj_ID { get; set; }
        public string Attr_Label { get; set; }
        public string Attr_InformalName { get; set; }
        public string Attr_Descrip { get; set; }
        public bool Attr_isFormal { get; set; }

        public CIMClassSQ_CPBase(CIModelRepository repository, string Part_ID, string Obj_ID, string Label, string InformalName, string Descrip, bool isFormal ) : base(repository, "SQ_CP")
        {
            Attr_Part_ID = Part_ID;
            Attr_Obj_ID = Obj_ID;
            Attr_Label = Label;
            Attr_InformalName = InformalName;
            Attr_Descrip = Descrip;
            Attr_isFormal = isFormal;
        }

        public CIMClassSQ_CPBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Part_ID"], (string)attrArgs["Obj_ID"], (string)attrArgs["Label"], (string)attrArgs["InformalName"], (string)attrArgs["Descrip"], (bool)attrArgs["isFormal"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassO_OBJ LinkedToR939()
        {
            var candidates = repository.GetCIInstances(domainName, "O_OBJ").Where(i => ((CIMClassO_OBJ)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_OBJ linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_OBJ)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassSQ_CPA> LinkedFromR935()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_CPA").Where(i => ((CIMClassSQ_CPA)i).Attr_Part_ID == this.Attr_Part_ID);
            var linked = new List<CIMClassSQ_CPA>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassSQ_CPA)c);
            }
            return linked;

        }

        public CIMClassSQ_P CIMSuperClassSQ_P()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_P").Where(i => ((CIMClassSQ_P)i).Attr_Part_ID == this.Attr_Part_ID);
            CIMClassSQ_P linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSQ_P)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassSQ_CPABase : CIMOOAofOOAClass, CIMClassSQ_CPA
    {
        public string Attr_Ia_ID { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Type { get; set; }
        public string Attr_Part_ID { get; set; }
        public string Attr_Descrip { get; set; }

        public CIMClassSQ_CPABase(CIModelRepository repository, string Ia_ID, string Name, string Type, string Part_ID, string Descrip ) : base(repository, "SQ_CPA")
        {
            Attr_Ia_ID = Ia_ID;
            Attr_Name = Name;
            Attr_Type = Type;
            Attr_Part_ID = Part_ID;
            Attr_Descrip = Descrip;
        }

        public CIMClassSQ_CPABase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Ia_ID"], (string)attrArgs["Name"], (string)attrArgs["Type"], (string)attrArgs["Part_ID"], (string)attrArgs["Descrip"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSQ_CP LinkedToR935()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_CP").Where(i => ((CIMClassSQ_CP)i).Attr_Part_ID == this.Attr_Part_ID);
            CIMClassSQ_CP linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSQ_CP)candidates.First();
            }
            return linked;

        }

        public CIMSubClassR947 SubClassR947()
        {
            var subClassNames = new List<string>() { "SQ_IA", "SQ_FA" };
            CIMSubClassR947 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR947)i).CIMSuperClassSQ_CPA() != null && (((CIMSubClassR947)i).CIMSuperClassSQ_CPA().Attr_Ia_ID == this.Attr_Ia_ID));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR947)candidates.First();
                    break;
                }
            }
            return subClass;

        }

    }
    public class CIMClassSQ_EEPBase : CIMOOAofOOAClass, CIMClassSQ_EEP
    {
        public string Attr_Part_ID { get; set; }
        public string Attr_EE_ID { get; set; }
        public string Attr_Label { get; set; }
        public string Attr_InformalName { get; set; }
        public string Attr_Descrip { get; set; }
        public bool Attr_isFormal { get; set; }

        public CIMClassSQ_EEPBase(CIModelRepository repository, string Part_ID, string EE_ID, string Label, string InformalName, string Descrip, bool isFormal ) : base(repository, "SQ_EEP")
        {
            Attr_Part_ID = Part_ID;
            Attr_EE_ID = EE_ID;
            Attr_Label = Label;
            Attr_InformalName = InformalName;
            Attr_Descrip = Descrip;
            Attr_isFormal = isFormal;
        }

        public CIMClassSQ_EEPBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Part_ID"], (string)attrArgs["EE_ID"], (string)attrArgs["Label"], (string)attrArgs["InformalName"], (string)attrArgs["Descrip"], (bool)attrArgs["isFormal"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassS_EE LinkedToR933()
        {
            var candidates = repository.GetCIInstances(domainName, "S_EE").Where(i => ((CIMClassS_EE)i).Attr_EE_ID == this.Attr_EE_ID);
            CIMClassS_EE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_EE)candidates.First();
            }
            return linked;

        }

        public CIMClassSQ_P CIMSuperClassSQ_P()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_P").Where(i => ((CIMClassSQ_P)i).Attr_Part_ID == this.Attr_Part_ID);
            CIMClassSQ_P linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSQ_P)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassSQ_FABase : CIMOOAofOOAClass, CIMClassSQ_FA
    {
        public string Attr_Ia_ID { get; set; }

        public CIMClassSQ_FABase(CIModelRepository repository, string Ia_ID ) : base(repository, "SQ_FA")
        {
            Attr_Ia_ID = Ia_ID;
        }

        public CIMClassSQ_FABase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Ia_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSQ_CPA CIMSuperClassSQ_CPA()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_CPA").Where(i => ((CIMClassSQ_CPA)i).Attr_Ia_ID == this.Attr_Ia_ID);
            CIMClassSQ_CPA linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSQ_CPA)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassSQ_FAVBase : CIMOOAofOOAClass, CIMClassSQ_FAV
    {
        public string Attr_Av_ID { get; set; }

        public CIMClassSQ_FAVBase(CIModelRepository repository, string Av_ID ) : base(repository, "SQ_FAV")
        {
            Attr_Av_ID = Av_ID;
        }

        public CIMClassSQ_FAVBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Av_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSQ_AV CIMSuperClassSQ_AV()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_AV").Where(i => ((CIMClassSQ_AV)i).Attr_Av_ID == this.Attr_Av_ID);
            CIMClassSQ_AV linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSQ_AV)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassSQ_IABase : CIMOOAofOOAClass, CIMClassSQ_IA
    {
        public string Attr_Ia_ID { get; set; }

        public CIMClassSQ_IABase(CIModelRepository repository, string Ia_ID ) : base(repository, "SQ_IA")
        {
            Attr_Ia_ID = Ia_ID;
        }

        public CIMClassSQ_IABase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Ia_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSQ_CPA CIMSuperClassSQ_CPA()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_CPA").Where(i => ((CIMClassSQ_CPA)i).Attr_Ia_ID == this.Attr_Ia_ID);
            CIMClassSQ_CPA linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSQ_CPA)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassSQ_IAVBase : CIMOOAofOOAClass, CIMClassSQ_IAV
    {
        public string Attr_Av_ID { get; set; }

        public CIMClassSQ_IAVBase(CIModelRepository repository, string Av_ID ) : base(repository, "SQ_IAV")
        {
            Attr_Av_ID = Av_ID;
        }

        public CIMClassSQ_IAVBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Av_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSQ_AV CIMSuperClassSQ_AV()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_AV").Where(i => ((CIMClassSQ_AV)i).Attr_Av_ID == this.Attr_Av_ID);
            CIMClassSQ_AV linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSQ_AV)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassSQ_LSBase : CIMOOAofOOAClass, CIMClassSQ_LS
    {
        public string Attr_Part_ID { get; set; }
        public string Attr_Source_Part_ID { get; set; }
        public string Attr_Descrip { get; set; }
        public bool Attr_Destroyed { get; set; }

        public CIMClassSQ_LSBase(CIModelRepository repository, string Part_ID, string Source_Part_ID, string Descrip, bool Destroyed ) : base(repository, "SQ_LS")
        {
            Attr_Part_ID = Part_ID;
            Attr_Source_Part_ID = Source_Part_ID;
            Attr_Descrip = Descrip;
            Attr_Destroyed = Destroyed;
        }

        public CIMClassSQ_LSBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Part_ID"], (string)attrArgs["Source_Part_ID"], (string)attrArgs["Descrip"], (bool)attrArgs["Destroyed"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSQ_P LinkedToR940()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_P").Where(i => ((CIMClassSQ_P)i).Attr_Part_ID == this.Attr_Source_Part_ID);
            CIMClassSQ_P linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSQ_P)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassSQ_TM> LinkedFromR931()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_TM").Where(i => ((CIMClassSQ_TM)i).Attr_Part_ID == this.Attr_Part_ID);
            var linked = new List<CIMClassSQ_TM>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassSQ_TM)c);
            }
            return linked;

        }

        public CIMClassSQ_AP LinkedFromR949()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_AP").Where(i => ((CIMClassSQ_AP)i).Attr_LS_Part_ID == this.Attr_Part_ID);
            CIMClassSQ_AP linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSQ_AP)candidates.First();
            }
            return linked;

        }

        public CIMClassSQ_P CIMSuperClassSQ_P()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_P").Where(i => ((CIMClassSQ_P)i).Attr_Part_ID == this.Attr_Part_ID);
            CIMClassSQ_P linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSQ_P)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassSQ_PBase : CIMOOAofOOAClass, CIMClassSQ_P
    {
        public string Attr_Part_ID { get; set; }
        public string Attr_Sequence_Package_IDdeprecated { get; set; }

        public CIMClassSQ_PBase(CIModelRepository repository, string Part_ID, string Sequence_Package_IDdeprecated ) : base(repository, "SQ_P")
        {
            Attr_Part_ID = Part_ID;
            Attr_Sequence_Package_IDdeprecated = Sequence_Package_IDdeprecated;
        }

        public CIMClassSQ_PBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Part_ID"], (string)attrArgs["Sequence_Package_IDdeprecated"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public IEnumerable<CIMClassMSG_M> LinkedFromR1007()
        {
            var candidates = repository.GetCIInstances(domainName, "MSG_M").Where(i => ((CIMClassMSG_M)i).Attr_Sender_Part_ID == this.Attr_Part_ID);
            var linked = new List<CIMClassMSG_M>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassMSG_M)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassMSG_M> LinkedFromR1008()
        {
            var candidates = repository.GetCIInstances(domainName, "MSG_M").Where(i => ((CIMClassMSG_M)i).Attr_Receiver_Part_ID == this.Attr_Part_ID);
            var linked = new List<CIMClassMSG_M>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassMSG_M)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassCOMM_LNK> LinkedFromR1133()
        {
            var candidates = repository.GetCIInstances(domainName, "COMM_LNK").Where(i => ((CIMClassCOMM_LNK)i).Attr_Start_Part_ID == this.Attr_Part_ID);
            var linked = new List<CIMClassCOMM_LNK>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassCOMM_LNK)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassCOMM_LNK> LinkedFromR1134()
        {
            var candidates = repository.GetCIInstances(domainName, "COMM_LNK").Where(i => ((CIMClassCOMM_LNK)i).Attr_Destination_Part_ID == this.Attr_Part_ID);
            var linked = new List<CIMClassCOMM_LNK>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassCOMM_LNK)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassUC_UCA> LinkedFromR1206()
        {
            var candidates = repository.GetCIInstances(domainName, "UC_UCA").Where(i => ((CIMClassUC_UCA)i).Attr_Source_Part_ID == this.Attr_Part_ID);
            var linked = new List<CIMClassUC_UCA>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassUC_UCA)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassUC_UCA> LinkedFromR1207()
        {
            var candidates = repository.GetCIInstances(domainName, "UC_UCA").Where(i => ((CIMClassUC_UCA)i).Attr_Destination_Part_ID == this.Attr_Part_ID);
            var linked = new List<CIMClassUC_UCA>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassUC_UCA)c);
            }
            return linked;

        }

        public CIMClassSQ_LS LinkedFromR940()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_LS").Where(i => ((CIMClassSQ_LS)i).Attr_Source_Part_ID == this.Attr_Part_ID);
            CIMClassSQ_LS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSQ_LS)candidates.First();
            }
            return linked;

        }

        public CIMSubClassR930 SubClassR930()
        {
            var subClassNames = new List<string>() { "SQ_CIP", "SQ_EEP", "SQ_CP", "SQ_AP", "SQ_LS", "IA_UCP", "SQ_COP", "SQ_PP" };
            CIMSubClassR930 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR930)i).CIMSuperClassSQ_P() != null && (((CIMSubClassR930)i).CIMSuperClassSQ_P().Attr_Part_ID == this.Attr_Part_ID));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR930)candidates.First();
                    break;
                }
            }
            return subClass;

        }

        public CIMClassPE_PE CIMSuperClassPE_PE()
        {
            var candidates = repository.GetCIInstances(domainName, "PE_PE").Where(i => ((CIMClassPE_PE)i).Attr_Element_ID == this.Attr_Part_ID);
            CIMClassPE_PE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassPE_PE)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassSQ_PPBase : CIMOOAofOOAClass, CIMClassSQ_PP
    {
        public string Attr_Part_ID { get; set; }
        public string Attr_Package_ID { get; set; }
        public string Attr_Label { get; set; }
        public string Attr_InformalName { get; set; }
        public string Attr_Descrip { get; set; }
        public bool Attr_isFormal { get; set; }

        public CIMClassSQ_PPBase(CIModelRepository repository, string Part_ID, string Package_ID, string Label, string InformalName, string Descrip, bool isFormal ) : base(repository, "SQ_PP")
        {
            Attr_Part_ID = Part_ID;
            Attr_Package_ID = Package_ID;
            Attr_Label = Label;
            Attr_InformalName = InformalName;
            Attr_Descrip = Descrip;
            Attr_isFormal = isFormal;
        }

        public CIMClassSQ_PPBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Part_ID"], (string)attrArgs["Package_ID"], (string)attrArgs["Label"], (string)attrArgs["InformalName"], (string)attrArgs["Descrip"], (bool)attrArgs["isFormal"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassEP_PKG LinkedToR956()
        {
            var candidates = repository.GetCIInstances(domainName, "EP_PKG").Where(i => ((CIMClassEP_PKG)i).Attr_Package_ID == this.Attr_Package_ID);
            CIMClassEP_PKG linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassEP_PKG)candidates.First();
            }
            return linked;

        }

        public CIMClassSQ_P CIMSuperClassSQ_P()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_P").Where(i => ((CIMClassSQ_P)i).Attr_Part_ID == this.Attr_Part_ID);
            CIMClassSQ_P linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSQ_P)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassSQ_TMBase : CIMOOAofOOAClass, CIMClassSQ_TM
    {
        public string Attr_Mark_ID { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Part_ID { get; set; }
        public string Attr_Descrip { get; set; }

        public CIMClassSQ_TMBase(CIModelRepository repository, string Mark_ID, string Name, string Part_ID, string Descrip ) : base(repository, "SQ_TM")
        {
            Attr_Mark_ID = Mark_ID;
            Attr_Name = Name;
            Attr_Part_ID = Part_ID;
            Attr_Descrip = Descrip;
        }

        public CIMClassSQ_TMBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Mark_ID"], (string)attrArgs["Name"], (string)attrArgs["Part_ID"], (string)attrArgs["Descrip"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSQ_LS LinkedToR931()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_LS").Where(i => ((CIMClassSQ_LS)i).Attr_Part_ID == this.Attr_Part_ID);
            CIMClassSQ_LS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSQ_LS)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassSQ_TS> LinkedFromR941()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_TS").Where(i => ((CIMClassSQ_TS)i).Attr_Prev_Mark_ID == this.Attr_Mark_ID);
            var linked = new List<CIMClassSQ_TS>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassSQ_TS)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassSQ_TS> LinkedFromR942()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_TS").Where(i => ((CIMClassSQ_TS)i).Attr_Mark_ID == this.Attr_Mark_ID);
            var linked = new List<CIMClassSQ_TS>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassSQ_TS)c);
            }
            return linked;

        }

    }
    public class CIMClassSQ_TSBase : CIMOOAofOOAClass, CIMClassSQ_TS
    {
        public string Attr_Span_ID { get; set; }
        public string Attr_Mark_ID { get; set; }
        public string Attr_Prev_Mark_ID { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }

        public CIMClassSQ_TSBase(CIModelRepository repository, string Span_ID, string Mark_ID, string Prev_Mark_ID, string Name, string Descrip ) : base(repository, "SQ_TS")
        {
            Attr_Span_ID = Span_ID;
            Attr_Mark_ID = Mark_ID;
            Attr_Prev_Mark_ID = Prev_Mark_ID;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
        }

        public CIMClassSQ_TSBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Span_ID"], (string)attrArgs["Mark_ID"], (string)attrArgs["Prev_Mark_ID"], (string)attrArgs["Name"], (string)attrArgs["Descrip"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSQ_TM LinkedToR941()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_TM").Where(i => ((CIMClassSQ_TM)i).Attr_Mark_ID == this.Attr_Prev_Mark_ID);
            CIMClassSQ_TM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSQ_TM)candidates.First();
            }
            return linked;

        }

        public CIMClassSQ_TM LinkedToR942()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_TM").Where(i => ((CIMClassSQ_TM)i).Attr_Mark_ID == this.Attr_Mark_ID);
            CIMClassSQ_TM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSQ_TM)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassS_BPARMBase : CIMOOAofOOAClass, CIMClassS_BPARM
    {
        public string Attr_BParm_ID { get; set; }
        public string Attr_Brg_ID { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_DT_ID { get; set; }
        public int Attr_By_Ref { get; set; }
        public string Attr_Dimensions { get; set; }
        public string Attr_Previous_BParm_ID { get; set; }
        public string Attr_Descrip { get; set; }

        public CIMClassS_BPARMBase(CIModelRepository repository, string BParm_ID, string Brg_ID, string Name, string DT_ID, int By_Ref, string Dimensions, string Previous_BParm_ID, string Descrip ) : base(repository, "S_BPARM")
        {
            Attr_BParm_ID = BParm_ID;
            Attr_Brg_ID = Brg_ID;
            Attr_Name = Name;
            Attr_DT_ID = DT_ID;
            Attr_By_Ref = By_Ref;
            Attr_Dimensions = Dimensions;
            Attr_Previous_BParm_ID = Previous_BParm_ID;
            Attr_Descrip = Descrip;
        }

        public CIMClassS_BPARMBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["BParm_ID"], (string)attrArgs["Brg_ID"], (string)attrArgs["Name"], (string)attrArgs["DT_ID"], (int)attrArgs["By_Ref"], (string)attrArgs["Dimensions"], (string)attrArgs["Previous_BParm_ID"], (string)attrArgs["Descrip"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassS_BRG LinkedToR21()
        {
            var candidates = repository.GetCIInstances(domainName, "S_BRG").Where(i => ((CIMClassS_BRG)i).Attr_Brg_ID == this.Attr_Brg_ID);
            CIMClassS_BRG linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_BRG)candidates.First();
            }
            return linked;

        }

        public CIMClassS_DT LinkedToR22()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DT").Where(i => ((CIMClassS_DT)i).Attr_DT_ID == this.Attr_DT_ID);
            CIMClassS_DT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_DT)candidates.First();
            }
            return linked;

        }

        public CIMClassS_BPARM LinkedToR55Precedes()
        {
            var candidates = repository.GetCIInstances(domainName, "S_BPARM").Where(i => ((CIMClassS_BPARM)i).Attr_BParm_ID == this.Attr_Previous_BParm_ID);
            CIMClassS_BPARM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_BPARM)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassMSG_BA> LinkedFromR1014()
        {
            var candidates = repository.GetCIInstances(domainName, "MSG_BA").Where(i => ((CIMClassMSG_BA)i).Attr_BParm_ID == this.Attr_BParm_ID);
            var linked = new List<CIMClassMSG_BA>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassMSG_BA)c);
            }
            return linked;

        }

        public CIMClassTE_PARM LinkedFromR2028()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_PARM").Where(i => ((CIMClassTE_PARM)i).Attr_BParm_ID == this.Attr_BParm_ID);
            CIMClassTE_PARM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_PARM)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassS_DIM> LinkedFromR49()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DIM").Where(i => ((CIMClassS_DIM)i).Attr_BParm_ID == this.Attr_BParm_ID);
            var linked = new List<CIMClassS_DIM>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassS_DIM)c);
            }
            return linked;

        }

        public CIMClassS_BPARM LinkedFromR55Succeeds()
        {
            var candidates = repository.GetCIInstances(domainName, "S_BPARM").Where(i => ((CIMClassS_BPARM)i).Attr_Previous_BParm_ID == this.Attr_BParm_ID);
            CIMClassS_BPARM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_BPARM)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassV_PVL> LinkedFromR831()
        {
            var candidates = repository.GetCIInstances(domainName, "V_PVL").Where(i => ((CIMClassV_PVL)i).Attr_BParm_ID == this.Attr_BParm_ID);
            var linked = new List<CIMClassV_PVL>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_PVL)c);
            }
            return linked;

        }

    }
    public class CIMClassS_BRGBase : CIMOOAofOOAClass, CIMClassS_BRG
    {
        public string Attr_Brg_ID { get; set; }
        public string Attr_EE_ID { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }
        public int Attr_Brg_Typ { get; set; }
        public string Attr_DT_ID { get; set; }
        public string Attr_Action_Semantics { get; set; }
        public int Attr_Suc_Pars { get; set; }
        public string Attr_Return_Dimensions { get; set; }
        public int Attr_Dialect { get; set; }

        public CIMClassS_BRGBase(CIModelRepository repository, string Brg_ID, string EE_ID, string Name, string Descrip, int Brg_Typ, string DT_ID, string Action_Semantics, int Suc_Pars, string Return_Dimensions, int Dialect ) : base(repository, "S_BRG")
        {
            Attr_Brg_ID = Brg_ID;
            Attr_EE_ID = EE_ID;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
            Attr_Brg_Typ = Brg_Typ;
            Attr_DT_ID = DT_ID;
            Attr_Action_Semantics = Action_Semantics;
            Attr_Suc_Pars = Suc_Pars;
            Attr_Return_Dimensions = Return_Dimensions;
            Attr_Dialect = Dialect;
        }

        public CIMClassS_BRGBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Brg_ID"], (string)attrArgs["EE_ID"], (string)attrArgs["Name"], (string)attrArgs["Descrip"], (int)attrArgs["Brg_Typ"], (string)attrArgs["DT_ID"], (string)attrArgs["Action_Semantics"], (int)attrArgs["Suc_Pars"], (string)attrArgs["Return_Dimensions"], (int)attrArgs["Dialect"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassS_EE LinkedToR19()
        {
            var candidates = repository.GetCIInstances(domainName, "S_EE").Where(i => ((CIMClassS_EE)i).Attr_EE_ID == this.Attr_EE_ID);
            CIMClassS_EE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_EE)candidates.First();
            }
            return linked;

        }

        public CIMClassS_DT LinkedToR20()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DT").Where(i => ((CIMClassS_DT)i).Attr_DT_ID == this.Attr_DT_ID);
            CIMClassS_DT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_DT)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassMSG_B> LinkedFromR1012()
        {
            var candidates = repository.GetCIInstances(domainName, "MSG_B").Where(i => ((CIMClassMSG_B)i).Attr_Brg_ID == this.Attr_Brg_ID);
            var linked = new List<CIMClassMSG_B>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassMSG_B)c);
            }
            return linked;

        }

        public CIMClassTE_BRG LinkedFromR2025()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_BRG").Where(i => ((CIMClassTE_BRG)i).Attr_Brg_ID == this.Attr_Brg_ID);
            CIMClassTE_BRG linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_BRG)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassS_BPARM> LinkedFromR21()
        {
            var candidates = repository.GetCIInstances(domainName, "S_BPARM").Where(i => ((CIMClassS_BPARM)i).Attr_Brg_ID == this.Attr_Brg_ID);
            var linked = new List<CIMClassS_BPARM>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassS_BPARM)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassS_DIM> LinkedFromR50()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DIM").Where(i => ((CIMClassS_DIM)i).Attr_Brg_ID == this.Attr_Brg_ID);
            var linked = new List<CIMClassS_DIM>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassS_DIM)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_BRG> LinkedFromR674()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_BRG").Where(i => ((CIMClassACT_BRG)i).Attr_Brg_ID == this.Attr_Brg_ID);
            var linked = new List<CIMClassACT_BRG>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_BRG)c);
            }
            return linked;

        }

        public CIMClassACT_BRB LinkedFromR697()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_BRB").Where(i => ((CIMClassACT_BRB)i).Attr_Brg_ID == this.Attr_Brg_ID);
            CIMClassACT_BRB linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_BRB)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassV_BRV> LinkedFromR828()
        {
            var candidates = repository.GetCIInstances(domainName, "V_BRV").Where(i => ((CIMClassV_BRV)i).Attr_Brg_ID == this.Attr_Brg_ID);
            var linked = new List<CIMClassV_BRV>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_BRV)c);
            }
            return linked;

        }

    }
    public class CIMClassS_CDTBase : CIMOOAofOOAClass, CIMClassS_CDT
    {
        public string Attr_DT_ID { get; set; }
        public int Attr_Core_Typ { get; set; }

        public CIMClassS_CDTBase(CIModelRepository repository, string DT_ID, int Core_Typ ) : base(repository, "S_CDT")
        {
            Attr_DT_ID = DT_ID;
            Attr_Core_Typ = Core_Typ;
        }

        public CIMClassS_CDTBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["DT_ID"], (int)attrArgs["Core_Typ"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassS_DT CIMSuperClassS_DT()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DT").Where(i => ((CIMClassS_DT)i).Attr_DT_ID == this.Attr_DT_ID);
            CIMClassS_DT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_DT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassS_DIMBase : CIMOOAofOOAClass, CIMClassS_DIM
    {
        public int Attr_elementCount { get; set; }
        public int Attr_dimensionCount { get; set; }
        public string Attr_Sync_ID { get; set; }
        public string Attr_SParm_ID { get; set; }
        public string Attr_BParm_ID { get; set; }
        public string Attr_Brg_ID { get; set; }
        public string Attr_Id { get; set; }
        public string Attr_Obj_ID { get; set; }
        public string Attr_Attr_ID { get; set; }
        public string Attr_TParm_ID { get; set; }
        public string Attr_Tfr_ID { get; set; }
        public string Attr_Member_ID { get; set; }
        public string Attr_DT_ID { get; set; }
        public string Attr_PP_Id { get; set; }
        public string Attr_SM_ID { get; set; }
        public string Attr_SMedi_ID { get; set; }
        public string Attr_DIM_ID { get; set; }
        public string Attr_Var_ID { get; set; }
        public string Attr_TSParm_ID { get; set; }
        public string Attr_Svc_ID { get; set; }

        public CIMClassS_DIMBase(CIModelRepository repository, int elementCount, int dimensionCount, string Sync_ID, string SParm_ID, string BParm_ID, string Brg_ID, string Id, string Obj_ID, string Attr_ID, string TParm_ID, string Tfr_ID, string Member_ID, string DT_ID, string PP_Id, string SM_ID, string SMedi_ID, string DIM_ID, string Var_ID, string TSParm_ID, string Svc_ID ) : base(repository, "S_DIM")
        {
            Attr_elementCount = elementCount;
            Attr_dimensionCount = dimensionCount;
            Attr_Sync_ID = Sync_ID;
            Attr_SParm_ID = SParm_ID;
            Attr_BParm_ID = BParm_ID;
            Attr_Brg_ID = Brg_ID;
            Attr_Id = Id;
            Attr_Obj_ID = Obj_ID;
            Attr_Attr_ID = Attr_ID;
            Attr_TParm_ID = TParm_ID;
            Attr_Tfr_ID = Tfr_ID;
            Attr_Member_ID = Member_ID;
            Attr_DT_ID = DT_ID;
            Attr_PP_Id = PP_Id;
            Attr_SM_ID = SM_ID;
            Attr_SMedi_ID = SMedi_ID;
            Attr_DIM_ID = DIM_ID;
            Attr_Var_ID = Var_ID;
            Attr_TSParm_ID = TSParm_ID;
            Attr_Svc_ID = Svc_ID;
        }

        public CIMClassS_DIMBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (int)attrArgs["elementCount"], (int)attrArgs["dimensionCount"], (string)attrArgs["Sync_ID"], (string)attrArgs["SParm_ID"], (string)attrArgs["BParm_ID"], (string)attrArgs["Brg_ID"], (string)attrArgs["Id"], (string)attrArgs["Obj_ID"], (string)attrArgs["Attr_ID"], (string)attrArgs["TParm_ID"], (string)attrArgs["Tfr_ID"], (string)attrArgs["Member_ID"], (string)attrArgs["DT_ID"], (string)attrArgs["PP_Id"], (string)attrArgs["SM_ID"], (string)attrArgs["SMedi_ID"], (string)attrArgs["DIM_ID"], (string)attrArgs["Var_ID"], (string)attrArgs["TSParm_ID"], (string)attrArgs["Svc_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassO_ATTR LinkedToR120()
        {
            var candidates = repository.GetCIInstances(domainName, "O_ATTR").Where(i => ((CIMClassO_ATTR)i).Attr_Attr_ID == this.Attr_Attr_ID && ((CIMClassO_ATTR)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_ATTR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_ATTR)candidates.First();
            }
            return linked;

        }

        public CIMClassO_TPARM LinkedToR121()
        {
            var candidates = repository.GetCIInstances(domainName, "O_TPARM").Where(i => ((CIMClassO_TPARM)i).Attr_TParm_ID == this.Attr_TParm_ID);
            CIMClassO_TPARM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_TPARM)candidates.First();
            }
            return linked;

        }

        public CIMClassO_TFR LinkedToR122()
        {
            var candidates = repository.GetCIInstances(domainName, "O_TFR").Where(i => ((CIMClassO_TFR)i).Attr_Tfr_ID == this.Attr_Tfr_ID);
            CIMClassO_TFR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_TFR)candidates.First();
            }
            return linked;

        }

        public CIMClassC_PP LinkedToR4017()
        {
            var candidates = repository.GetCIInstances(domainName, "C_PP").Where(i => ((CIMClassC_PP)i).Attr_PP_Id == this.Attr_PP_Id);
            CIMClassC_PP linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_PP)candidates.First();
            }
            return linked;

        }

        public CIMClassC_IO LinkedToR4018()
        {
            var candidates = repository.GetCIInstances(domainName, "C_IO").Where(i => ((CIMClassC_IO)i).Attr_Id == this.Attr_Id);
            CIMClassC_IO linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_IO)candidates.First();
            }
            return linked;

        }

        public CIMClassS_BPARM LinkedToR49()
        {
            var candidates = repository.GetCIInstances(domainName, "S_BPARM").Where(i => ((CIMClassS_BPARM)i).Attr_BParm_ID == this.Attr_BParm_ID);
            CIMClassS_BPARM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_BPARM)candidates.First();
            }
            return linked;

        }

        public CIMClassS_BRG LinkedToR50()
        {
            var candidates = repository.GetCIInstances(domainName, "S_BRG").Where(i => ((CIMClassS_BRG)i).Attr_Brg_ID == this.Attr_Brg_ID);
            CIMClassS_BRG linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_BRG)candidates.First();
            }
            return linked;

        }

        public CIMClassS_SYNC LinkedToR51()
        {
            var candidates = repository.GetCIInstances(domainName, "S_SYNC").Where(i => ((CIMClassS_SYNC)i).Attr_Sync_ID == this.Attr_Sync_ID);
            CIMClassS_SYNC linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_SYNC)candidates.First();
            }
            return linked;

        }

        public CIMClassS_SPARM LinkedToR52()
        {
            var candidates = repository.GetCIInstances(domainName, "S_SPARM").Where(i => ((CIMClassS_SPARM)i).Attr_SParm_ID == this.Attr_SParm_ID);
            CIMClassS_SPARM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_SPARM)candidates.First();
            }
            return linked;

        }

        public CIMClassS_MBR LinkedToR53()
        {
            var candidates = repository.GetCIInstances(domainName, "S_MBR").Where(i => ((CIMClassS_MBR)i).Attr_Parent_DT_DT_ID == this.Attr_DT_ID && ((CIMClassS_MBR)i).Attr_Member_ID == this.Attr_Member_ID);
            CIMClassS_MBR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_MBR)candidates.First();
            }
            return linked;

        }

        public CIMClassSM_EVTDI LinkedToR531()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_EVTDI").Where(i => ((CIMClassSM_EVTDI)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_EVTDI)i).Attr_SMedi_ID == this.Attr_SMedi_ID);
            CIMClassSM_EVTDI linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_EVTDI)candidates.First();
            }
            return linked;

        }

        public CIMClassV_TRN LinkedToR844()
        {
            var candidates = repository.GetCIInstances(domainName, "V_TRN").Where(i => ((CIMClassV_TRN)i).Attr_Var_ID == this.Attr_Var_ID);
            CIMClassV_TRN linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_TRN)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAR LinkedToR849()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAR").Where(i => ((CIMClassV_VAR)i).Attr_Var_ID == this.Attr_Var_ID);
            CIMClassV_VAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAR)candidates.First();
            }
            return linked;

        }

        public CIMClassD_TSPARM LinkedFromR1655()
        {
            var candidates = repository.GetCIInstances(domainName, "D_TSPARM").Where(i => ((CIMClassD_TSPARM)i).Attr_TSParm_ID == this.Attr_TSParm_ID);
            CIMClassD_TSPARM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassD_TSPARM)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassD_TSVC> LinkedFromR1657()
        {
            var candidates = repository.GetCIInstances(domainName, "D_TSVC").Where(i => ((CIMClassD_TSVC)i).Attr_Svc_ID == this.Attr_Svc_ID);
            var linked = new List<CIMClassD_TSVC>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassD_TSVC)c);
            }
            return linked;

        }

    }
    public class CIMClassS_DTBase : CIMOOAofOOAClass, CIMClassS_DT
    {
        public string Attr_DT_ID { get; set; }
        public string Attr_Dom_IDdeprecated { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }
        public string Attr_DefaultValue { get; set; }

        public CIMClassS_DTBase(CIModelRepository repository, string DT_ID, string Dom_IDdeprecated, string Name, string Descrip, string DefaultValue ) : base(repository, "S_DT")
        {
            Attr_DT_ID = DT_ID;
            Attr_Dom_IDdeprecated = Dom_IDdeprecated;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
            Attr_DefaultValue = DefaultValue;
        }

        public CIMClassS_DTBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["DT_ID"], (string)attrArgs["Dom_IDdeprecated"], (string)attrArgs["Name"], (string)attrArgs["Descrip"], (string)attrArgs["DefaultValue"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public IEnumerable<CIMClassO_ATTR> LinkedFromR114()
        {
            var candidates = repository.GetCIInstances(domainName, "O_ATTR").Where(i => ((CIMClassO_ATTR)i).Attr_DT_ID == this.Attr_DT_ID);
            var linked = new List<CIMClassO_ATTR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassO_ATTR)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassO_TFR> LinkedFromR116()
        {
            var candidates = repository.GetCIInstances(domainName, "O_TFR").Where(i => ((CIMClassO_TFR)i).Attr_DT_ID == this.Attr_DT_ID);
            var linked = new List<CIMClassO_TFR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassO_TFR)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassO_TPARM> LinkedFromR118()
        {
            var candidates = repository.GetCIInstances(domainName, "O_TPARM").Where(i => ((CIMClassO_TPARM)i).Attr_DT_ID == this.Attr_DT_ID);
            var linked = new List<CIMClassO_TPARM>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassO_TPARM)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassCNST_SYC> LinkedFromR1500()
        {
            var candidates = repository.GetCIInstances(domainName, "CNST_SYC").Where(i => ((CIMClassCNST_SYC)i).Attr_DT_ID == this.Attr_DT_ID);
            var linked = new List<CIMClassCNST_SYC>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassCNST_SYC)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassD_TSPARM> LinkedFromR1653()
        {
            var candidates = repository.GetCIInstances(domainName, "D_TSPARM").Where(i => ((CIMClassD_TSPARM)i).Attr_DT_ID == this.Attr_DT_ID);
            var linked = new List<CIMClassD_TSPARM>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassD_TSPARM)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassD_TSVC> LinkedFromR1656()
        {
            var candidates = repository.GetCIInstances(domainName, "D_TSVC").Where(i => ((CIMClassD_TSVC)i).Attr_DT_ID == this.Attr_DT_ID);
            var linked = new List<CIMClassD_TSVC>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassD_TSVC)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassS_UDT> LinkedFromR18()
        {
            var candidates = repository.GetCIInstances(domainName, "S_UDT").Where(i => ((CIMClassS_UDT)i).Attr_CDT_DT_ID == this.Attr_DT_ID);
            var linked = new List<CIMClassS_UDT>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassS_UDT)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassS_BRG> LinkedFromR20()
        {
            var candidates = repository.GetCIInstances(domainName, "S_BRG").Where(i => ((CIMClassS_BRG)i).Attr_DT_ID == this.Attr_DT_ID);
            var linked = new List<CIMClassS_BRG>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassS_BRG)c);
            }
            return linked;

        }

        public CIMClassTE_DT LinkedFromR2021()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_DT").Where(i => ((CIMClassTE_DT)i).Attr_DT_ID == this.Attr_DT_ID);
            CIMClassTE_DT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_DT)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassS_BPARM> LinkedFromR22()
        {
            var candidates = repository.GetCIInstances(domainName, "S_BPARM").Where(i => ((CIMClassS_BPARM)i).Attr_DT_ID == this.Attr_DT_ID);
            var linked = new List<CIMClassS_BPARM>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassS_BPARM)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassS_SYNC> LinkedFromR25()
        {
            var candidates = repository.GetCIInstances(domainName, "S_SYNC").Where(i => ((CIMClassS_SYNC)i).Attr_DT_ID == this.Attr_DT_ID);
            var linked = new List<CIMClassS_SYNC>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassS_SYNC)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassS_SPARM> LinkedFromR26()
        {
            var candidates = repository.GetCIInstances(domainName, "S_SPARM").Where(i => ((CIMClassS_SPARM)i).Attr_DT_ID == this.Attr_DT_ID);
            var linked = new List<CIMClassS_SPARM>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassS_SPARM)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassC_PP> LinkedFromR4007()
        {
            var candidates = repository.GetCIInstances(domainName, "C_PP").Where(i => ((CIMClassC_PP)i).Attr_DT_ID == this.Attr_DT_ID);
            var linked = new List<CIMClassC_PP>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassC_PP)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassC_IO> LinkedFromR4008()
        {
            var candidates = repository.GetCIInstances(domainName, "C_IO").Where(i => ((CIMClassC_IO)i).Attr_DT_ID == this.Attr_DT_ID);
            var linked = new List<CIMClassC_IO>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassC_IO)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassS_MBR> LinkedFromR45()
        {
            var candidates = repository.GetCIInstances(domainName, "S_MBR").Where(i => ((CIMClassS_MBR)i).Attr_DT_ID == this.Attr_DT_ID);
            var linked = new List<CIMClassS_MBR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassS_MBR)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassSM_EVTDI> LinkedFromR524()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_EVTDI").Where(i => ((CIMClassSM_EVTDI)i).Attr_DT_ID == this.Attr_DT_ID);
            var linked = new List<CIMClassSM_EVTDI>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassSM_EVTDI)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassV_VAL> LinkedFromR820()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_DT_ID == this.Attr_DT_ID);
            var linked = new List<CIMClassV_VAL>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_VAL)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassV_TRN> LinkedFromR821()
        {
            var candidates = repository.GetCIInstances(domainName, "V_TRN").Where(i => ((CIMClassV_TRN)i).Attr_DT_ID == this.Attr_DT_ID);
            var linked = new List<CIMClassV_TRN>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_TRN)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassV_VAR> LinkedFromR848()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAR").Where(i => ((CIMClassV_VAR)i).Attr_DT_ID == this.Attr_DT_ID);
            var linked = new List<CIMClassV_VAR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_VAR)c);
            }
            return linked;

        }

        public CIMSubClassR17 SubClassR17()
        {
            var subClassNames = new List<string>() { "S_CDT", "S_UDT", "S_EDT", "S_SDT", "S_IRDT" };
            CIMSubClassR17 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR17)i).CIMSuperClassS_DT() != null && (((CIMSubClassR17)i).CIMSuperClassS_DT().Attr_DT_ID == this.Attr_DT_ID));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR17)candidates.First();
                    break;
                }
            }
            return subClass;

        }

        public CIMClassPE_PE CIMSuperClassPE_PE()
        {
            var candidates = repository.GetCIInstances(domainName, "PE_PE").Where(i => ((CIMClassPE_PE)i).Attr_Element_ID == this.Attr_DT_ID);
            CIMClassPE_PE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassPE_PE)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassS_EDTBase : CIMOOAofOOAClass, CIMClassS_EDT
    {
        public string Attr_DT_ID { get; set; }

        public CIMClassS_EDTBase(CIModelRepository repository, string DT_ID ) : base(repository, "S_EDT")
        {
            Attr_DT_ID = DT_ID;
        }

        public CIMClassS_EDTBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["DT_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public IEnumerable<CIMClassS_ENUM> LinkedFromR27()
        {
            var candidates = repository.GetCIInstances(domainName, "S_ENUM").Where(i => ((CIMClassS_ENUM)i).Attr_EDT_DT_ID == this.Attr_DT_ID);
            var linked = new List<CIMClassS_ENUM>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassS_ENUM)c);
            }
            return linked;

        }

        public CIMClassS_DT CIMSuperClassS_DT()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DT").Where(i => ((CIMClassS_DT)i).Attr_DT_ID == this.Attr_DT_ID);
            CIMClassS_DT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_DT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassS_EEBase : CIMOOAofOOAClass, CIMClassS_EE
    {
        public string Attr_EE_ID { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }
        public string Attr_Key_Lett { get; set; }
        public string Attr_Dom_IDdeprecated { get; set; }
        public string Attr_Realized_Class_Path { get; set; }
        public string Attr_Label { get; set; }
        public bool Attr_isRealized { get; set; }

        public CIMClassS_EEBase(CIModelRepository repository, string EE_ID, string Name, string Descrip, string Key_Lett, string Dom_IDdeprecated, string Realized_Class_Path, string Label, bool isRealized ) : base(repository, "S_EE")
        {
            Attr_EE_ID = EE_ID;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
            Attr_Key_Lett = Key_Lett;
            Attr_Dom_IDdeprecated = Dom_IDdeprecated;
            Attr_Realized_Class_Path = Realized_Class_Path;
            Attr_Label = Label;
            Attr_isRealized = isRealized;
        }

        public CIMClassS_EEBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["EE_ID"], (string)attrArgs["Name"], (string)attrArgs["Descrip"], (string)attrArgs["Key_Lett"], (string)attrArgs["Dom_IDdeprecated"], (string)attrArgs["Realized_Class_Path"], (string)attrArgs["Label"], (bool)attrArgs["isRealized"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public IEnumerable<CIMClassS_BRG> LinkedFromR19()
        {
            var candidates = repository.GetCIInstances(domainName, "S_BRG").Where(i => ((CIMClassS_BRG)i).Attr_EE_ID == this.Attr_EE_ID);
            var linked = new List<CIMClassS_BRG>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassS_BRG)c);
            }
            return linked;

        }

        public CIMClassTE_EE LinkedFromR2020()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_EE").Where(i => ((CIMClassTE_EE)i).Attr_EE_ID == this.Attr_EE_ID);
            CIMClassTE_EE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_EE)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassS_EEM> LinkedFromR9()
        {
            var candidates = repository.GetCIInstances(domainName, "S_EEM").Where(i => ((CIMClassS_EEM)i).Attr_EE_ID == this.Attr_EE_ID);
            var linked = new List<CIMClassS_EEM>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassS_EEM)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassSQ_EEP> LinkedFromR933()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_EEP").Where(i => ((CIMClassSQ_EEP)i).Attr_EE_ID == this.Attr_EE_ID);
            var linked = new List<CIMClassSQ_EEP>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassSQ_EEP)c);
            }
            return linked;

        }

        public CIMClassPE_PE CIMSuperClassPE_PE()
        {
            var candidates = repository.GetCIInstances(domainName, "PE_PE").Where(i => ((CIMClassPE_PE)i).Attr_Element_ID == this.Attr_EE_ID);
            CIMClassPE_PE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassPE_PE)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassS_EEMBase : CIMOOAofOOAClass, CIMClassS_EEM
    {
        public string Attr_EEmod_ID { get; set; }
        public string Attr_EE_ID { get; set; }
        public int Attr_Modl_Typ { get; set; }
        public string Attr_SS_IDdeprecated { get; set; }

        public CIMClassS_EEMBase(CIModelRepository repository, string EEmod_ID, string EE_ID, int Modl_Typ, string SS_IDdeprecated ) : base(repository, "S_EEM")
        {
            Attr_EEmod_ID = EEmod_ID;
            Attr_EE_ID = EE_ID;
            Attr_Modl_Typ = Modl_Typ;
            Attr_SS_IDdeprecated = SS_IDdeprecated;
        }

        public CIMClassS_EEMBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["EEmod_ID"], (string)attrArgs["EE_ID"], (int)attrArgs["Modl_Typ"], (string)attrArgs["SS_IDdeprecated"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassS_EE LinkedToR9()
        {
            var candidates = repository.GetCIInstances(domainName, "S_EE").Where(i => ((CIMClassS_EE)i).Attr_EE_ID == this.Attr_EE_ID);
            CIMClassS_EE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_EE)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassS_ENUMBase : CIMOOAofOOAClass, CIMClassS_ENUM
    {
        public string Attr_Enum_ID { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }
        public string Attr_EDT_DT_ID { get; set; }
        public string Attr_Previous_Enum_ID { get; set; }

        public CIMClassS_ENUMBase(CIModelRepository repository, string Enum_ID, string Name, string Descrip, string EDT_DT_ID, string Previous_Enum_ID ) : base(repository, "S_ENUM")
        {
            Attr_Enum_ID = Enum_ID;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
            Attr_EDT_DT_ID = EDT_DT_ID;
            Attr_Previous_Enum_ID = Previous_Enum_ID;
        }

        public CIMClassS_ENUMBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Enum_ID"], (string)attrArgs["Name"], (string)attrArgs["Descrip"], (string)attrArgs["EDT_DT_ID"], (string)attrArgs["Previous_Enum_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassS_EDT LinkedToR27()
        {
            var candidates = repository.GetCIInstances(domainName, "S_EDT").Where(i => ((CIMClassS_EDT)i).Attr_DT_ID == this.Attr_EDT_DT_ID);
            CIMClassS_EDT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_EDT)candidates.First();
            }
            return linked;

        }

        public CIMClassS_ENUM LinkedToR56Precedes()
        {
            var candidates = repository.GetCIInstances(domainName, "S_ENUM").Where(i => ((CIMClassS_ENUM)i).Attr_Enum_ID == this.Attr_Previous_Enum_ID);
            CIMClassS_ENUM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_ENUM)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_ENUM LinkedFromR2027()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_ENUM").Where(i => ((CIMClassTE_ENUM)i).Attr_Enum_ID == this.Attr_Enum_ID);
            CIMClassTE_ENUM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_ENUM)candidates.First();
            }
            return linked;

        }

        public CIMClassS_ENUM LinkedFromR56Succeeds()
        {
            var candidates = repository.GetCIInstances(domainName, "S_ENUM").Where(i => ((CIMClassS_ENUM)i).Attr_Previous_Enum_ID == this.Attr_Enum_ID);
            CIMClassS_ENUM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_ENUM)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassV_LEN> LinkedFromR824()
        {
            var candidates = repository.GetCIInstances(domainName, "V_LEN").Where(i => ((CIMClassV_LEN)i).Attr_Enum_ID == this.Attr_Enum_ID);
            var linked = new List<CIMClassV_LEN>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_LEN)c);
            }
            return linked;

        }

    }
    public class CIMClassS_EXPBase : CIMOOAofOOAClass, CIMClassS_EXP
    {
        public string Attr_Exception_ID { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }

        public CIMClassS_EXPBase(CIModelRepository repository, string Exception_ID, string Name, string Descrip ) : base(repository, "S_EXP")
        {
            Attr_Exception_ID = Exception_ID;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
        }

        public CIMClassS_EXPBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Exception_ID"], (string)attrArgs["Name"], (string)attrArgs["Descrip"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassPE_PE CIMSuperClassPE_PE()
        {
            var candidates = repository.GetCIInstances(domainName, "PE_PE").Where(i => ((CIMClassPE_PE)i).Attr_Element_ID == this.Attr_Exception_ID);
            CIMClassPE_PE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassPE_PE)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassS_IRDTBase : CIMOOAofOOAClass, CIMClassS_IRDT
    {
        public string Attr_DT_ID { get; set; }
        public bool Attr_isSet { get; set; }
        public string Attr_Obj_ID { get; set; }

        public CIMClassS_IRDTBase(CIModelRepository repository, string DT_ID, bool isSet, string Obj_ID ) : base(repository, "S_IRDT")
        {
            Attr_DT_ID = DT_ID;
            Attr_isSet = isSet;
            Attr_Obj_ID = Obj_ID;
        }

        public CIMClassS_IRDTBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["DT_ID"], (bool)attrArgs["isSet"], (string)attrArgs["Obj_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassO_OBJ LinkedToR123()
        {
            var candidates = repository.GetCIInstances(domainName, "O_OBJ").Where(i => ((CIMClassO_OBJ)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_OBJ linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_OBJ)candidates.First();
            }
            return linked;

        }

        public CIMClassS_DT CIMSuperClassS_DT()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DT").Where(i => ((CIMClassS_DT)i).Attr_DT_ID == this.Attr_DT_ID);
            CIMClassS_DT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_DT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassS_MBRBase : CIMOOAofOOAClass, CIMClassS_MBR
    {
        public string Attr_Member_ID { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }
        public string Attr_Parent_DT_DT_ID { get; set; }
        public string Attr_DT_ID { get; set; }
        public string Attr_Previous_Member_ID { get; set; }
        public string Attr_Dimensions { get; set; }

        public CIMClassS_MBRBase(CIModelRepository repository, string Member_ID, string Name, string Descrip, string Parent_DT_DT_ID, string DT_ID, string Previous_Member_ID, string Dimensions ) : base(repository, "S_MBR")
        {
            Attr_Member_ID = Member_ID;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
            Attr_Parent_DT_DT_ID = Parent_DT_DT_ID;
            Attr_DT_ID = DT_ID;
            Attr_Previous_Member_ID = Previous_Member_ID;
            Attr_Dimensions = Dimensions;
        }

        public CIMClassS_MBRBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Member_ID"], (string)attrArgs["Name"], (string)attrArgs["Descrip"], (string)attrArgs["Parent_DT_DT_ID"], (string)attrArgs["DT_ID"], (string)attrArgs["Previous_Member_ID"], (string)attrArgs["Dimensions"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassS_SDT LinkedToR44()
        {
            var candidates = repository.GetCIInstances(domainName, "S_SDT").Where(i => ((CIMClassS_SDT)i).Attr_DT_ID == this.Attr_Parent_DT_DT_ID);
            CIMClassS_SDT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_SDT)candidates.First();
            }
            return linked;

        }

        public CIMClassS_DT LinkedToR45()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DT").Where(i => ((CIMClassS_DT)i).Attr_DT_ID == this.Attr_DT_ID);
            CIMClassS_DT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_DT)candidates.First();
            }
            return linked;

        }

        public CIMClassS_MBR LinkedToR46Precedes()
        {
            var candidates = repository.GetCIInstances(domainName, "S_MBR").Where(i => ((CIMClassS_MBR)i).Attr_Member_ID == this.Attr_Previous_Member_ID && ((CIMClassS_MBR)i).Attr_Parent_DT_DT_ID == this.Attr_Parent_DT_DT_ID);
            CIMClassS_MBR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_MBR)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_MBR LinkedFromR2047()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_MBR").Where(i => ((CIMClassTE_MBR)i).Attr_DT_ID == this.Attr_Parent_DT_DT_ID && ((CIMClassTE_MBR)i).Attr_Member_ID == this.Attr_Member_ID);
            CIMClassTE_MBR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_MBR)candidates.First();
            }
            return linked;

        }

        public CIMClassS_MBR LinkedFromR46Succeeds()
        {
            var candidates = repository.GetCIInstances(domainName, "S_MBR").Where(i => ((CIMClassS_MBR)i).Attr_Previous_Member_ID == this.Attr_Member_ID && ((CIMClassS_MBR)i).Attr_Parent_DT_DT_ID == this.Attr_Parent_DT_DT_ID);
            CIMClassS_MBR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_MBR)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassS_DIM> LinkedFromR53()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DIM").Where(i => ((CIMClassS_DIM)i).Attr_DT_ID == this.Attr_Parent_DT_DT_ID && ((CIMClassS_DIM)i).Attr_Member_ID == this.Attr_Member_ID);
            var linked = new List<CIMClassS_DIM>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassS_DIM)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassV_MVL> LinkedFromR836()
        {
            var candidates = repository.GetCIInstances(domainName, "V_MVL").Where(i => ((CIMClassV_MVL)i).Attr_DT_DT_ID == this.Attr_Parent_DT_DT_ID && ((CIMClassV_MVL)i).Attr_Member_ID == this.Attr_Member_ID);
            var linked = new List<CIMClassV_MVL>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_MVL)c);
            }
            return linked;

        }

    }
    public class CIMClassS_RANGEBase : CIMOOAofOOAClass, CIMClassS_RANGE
    {
        public string Attr_DT_ID { get; set; }
        public string Attr_Min { get; set; }
        public string Attr_Max { get; set; }

        public CIMClassS_RANGEBase(CIModelRepository repository, string DT_ID, string Min, string Max ) : base(repository, "S_RANGE")
        {
            Attr_DT_ID = DT_ID;
            Attr_Min = Min;
            Attr_Max = Max;
        }

        public CIMClassS_RANGEBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["DT_ID"], (string)attrArgs["Min"], (string)attrArgs["Max"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassS_UDT LinkedToR57()
        {
            var candidates = repository.GetCIInstances(domainName, "S_UDT").Where(i => ((CIMClassS_UDT)i).Attr_DT_ID == this.Attr_DT_ID);
            CIMClassS_UDT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_UDT)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassS_SDTBase : CIMOOAofOOAClass, CIMClassS_SDT
    {
        public string Attr_DT_ID { get; set; }

        public CIMClassS_SDTBase(CIModelRepository repository, string DT_ID ) : base(repository, "S_SDT")
        {
            Attr_DT_ID = DT_ID;
        }

        public CIMClassS_SDTBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["DT_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public IEnumerable<CIMClassS_MBR> LinkedFromR44()
        {
            var candidates = repository.GetCIInstances(domainName, "S_MBR").Where(i => ((CIMClassS_MBR)i).Attr_Parent_DT_DT_ID == this.Attr_DT_ID);
            var linked = new List<CIMClassS_MBR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassS_MBR)c);
            }
            return linked;

        }

        public CIMClassS_DT CIMSuperClassS_DT()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DT").Where(i => ((CIMClassS_DT)i).Attr_DT_ID == this.Attr_DT_ID);
            CIMClassS_DT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_DT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassS_SPARMBase : CIMOOAofOOAClass, CIMClassS_SPARM
    {
        public string Attr_SParm_ID { get; set; }
        public string Attr_Sync_ID { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_DT_ID { get; set; }
        public int Attr_By_Ref { get; set; }
        public string Attr_Dimensions { get; set; }
        public string Attr_Previous_SParm_ID { get; set; }
        public string Attr_Descrip { get; set; }

        public CIMClassS_SPARMBase(CIModelRepository repository, string SParm_ID, string Sync_ID, string Name, string DT_ID, int By_Ref, string Dimensions, string Previous_SParm_ID, string Descrip ) : base(repository, "S_SPARM")
        {
            Attr_SParm_ID = SParm_ID;
            Attr_Sync_ID = Sync_ID;
            Attr_Name = Name;
            Attr_DT_ID = DT_ID;
            Attr_By_Ref = By_Ref;
            Attr_Dimensions = Dimensions;
            Attr_Previous_SParm_ID = Previous_SParm_ID;
            Attr_Descrip = Descrip;
        }

        public CIMClassS_SPARMBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["SParm_ID"], (string)attrArgs["Sync_ID"], (string)attrArgs["Name"], (string)attrArgs["DT_ID"], (int)attrArgs["By_Ref"], (string)attrArgs["Dimensions"], (string)attrArgs["Previous_SParm_ID"], (string)attrArgs["Descrip"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassS_SYNC LinkedToR24()
        {
            var candidates = repository.GetCIInstances(domainName, "S_SYNC").Where(i => ((CIMClassS_SYNC)i).Attr_Sync_ID == this.Attr_Sync_ID);
            CIMClassS_SYNC linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_SYNC)candidates.First();
            }
            return linked;

        }

        public CIMClassS_DT LinkedToR26()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DT").Where(i => ((CIMClassS_DT)i).Attr_DT_ID == this.Attr_DT_ID);
            CIMClassS_DT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_DT)candidates.First();
            }
            return linked;

        }

        public CIMClassS_SPARM LinkedToR54Precedes()
        {
            var candidates = repository.GetCIInstances(domainName, "S_SPARM").Where(i => ((CIMClassS_SPARM)i).Attr_SParm_ID == this.Attr_Previous_SParm_ID);
            CIMClassS_SPARM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_SPARM)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassMSG_FA> LinkedFromR1016()
        {
            var candidates = repository.GetCIInstances(domainName, "MSG_FA").Where(i => ((CIMClassMSG_FA)i).Attr_SParm_ID == this.Attr_SParm_ID);
            var linked = new List<CIMClassMSG_FA>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassMSG_FA)c);
            }
            return linked;

        }

        public CIMClassTE_PARM LinkedFromR2030()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_PARM").Where(i => ((CIMClassTE_PARM)i).Attr_SParm_ID == this.Attr_SParm_ID);
            CIMClassTE_PARM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_PARM)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassS_DIM> LinkedFromR52()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DIM").Where(i => ((CIMClassS_DIM)i).Attr_SParm_ID == this.Attr_SParm_ID);
            var linked = new List<CIMClassS_DIM>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassS_DIM)c);
            }
            return linked;

        }

        public CIMClassS_SPARM LinkedFromR54Succeeds()
        {
            var candidates = repository.GetCIInstances(domainName, "S_SPARM").Where(i => ((CIMClassS_SPARM)i).Attr_Previous_SParm_ID == this.Attr_SParm_ID);
            CIMClassS_SPARM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_SPARM)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassV_PVL> LinkedFromR832()
        {
            var candidates = repository.GetCIInstances(domainName, "V_PVL").Where(i => ((CIMClassV_PVL)i).Attr_SParm_ID == this.Attr_SParm_ID);
            var linked = new List<CIMClassV_PVL>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_PVL)c);
            }
            return linked;

        }

    }
    public class CIMClassS_SYNCBase : CIMOOAofOOAClass, CIMClassS_SYNC
    {
        public string Attr_Sync_ID { get; set; }
        public string Attr_Dom_IDdeprecated { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }
        public string Attr_Action_Semantics { get; set; }
        public string Attr_DT_ID { get; set; }
        public int Attr_Suc_Pars { get; set; }
        public string Attr_Return_Dimensions { get; set; }
        public int Attr_Dialect { get; set; }
        public int Attr_Numb { get; set; }

        public CIMClassS_SYNCBase(CIModelRepository repository, string Sync_ID, string Dom_IDdeprecated, string Name, string Descrip, string Action_Semantics, string DT_ID, int Suc_Pars, string Return_Dimensions, int Dialect, int Numb ) : base(repository, "S_SYNC")
        {
            Attr_Sync_ID = Sync_ID;
            Attr_Dom_IDdeprecated = Dom_IDdeprecated;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
            Attr_Action_Semantics = Action_Semantics;
            Attr_DT_ID = DT_ID;
            Attr_Suc_Pars = Suc_Pars;
            Attr_Return_Dimensions = Return_Dimensions;
            Attr_Dialect = Dialect;
            Attr_Numb = Numb;
        }

        public CIMClassS_SYNCBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Sync_ID"], (string)attrArgs["Dom_IDdeprecated"], (string)attrArgs["Name"], (string)attrArgs["Descrip"], (string)attrArgs["Action_Semantics"], (string)attrArgs["DT_ID"], (int)attrArgs["Suc_Pars"], (string)attrArgs["Return_Dimensions"], (int)attrArgs["Dialect"], (int)attrArgs["Numb"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassS_DT LinkedToR25()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DT").Where(i => ((CIMClassS_DT)i).Attr_DT_ID == this.Attr_DT_ID);
            CIMClassS_DT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_DT)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassMSG_F> LinkedFromR1010()
        {
            var candidates = repository.GetCIInstances(domainName, "MSG_F").Where(i => ((CIMClassMSG_F)i).Attr_Sync_ID == this.Attr_Sync_ID);
            var linked = new List<CIMClassMSG_F>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassMSG_F)c);
            }
            return linked;

        }

        public CIMClassTE_SYNC LinkedFromR2023()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SYNC").Where(i => ((CIMClassTE_SYNC)i).Attr_Sync_ID == this.Attr_Sync_ID);
            CIMClassTE_SYNC linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SYNC)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassS_SPARM> LinkedFromR24()
        {
            var candidates = repository.GetCIInstances(domainName, "S_SPARM").Where(i => ((CIMClassS_SPARM)i).Attr_Sync_ID == this.Attr_Sync_ID);
            var linked = new List<CIMClassS_SPARM>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassS_SPARM)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassS_DIM> LinkedFromR51()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DIM").Where(i => ((CIMClassS_DIM)i).Attr_Sync_ID == this.Attr_Sync_ID);
            var linked = new List<CIMClassS_DIM>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassS_DIM)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_FNC> LinkedFromR675()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_FNC").Where(i => ((CIMClassACT_FNC)i).Attr_Sync_ID == this.Attr_Sync_ID);
            var linked = new List<CIMClassACT_FNC>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_FNC)c);
            }
            return linked;

        }

        public CIMClassACT_FNB LinkedFromR695()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_FNB").Where(i => ((CIMClassACT_FNB)i).Attr_Sync_ID == this.Attr_Sync_ID);
            CIMClassACT_FNB linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_FNB)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassV_FNV> LinkedFromR827()
        {
            var candidates = repository.GetCIInstances(domainName, "V_FNV").Where(i => ((CIMClassV_FNV)i).Attr_Sync_ID == this.Attr_Sync_ID);
            var linked = new List<CIMClassV_FNV>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_FNV)c);
            }
            return linked;

        }

        public CIMClassPE_PE CIMSuperClassPE_PE()
        {
            var candidates = repository.GetCIInstances(domainName, "PE_PE").Where(i => ((CIMClassPE_PE)i).Attr_Element_ID == this.Attr_Sync_ID);
            CIMClassPE_PE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassPE_PE)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassS_SYSBase : CIMOOAofOOAClass, CIMClassS_SYS
    {
        public string Attr_Sys_ID { get; set; }
        public string Attr_Name { get; set; }
        public bool Attr_useGlobals { get; set; }

        public CIMClassS_SYSBase(CIModelRepository repository, string Sys_ID, string Name, bool useGlobals ) : base(repository, "S_SYS")
        {
            Attr_Sys_ID = Sys_ID;
            Attr_Name = Name;
            Attr_useGlobals = useGlobals;
        }

        public CIMClassS_SYSBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Sys_ID"], (string)attrArgs["Name"], (bool)attrArgs["useGlobals"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public IEnumerable<CIMClassEP_PKG> LinkedFromR1401()
        {
            var candidates = repository.GetCIInstances(domainName, "EP_PKG").Where(i => ((CIMClassEP_PKG)i).Attr_Sys_ID == this.Attr_Sys_ID);
            var linked = new List<CIMClassEP_PKG>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassEP_PKG)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassEP_PKG> LinkedFromR1405()
        {
            var candidates = repository.GetCIInstances(domainName, "EP_PKG").Where(i => ((CIMClassEP_PKG)i).Attr_Direct_Sys_ID == this.Attr_Sys_ID);
            var linked = new List<CIMClassEP_PKG>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassEP_PKG)c);
            }
            return linked;

        }

        public CIMClassTE_SYS LinkedFromR2018()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SYS").Where(i => ((CIMClassTE_SYS)i).Attr_Sys_ID == this.Attr_Sys_ID);
            CIMClassTE_SYS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SYS)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassG_EIS> LinkedOneSideR9100()
        {
            var candidates = repository.GetCIInstances(domainName, "G_EIS").Where(i => ((CIMClassG_EIS)i).Attr_Sys_ID == this.Attr_Sys_ID);
            var linked = new List<CIMClassG_EIS>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassG_EIS)c);
            }
            return linked;

        }
    }
    public class CIMClassS_UDTBase : CIMOOAofOOAClass, CIMClassS_UDT
    {
        public string Attr_DT_ID { get; set; }
        public string Attr_CDT_DT_ID { get; set; }
        public int Attr_Gen_Type { get; set; }
        public string Attr_Definition { get; set; }

        public CIMClassS_UDTBase(CIModelRepository repository, string DT_ID, string CDT_DT_ID, int Gen_Type, string Definition ) : base(repository, "S_UDT")
        {
            Attr_DT_ID = DT_ID;
            Attr_CDT_DT_ID = CDT_DT_ID;
            Attr_Gen_Type = Gen_Type;
            Attr_Definition = Definition;
        }

        public CIMClassS_UDTBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["DT_ID"], (string)attrArgs["CDT_DT_ID"], (int)attrArgs["Gen_Type"], (string)attrArgs["Definition"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassS_DT LinkedToR18()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DT").Where(i => ((CIMClassS_DT)i).Attr_DT_ID == this.Attr_CDT_DT_ID);
            CIMClassS_DT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_DT)candidates.First();
            }
            return linked;

        }

        public CIMClassS_RANGE LinkedFromR57()
        {
            var candidates = repository.GetCIInstances(domainName, "S_RANGE").Where(i => ((CIMClassS_RANGE)i).Attr_DT_ID == this.Attr_DT_ID);
            CIMClassS_RANGE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_RANGE)candidates.First();
            }
            return linked;

        }

        public CIMClassS_DT CIMSuperClassS_DT()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DT").Where(i => ((CIMClassS_DT)i).Attr_DT_ID == this.Attr_DT_ID);
            CIMClassS_DT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_DT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_ABABase : CIMOOAofOOAClass, CIMClassTE_ABA
    {
        public string Attr_AbaID { get; set; }
        public string Attr_subtypeKL { get; set; }
        public string Attr_te_cID { get; set; }
        public int Attr_SelfEventCount { get; set; }
        public int Attr_NonSelfEventCount { get; set; }
        public bool Attr_IsTrace { get; set; }
        public string Attr_ParameterDeclaration { get; set; }
        public string Attr_ParameterDefinition { get; set; }
        public string Attr_ParameterStructure { get; set; }
        public string Attr_ParameterTrace { get; set; }
        public string Attr_ParameterFormat { get; set; }
        public string Attr_ParameterInvocation { get; set; }
        public string Attr_ParameterSMSGinvoke { get; set; }
        public string Attr_ParameterAssignment { get; set; }
        public string Attr_ParameterAssignmentBase { get; set; }
        public string Attr_scope { get; set; }
        public string Attr_GeneratedName { get; set; }
        public string Attr_ReturnDataType { get; set; }
        public int Attr_dimensions { get; set; }
        public string Attr_te_dimID { get; set; }
        public string Attr_array_spec { get; set; }
        public string Attr_code { get; set; }

        public CIMClassTE_ABABase(CIModelRepository repository, string AbaID, string subtypeKL, string te_cID, int SelfEventCount, int NonSelfEventCount, bool IsTrace, string ParameterDeclaration, string ParameterDefinition, string ParameterStructure, string ParameterTrace, string ParameterFormat, string ParameterInvocation, string ParameterSMSGinvoke, string ParameterAssignment, string ParameterAssignmentBase, string scope, string GeneratedName, string ReturnDataType, int dimensions, string te_dimID, string array_spec, string code ) : base(repository, "TE_ABA")
        {
            Attr_AbaID = AbaID;
            Attr_subtypeKL = subtypeKL;
            Attr_te_cID = te_cID;
            Attr_SelfEventCount = SelfEventCount;
            Attr_NonSelfEventCount = NonSelfEventCount;
            Attr_IsTrace = IsTrace;
            Attr_ParameterDeclaration = ParameterDeclaration;
            Attr_ParameterDefinition = ParameterDefinition;
            Attr_ParameterStructure = ParameterStructure;
            Attr_ParameterTrace = ParameterTrace;
            Attr_ParameterFormat = ParameterFormat;
            Attr_ParameterInvocation = ParameterInvocation;
            Attr_ParameterSMSGinvoke = ParameterSMSGinvoke;
            Attr_ParameterAssignment = ParameterAssignment;
            Attr_ParameterAssignmentBase = ParameterAssignmentBase;
            Attr_scope = scope;
            Attr_GeneratedName = GeneratedName;
            Attr_ReturnDataType = ReturnDataType;
            Attr_dimensions = dimensions;
            Attr_te_dimID = te_dimID;
            Attr_array_spec = array_spec;
            Attr_code = code;
        }

        public CIMClassTE_ABABase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["AbaID"], (string)attrArgs["subtypeKL"], (string)attrArgs["te_cID"], (int)attrArgs["SelfEventCount"], (int)attrArgs["NonSelfEventCount"], (bool)attrArgs["IsTrace"], (string)attrArgs["ParameterDeclaration"], (string)attrArgs["ParameterDefinition"], (string)attrArgs["ParameterStructure"], (string)attrArgs["ParameterTrace"], (string)attrArgs["ParameterFormat"], (string)attrArgs["ParameterInvocation"], (string)attrArgs["ParameterSMSGinvoke"], (string)attrArgs["ParameterAssignment"], (string)attrArgs["ParameterAssignmentBase"], (string)attrArgs["scope"], (string)attrArgs["GeneratedName"], (string)attrArgs["ReturnDataType"], (int)attrArgs["dimensions"], (string)attrArgs["te_dimID"], (string)attrArgs["array_spec"], (string)attrArgs["code"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_DIM LinkedToR2058()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_DIM").Where(i => ((CIMClassTE_DIM)i).Attr_te_dimID == this.Attr_te_dimID);
            CIMClassTE_DIM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_DIM)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_C LinkedToR2088()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_C").Where(i => ((CIMClassTE_C)i).Attr_ID == this.Attr_te_cID);
            CIMClassTE_C linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_C)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_BLK LinkedFromR2011()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_BLK").Where(i => ((CIMClassTE_BLK)i).Attr_AbaID == this.Attr_AbaID);
            CIMClassTE_BLK linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_BLK)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassTE_PARM> LinkedFromR2062()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_PARM").Where(i => ((CIMClassTE_PARM)i).Attr_AbaID == this.Attr_AbaID);
            var linked = new List<CIMClassTE_PARM>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassTE_PARM)c);
            }
            return linked;

        }

        public CIMSubClassR2010 SubClassR2010()
        {
            var subClassNames = new List<string>() { "TE_ACT", "TE_SYNC", "TE_TFR", "TE_BRG", "TE_DBATTR", "TE_MACT" };
            CIMSubClassR2010 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR2010)i).CIMSuperClassTE_ABA() != null && (((CIMSubClassR2010)i).CIMSuperClassTE_ABA().Attr_AbaID == this.Attr_AbaID));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR2010)candidates.First();
                    break;
                }
            }
            return subClass;

        }

    }
    public class CIMClassTE_ACTBase : CIMOOAofOOAClass, CIMClassTE_ACT
    {
        public string Attr_AbaID { get; set; }
        public string Attr_GeneratedName { get; set; }
        public int Attr_number { get; set; }
        public string Attr_SM_ID { get; set; }
        public string Attr_Act_ID { get; set; }

        public CIMClassTE_ACTBase(CIModelRepository repository, string AbaID, string GeneratedName, int number, string SM_ID, string Act_ID ) : base(repository, "TE_ACT")
        {
            Attr_AbaID = AbaID;
            Attr_GeneratedName = GeneratedName;
            Attr_number = number;
            Attr_SM_ID = SM_ID;
            Attr_Act_ID = Act_ID;
        }

        public CIMClassTE_ACTBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["AbaID"], (string)attrArgs["GeneratedName"], (int)attrArgs["number"], (string)attrArgs["SM_ID"], (string)attrArgs["Act_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSM_ACT LinkedToR2022()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_ACT").Where(i => ((CIMClassSM_ACT)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_ACT)i).Attr_Act_ID == this.Attr_Act_ID);
            CIMClassSM_ACT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_ACT)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_ABA CIMSuperClassTE_ABA()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_ABA").Where(i => ((CIMClassTE_ABA)i).Attr_AbaID == this.Attr_AbaID);
            CIMClassTE_ABA linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_ABA)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_ASSIGNBase : CIMOOAofOOAClass, CIMClassTE_ASSIGN
    {
        public bool Attr_isImplicit { get; set; }
        public int Attr_dimensions { get; set; }
        public string Attr_array_spec { get; set; }
        public string Attr_left_declaration { get; set; }
        public int Attr_Core_Typ { get; set; }
        public string Attr_lval { get; set; }
        public string Attr_rval { get; set; }
        public string Attr_Statement_ID { get; set; }
        public int Attr_rval_dimensions { get; set; }

        public CIMClassTE_ASSIGNBase(CIModelRepository repository, bool isImplicit, int dimensions, string array_spec, string left_declaration, int Core_Typ, string lval, string rval, string Statement_ID, int rval_dimensions ) : base(repository, "TE_ASSIGN")
        {
            Attr_isImplicit = isImplicit;
            Attr_dimensions = dimensions;
            Attr_array_spec = array_spec;
            Attr_left_declaration = left_declaration;
            Attr_Core_Typ = Core_Typ;
            Attr_lval = lval;
            Attr_rval = rval;
            Attr_Statement_ID = Statement_ID;
            Attr_rval_dimensions = rval_dimensions;
        }

        public CIMClassTE_ASSIGNBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (bool)attrArgs["isImplicit"], (int)attrArgs["dimensions"], (string)attrArgs["array_spec"], (string)attrArgs["left_declaration"], (int)attrArgs["Core_Typ"], (string)attrArgs["lval"], (string)attrArgs["rval"], (string)attrArgs["Statement_ID"], (int)attrArgs["rval_dimensions"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_SMT CIMSuperClassTE_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SMT").Where(i => ((CIMClassTE_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassTE_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_ATTRBase : CIMOOAofOOAClass, CIMClassTE_ATTR
    {
        public string Attr_ID { get; set; }
        public bool Attr_Used { get; set; }
        public bool Attr_read { get; set; }
        public bool Attr_written { get; set; }
        public bool Attr_Included { get; set; }
        public int Attr_Order { get; set; }
        public string Attr_ParamBuffer { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_GeneratedName { get; set; }
        public string Attr_DefaultValue { get; set; }
        public bool Attr_translate { get; set; }
        public int Attr_dimensions { get; set; }
        public string Attr_te_dimID { get; set; }
        public string Attr_array_spec { get; set; }
        public string Attr_te_classGeneratedName { get; set; }
        public string Attr_GeneratedType { get; set; }
        public string Attr_prevID { get; set; }
        public string Attr_Attr_ID { get; set; }
        public string Attr_Obj_ID { get; set; }

        public CIMClassTE_ATTRBase(CIModelRepository repository, string ID, bool Used, bool read, bool written, bool Included, int Order, string ParamBuffer, string Name, string GeneratedName, string DefaultValue, bool translate, int dimensions, string te_dimID, string array_spec, string te_classGeneratedName, string GeneratedType, string prevID, string Attr_ID, string Obj_ID ) : base(repository, "TE_ATTR")
        {
            Attr_ID = ID;
            Attr_Used = Used;
            Attr_read = read;
            Attr_written = written;
            Attr_Included = Included;
            Attr_Order = Order;
            Attr_ParamBuffer = ParamBuffer;
            Attr_Name = Name;
            Attr_GeneratedName = GeneratedName;
            Attr_DefaultValue = DefaultValue;
            Attr_translate = translate;
            Attr_dimensions = dimensions;
            Attr_te_dimID = te_dimID;
            Attr_array_spec = array_spec;
            Attr_te_classGeneratedName = te_classGeneratedName;
            Attr_GeneratedType = GeneratedType;
            Attr_prevID = prevID;
            Attr_Attr_ID = Attr_ID;
            Attr_Obj_ID = Obj_ID;
        }

        public CIMClassTE_ATTRBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["ID"], (bool)attrArgs["Used"], (bool)attrArgs["read"], (bool)attrArgs["written"], (bool)attrArgs["Included"], (int)attrArgs["Order"], (string)attrArgs["ParamBuffer"], (string)attrArgs["Name"], (string)attrArgs["GeneratedName"], (string)attrArgs["DefaultValue"], (bool)attrArgs["translate"], (int)attrArgs["dimensions"], (string)attrArgs["te_dimID"], (string)attrArgs["array_spec"], (string)attrArgs["te_classGeneratedName"], (string)attrArgs["GeneratedType"], (string)attrArgs["prevID"], (string)attrArgs["Attr_ID"], (string)attrArgs["Obj_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassO_ATTR LinkedToR2033()
        {
            var candidates = repository.GetCIInstances(domainName, "O_ATTR").Where(i => ((CIMClassO_ATTR)i).Attr_Attr_ID == this.Attr_Attr_ID && ((CIMClassO_ATTR)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_ATTR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_ATTR)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_DIM LinkedToR2055()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_DIM").Where(i => ((CIMClassTE_DIM)i).Attr_te_dimID == this.Attr_te_dimID);
            CIMClassTE_DIM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_DIM)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_CLASS LinkedToR2061()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_CLASS").Where(i => ((CIMClassTE_CLASS)i).Attr_GeneratedName == this.Attr_te_classGeneratedName);
            CIMClassTE_CLASS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_CLASS)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_ATTR LinkedToR2087Precedes()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_ATTR").Where(i => ((CIMClassTE_ATTR)i).Attr_ID == this.Attr_prevID);
            CIMClassTE_ATTR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_ATTR)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_ATTR LinkedFromR2087Succeeds()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_ATTR").Where(i => ((CIMClassTE_ATTR)i).Attr_prevID == this.Attr_ID);
            CIMClassTE_ATTR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_ATTR)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassTE_BLKBase : CIMOOAofOOAClass, CIMClassTE_BLK
    {
        public string Attr_Block_ID { get; set; }
        public string Attr_first_Statement_ID { get; set; }
        public string Attr_declaration { get; set; }
        public string Attr_deallocation { get; set; }
        public int Attr_depth { get; set; }
        public string Attr_indentation { get; set; }
        public string Attr_AbaID { get; set; }

        public CIMClassTE_BLKBase(CIModelRepository repository, string Block_ID, string first_Statement_ID, string declaration, string deallocation, int depth, string indentation, string AbaID ) : base(repository, "TE_BLK")
        {
            Attr_Block_ID = Block_ID;
            Attr_first_Statement_ID = first_Statement_ID;
            Attr_declaration = declaration;
            Attr_deallocation = deallocation;
            Attr_depth = depth;
            Attr_indentation = indentation;
            Attr_AbaID = AbaID;
        }

        public CIMClassTE_BLKBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Block_ID"], (string)attrArgs["first_Statement_ID"], (string)attrArgs["declaration"], (string)attrArgs["deallocation"], (int)attrArgs["depth"], (string)attrArgs["indentation"], (string)attrArgs["AbaID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_ABA LinkedToR2011()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_ABA").Where(i => ((CIMClassTE_ABA)i).Attr_AbaID == this.Attr_AbaID);
            CIMClassTE_ABA linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_ABA)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_SMT LinkedToR2014()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SMT").Where(i => ((CIMClassTE_SMT)i).Attr_Statement_ID == this.Attr_first_Statement_ID);
            CIMClassTE_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SMT)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_BLK LinkedToR2016()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_BLK").Where(i => ((CIMClassACT_BLK)i).Attr_Block_ID == this.Attr_Block_ID);
            CIMClassACT_BLK linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_BLK)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_SMT LinkedFromR2015()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SMT").Where(i => ((CIMClassTE_SMT)i).Attr_sub_Block_ID == this.Attr_Block_ID);
            CIMClassTE_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SMT)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassTE_SMT> LinkedFromR2078()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SMT").Where(i => ((CIMClassTE_SMT)i).Attr_parent_Block_ID == this.Attr_Block_ID);
            var linked = new List<CIMClassTE_SMT>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassTE_SMT)c);
            }
            return linked;

        }

    }
    public class CIMClassTE_BREAKBase : CIMOOAofOOAClass, CIMClassTE_BREAK
    {
        public string Attr_Statement_ID { get; set; }

        public CIMClassTE_BREAKBase(CIModelRepository repository, string Statement_ID ) : base(repository, "TE_BREAK")
        {
            Attr_Statement_ID = Statement_ID;
        }

        public CIMClassTE_BREAKBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_SMT CIMSuperClassTE_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SMT").Where(i => ((CIMClassTE_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassTE_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_BRGBase : CIMOOAofOOAClass, CIMClassTE_BRG
    {
        public string Attr_EEname { get; set; }
        public string Attr_EEkeyletters { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_GeneratedName { get; set; }
        public string Attr_AbaID { get; set; }
        public string Attr_Brg_ID { get; set; }
        public string Attr_EE_ID { get; set; }

        public CIMClassTE_BRGBase(CIModelRepository repository, string EEname, string EEkeyletters, string Name, string GeneratedName, string AbaID, string Brg_ID, string EE_ID ) : base(repository, "TE_BRG")
        {
            Attr_EEname = EEname;
            Attr_EEkeyletters = EEkeyletters;
            Attr_Name = Name;
            Attr_GeneratedName = GeneratedName;
            Attr_AbaID = AbaID;
            Attr_Brg_ID = Brg_ID;
            Attr_EE_ID = EE_ID;
        }

        public CIMClassTE_BRGBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["EEname"], (string)attrArgs["EEkeyletters"], (string)attrArgs["Name"], (string)attrArgs["GeneratedName"], (string)attrArgs["AbaID"], (string)attrArgs["Brg_ID"], (string)attrArgs["EE_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassS_BRG LinkedToR2025()
        {
            var candidates = repository.GetCIInstances(domainName, "S_BRG").Where(i => ((CIMClassS_BRG)i).Attr_Brg_ID == this.Attr_Brg_ID);
            CIMClassS_BRG linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_BRG)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_EE LinkedToR2089()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_EE").Where(i => ((CIMClassTE_EE)i).Attr_EE_ID == this.Attr_EE_ID);
            CIMClassTE_EE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_EE)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_ABA CIMSuperClassTE_ABA()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_ABA").Where(i => ((CIMClassTE_ABA)i).Attr_AbaID == this.Attr_AbaID);
            CIMClassTE_ABA linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_ABA)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_BRIDGEBase : CIMOOAofOOAClass, CIMClassTE_BRIDGE
    {
        public string Attr_bridge_name { get; set; }
        public string Attr_parameters { get; set; }
        public string Attr_Statement_ID { get; set; }

        public CIMClassTE_BRIDGEBase(CIModelRepository repository, string bridge_name, string parameters, string Statement_ID ) : base(repository, "TE_BRIDGE")
        {
            Attr_bridge_name = bridge_name;
            Attr_parameters = parameters;
            Attr_Statement_ID = Statement_ID;
        }

        public CIMClassTE_BRIDGEBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["bridge_name"], (string)attrArgs["parameters"], (string)attrArgs["Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_SMT CIMSuperClassTE_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SMT").Where(i => ((CIMClassTE_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassTE_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_CBase : CIMOOAofOOAClass, CIMClassTE_C
    {
        public string Attr_ID { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }
        public int Attr_number { get; set; }
        public bool Attr_StateTrace { get; set; }
        public bool Attr_StmtTrace { get; set; }
        public bool Attr_DetectEmpty { get; set; }
        public bool Attr_OptDisabled { get; set; }
        public bool Attr_RawComments { get; set; }
        public bool Attr_CodeComments { get; set; }
        public int Attr_CollectionsFlavor { get; set; }
        public string Attr_classes_file { get; set; }
        public int Attr_MaxObjExtent { get; set; }
        public int Attr_MaxRelExtent { get; set; }
        public int Attr_MaxSelectExtent { get; set; }
        public int Attr_MaxSelfEvents { get; set; }
        public int Attr_MaxNonSelfEvents { get; set; }
        public int Attr_MaxPriorityEvents { get; set; }
        public int Attr_MaxTimers { get; set; }
        public int Attr_InterleavedBridges { get; set; }
        public int Attr_PEIClassCount { get; set; }
        public int Attr_PersistentClassCount { get; set; }
        public string Attr_module_file { get; set; }
        public bool Attr_included_in_build { get; set; }
        public bool Attr_internal_behavior { get; set; }
        public bool Attr_isRealized { get; set; }
        public int Attr_SystemID { get; set; }
        public string Attr_next_ID { get; set; }
        public string Attr_cId { get; set; }
        public string Attr_first_eeID { get; set; }
        public string Attr_first_syncID { get; set; }
        public string Attr_smsg_send { get; set; }
        public string Attr_smsg_recv { get; set; }
        public string Attr_class_strings { get; set; }
        public string Attr_first_te_class_ID { get; set; }

        public CIMClassTE_CBase(CIModelRepository repository, string ID, string Name, string Descrip, int number, bool StateTrace, bool StmtTrace, bool DetectEmpty, bool OptDisabled, bool RawComments, bool CodeComments, int CollectionsFlavor, string classes_file, int MaxObjExtent, int MaxRelExtent, int MaxSelectExtent, int MaxSelfEvents, int MaxNonSelfEvents, int MaxPriorityEvents, int MaxTimers, int InterleavedBridges, int PEIClassCount, int PersistentClassCount, string module_file, bool included_in_build, bool internal_behavior, bool isRealized, int SystemID, string next_ID, string cId, string first_eeID, string first_syncID, string smsg_send, string smsg_recv, string class_strings, string first_te_class_ID ) : base(repository, "TE_C")
        {
            Attr_ID = ID;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
            Attr_number = number;
            Attr_StateTrace = StateTrace;
            Attr_StmtTrace = StmtTrace;
            Attr_DetectEmpty = DetectEmpty;
            Attr_OptDisabled = OptDisabled;
            Attr_RawComments = RawComments;
            Attr_CodeComments = CodeComments;
            Attr_CollectionsFlavor = CollectionsFlavor;
            Attr_classes_file = classes_file;
            Attr_MaxObjExtent = MaxObjExtent;
            Attr_MaxRelExtent = MaxRelExtent;
            Attr_MaxSelectExtent = MaxSelectExtent;
            Attr_MaxSelfEvents = MaxSelfEvents;
            Attr_MaxNonSelfEvents = MaxNonSelfEvents;
            Attr_MaxPriorityEvents = MaxPriorityEvents;
            Attr_MaxTimers = MaxTimers;
            Attr_InterleavedBridges = InterleavedBridges;
            Attr_PEIClassCount = PEIClassCount;
            Attr_PersistentClassCount = PersistentClassCount;
            Attr_module_file = module_file;
            Attr_included_in_build = included_in_build;
            Attr_internal_behavior = internal_behavior;
            Attr_isRealized = isRealized;
            Attr_SystemID = SystemID;
            Attr_next_ID = next_ID;
            Attr_cId = cId;
            Attr_first_eeID = first_eeID;
            Attr_first_syncID = first_syncID;
            Attr_smsg_send = smsg_send;
            Attr_smsg_recv = smsg_recv;
            Attr_class_strings = class_strings;
            Attr_first_te_class_ID = first_te_class_ID;
        }

        public CIMClassTE_CBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["ID"], (string)attrArgs["Name"], (string)attrArgs["Descrip"], (int)attrArgs["number"], (bool)attrArgs["StateTrace"], (bool)attrArgs["StmtTrace"], (bool)attrArgs["DetectEmpty"], (bool)attrArgs["OptDisabled"], (bool)attrArgs["RawComments"], (bool)attrArgs["CodeComments"], (int)attrArgs["CollectionsFlavor"], (string)attrArgs["classes_file"], (int)attrArgs["MaxObjExtent"], (int)attrArgs["MaxRelExtent"], (int)attrArgs["MaxSelectExtent"], (int)attrArgs["MaxSelfEvents"], (int)attrArgs["MaxNonSelfEvents"], (int)attrArgs["MaxPriorityEvents"], (int)attrArgs["MaxTimers"], (int)attrArgs["InterleavedBridges"], (int)attrArgs["PEIClassCount"], (int)attrArgs["PersistentClassCount"], (string)attrArgs["module_file"], (bool)attrArgs["included_in_build"], (bool)attrArgs["internal_behavior"], (bool)attrArgs["isRealized"], (int)attrArgs["SystemID"], (string)attrArgs["next_ID"], (string)attrArgs["cId"], (string)attrArgs["first_eeID"], (string)attrArgs["first_syncID"], (string)attrArgs["smsg_send"], (string)attrArgs["smsg_recv"], (string)attrArgs["class_strings"], (string)attrArgs["first_te_class_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_C LinkedToR2017Succeeds()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_C").Where(i => ((CIMClassTE_C)i).Attr_ID == this.Attr_next_ID);
            CIMClassTE_C linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_C)candidates.First();
            }
            return linked;

        }

        public CIMClassC_C LinkedToR2054()
        {
            var candidates = repository.GetCIInstances(domainName, "C_C").Where(i => ((CIMClassC_C)i).Attr_Id == this.Attr_cId);
            CIMClassC_C linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_C)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_SYS LinkedToR2065()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SYS").Where(i => ((CIMClassTE_SYS)i).Attr_SystemID == this.Attr_SystemID);
            CIMClassTE_SYS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SYS)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_SYNC LinkedToR2097()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SYNC").Where(i => ((CIMClassTE_SYNC)i).Attr_ID == this.Attr_first_syncID);
            CIMClassTE_SYNC linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SYNC)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_EE LinkedToR2098()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_EE").Where(i => ((CIMClassTE_EE)i).Attr_ID == this.Attr_first_eeID);
            CIMClassTE_EE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_EE)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_CLASS LinkedToR2103()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_CLASS").Where(i => ((CIMClassTE_CLASS)i).Attr_ID == this.Attr_first_te_class_ID);
            CIMClassTE_CLASS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_CLASS)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassTE_MACT> LinkedFromR2002()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_MACT").Where(i => ((CIMClassTE_MACT)i).Attr_te_cID == this.Attr_ID);
            var linked = new List<CIMClassTE_MACT>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassTE_MACT)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassTE_PO> LinkedFromR2005()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_PO").Where(i => ((CIMClassTE_PO)i).Attr_te_cID == this.Attr_ID);
            var linked = new List<CIMClassTE_PO>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassTE_PO)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassTE_CI> LinkedFromR2008()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_CI").Where(i => ((CIMClassTE_CI)i).Attr_te_cID == this.Attr_ID);
            var linked = new List<CIMClassTE_CI>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassTE_CI)c);
            }
            return linked;

        }

        public CIMClassTE_C LinkedFromR2017Precedes()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_C").Where(i => ((CIMClassTE_C)i).Attr_next_ID == this.Attr_ID);
            CIMClassTE_C linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_C)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassTE_CLASS> LinkedFromR2064()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_CLASS").Where(i => ((CIMClassTE_CLASS)i).Attr_te_cID == this.Attr_ID);
            var linked = new List<CIMClassTE_CLASS>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassTE_CLASS)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassTE_SYNC> LinkedFromR2084()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SYNC").Where(i => ((CIMClassTE_SYNC)i).Attr_te_cID == this.Attr_ID);
            var linked = new List<CIMClassTE_SYNC>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassTE_SYNC)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassTE_EE> LinkedFromR2085()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_EE").Where(i => ((CIMClassTE_EE)i).Attr_te_cID == this.Attr_ID);
            var linked = new List<CIMClassTE_EE>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassTE_EE)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassTE_DT> LinkedFromR2086()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_DT").Where(i => ((CIMClassTE_DT)i).Attr_te_cID == this.Attr_ID);
            var linked = new List<CIMClassTE_DT>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassTE_DT)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassTE_ABA> LinkedFromR2088()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_ABA").Where(i => ((CIMClassTE_ABA)i).Attr_te_cID == this.Attr_ID);
            var linked = new List<CIMClassTE_ABA>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassTE_ABA)c);
            }
            return linked;

        }

        public CIMClassTE_DCI LinkedFromR2090()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_DCI").Where(i => ((CIMClassTE_DCI)i).Attr_te_cID == this.Attr_ID);
            CIMClassTE_DCI linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_DCI)candidates.First();
            }
            return linked;

        }

        public CIMClassTM_C LinkedFromR2804()
        {
            var candidates = repository.GetCIInstances(domainName, "TM_C").Where(i => ((CIMClassTM_C)i).Attr_te_cID == this.Attr_ID);
            CIMClassTM_C linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTM_C)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassTE_CALLOUTBase : CIMOOAofOOAClass, CIMClassTE_CALLOUT
    {
        public string Attr_file { get; set; }
        public string Attr_initialization { get; set; }
        public string Attr_pre_xtUML_initialization { get; set; }
        public string Attr_post_xtUML_initialization { get; set; }
        public string Attr_background_processing { get; set; }
        public string Attr_event_cant_happen { get; set; }
        public string Attr_pre_shutdown { get; set; }
        public string Attr_post_shutdown { get; set; }
        public string Attr_event_no_instance { get; set; }
        public string Attr_event_free_list_empty { get; set; }
        public string Attr_empty_handle_detected { get; set; }
        public string Attr_object_pool_empty { get; set; }
        public string Attr_node_list_empty { get; set; }
        public string Attr_interleaved_bridge_overflow { get; set; }
        public string Attr_self_event_queue_empty { get; set; }
        public string Attr_non_self_event_queue_empty { get; set; }
        public string Attr_persistence_error { get; set; }

        public CIMClassTE_CALLOUTBase(CIModelRepository repository, string file, string initialization, string pre_xtUML_initialization, string post_xtUML_initialization, string background_processing, string event_cant_happen, string pre_shutdown, string post_shutdown, string event_no_instance, string event_free_list_empty, string empty_handle_detected, string object_pool_empty, string node_list_empty, string interleaved_bridge_overflow, string self_event_queue_empty, string non_self_event_queue_empty, string persistence_error ) : base(repository, "TE_CALLOUT")
        {
            Attr_file = file;
            Attr_initialization = initialization;
            Attr_pre_xtUML_initialization = pre_xtUML_initialization;
            Attr_post_xtUML_initialization = post_xtUML_initialization;
            Attr_background_processing = background_processing;
            Attr_event_cant_happen = event_cant_happen;
            Attr_pre_shutdown = pre_shutdown;
            Attr_post_shutdown = post_shutdown;
            Attr_event_no_instance = event_no_instance;
            Attr_event_free_list_empty = event_free_list_empty;
            Attr_empty_handle_detected = empty_handle_detected;
            Attr_object_pool_empty = object_pool_empty;
            Attr_node_list_empty = node_list_empty;
            Attr_interleaved_bridge_overflow = interleaved_bridge_overflow;
            Attr_self_event_queue_empty = self_event_queue_empty;
            Attr_non_self_event_queue_empty = non_self_event_queue_empty;
            Attr_persistence_error = persistence_error;
        }

        public CIMClassTE_CALLOUTBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["file"], (string)attrArgs["initialization"], (string)attrArgs["pre_xtUML_initialization"], (string)attrArgs["post_xtUML_initialization"], (string)attrArgs["background_processing"], (string)attrArgs["event_cant_happen"], (string)attrArgs["pre_shutdown"], (string)attrArgs["post_shutdown"], (string)attrArgs["event_no_instance"], (string)attrArgs["event_free_list_empty"], (string)attrArgs["empty_handle_detected"], (string)attrArgs["object_pool_empty"], (string)attrArgs["node_list_empty"], (string)attrArgs["interleaved_bridge_overflow"], (string)attrArgs["self_event_queue_empty"], (string)attrArgs["non_self_event_queue_empty"], (string)attrArgs["persistence_error"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

    }
    public class CIMClassTE_CIBase : CIMOOAofOOAClass, CIMClassTE_CI
    {
        public string Attr_ID { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_ClassifierName { get; set; }
        public string Attr_template_parameter_values { get; set; }
        public string Attr_te_cID { get; set; }
        public string Attr_cl_icId { get; set; }

        public CIMClassTE_CIBase(CIModelRepository repository, string ID, string Name, string ClassifierName, string template_parameter_values, string te_cID, string cl_icId ) : base(repository, "TE_CI")
        {
            Attr_ID = ID;
            Attr_Name = Name;
            Attr_ClassifierName = ClassifierName;
            Attr_template_parameter_values = template_parameter_values;
            Attr_te_cID = te_cID;
            Attr_cl_icId = cl_icId;
        }

        public CIMClassTE_CIBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["ID"], (string)attrArgs["Name"], (string)attrArgs["ClassifierName"], (string)attrArgs["template_parameter_values"], (string)attrArgs["te_cID"], (string)attrArgs["cl_icId"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_C LinkedToR2008()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_C").Where(i => ((CIMClassTE_C)i).Attr_ID == this.Attr_te_cID);
            CIMClassTE_C linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_C)candidates.First();
            }
            return linked;

        }

        public CIMClassCL_IC LinkedToR2009()
        {
            var candidates = repository.GetCIInstances(domainName, "CL_IC").Where(i => ((CIMClassCL_IC)i).Attr_Id == this.Attr_cl_icId);
            CIMClassCL_IC linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassCL_IC)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassTM_TPV> LinkedFromR2805()
        {
            var candidates = repository.GetCIInstances(domainName, "TM_TPV").Where(i => ((CIMClassTM_TPV)i).Attr_te_ciID == this.Attr_ID);
            var linked = new List<CIMClassTM_TPV>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassTM_TPV)c);
            }
            return linked;

        }

    }
    public class CIMClassTE_CIABase : CIMOOAofOOAClass, CIMClassTE_CIA
    {
        public string Attr_class_info_name { get; set; }
        public string Attr_class_info_type { get; set; }
        public string Attr_active_count { get; set; }
        public string Attr_class_count { get; set; }
        public string Attr_count_type { get; set; }

        public CIMClassTE_CIABase(CIModelRepository repository, string class_info_name, string class_info_type, string active_count, string class_count, string count_type ) : base(repository, "TE_CIA")
        {
            Attr_class_info_name = class_info_name;
            Attr_class_info_type = class_info_type;
            Attr_active_count = active_count;
            Attr_class_count = class_count;
            Attr_count_type = count_type;
        }

        public CIMClassTE_CIABase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["class_info_name"], (string)attrArgs["class_info_type"], (string)attrArgs["active_count"], (string)attrArgs["class_count"], (string)attrArgs["count_type"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

    }
    public class CIMClassTE_CLASSBase : CIMOOAofOOAClass, CIMClassTE_CLASS
    {
        public string Attr_ID { get; set; }
        public string Attr_Name { get; set; }
        public int Attr_Numb { get; set; }
        public string Attr_Key_Lett { get; set; }
        public string Attr_scope { get; set; }
        public string Attr_GeneratedName { get; set; }
        public string Attr_CBGeneratedName { get; set; }
        public bool Attr_Included { get; set; }
        public bool Attr_PEIsDefinedInData { get; set; }
        public bool Attr_IsFixedPopulation { get; set; }
        public bool Attr_IsReadOnly { get; set; }
        public bool Attr_ExcludeFromGen { get; set; }
        public int Attr_MaxExtentSize { get; set; }
        public bool Attr_SelfCreated { get; set; }
        public bool Attr_NonSelfCreated { get; set; }
        public bool Attr_Persistent { get; set; }
        public int Attr_Order { get; set; }
        public bool Attr_IsTrace { get; set; }
        public int Attr_ContainerIndex { get; set; }
        public int Attr_Task { get; set; }
        public string Attr_class_file { get; set; }
        public string Attr_system_class_number { get; set; }
        public string Attr_CBsystem_class_number { get; set; }
        public string Attr_persist_link { get; set; }
        public string Attr_dispatcher { get; set; }
        public string Attr_CBdispatcher { get; set; }
        public string Attr_attribute_format { get; set; }
        public string Attr_attribute_dump { get; set; }
        public string Attr_te_cID { get; set; }
        public string Attr_Obj_ID { get; set; }
        public string Attr_nextID { get; set; }

        public CIMClassTE_CLASSBase(CIModelRepository repository, string ID, string Name, int Numb, string Key_Lett, string scope, string GeneratedName, string CBGeneratedName, bool Included, bool PEIsDefinedInData, bool IsFixedPopulation, bool IsReadOnly, bool ExcludeFromGen, int MaxExtentSize, bool SelfCreated, bool NonSelfCreated, bool Persistent, int Order, bool IsTrace, int ContainerIndex, int Task, string class_file, string system_class_number, string CBsystem_class_number, string persist_link, string dispatcher, string CBdispatcher, string attribute_format, string attribute_dump, string te_cID, string Obj_ID, string nextID ) : base(repository, "TE_CLASS")
        {
            Attr_ID = ID;
            Attr_Name = Name;
            Attr_Numb = Numb;
            Attr_Key_Lett = Key_Lett;
            Attr_scope = scope;
            Attr_GeneratedName = GeneratedName;
            Attr_CBGeneratedName = CBGeneratedName;
            Attr_Included = Included;
            Attr_PEIsDefinedInData = PEIsDefinedInData;
            Attr_IsFixedPopulation = IsFixedPopulation;
            Attr_IsReadOnly = IsReadOnly;
            Attr_ExcludeFromGen = ExcludeFromGen;
            Attr_MaxExtentSize = MaxExtentSize;
            Attr_SelfCreated = SelfCreated;
            Attr_NonSelfCreated = NonSelfCreated;
            Attr_Persistent = Persistent;
            Attr_Order = Order;
            Attr_IsTrace = IsTrace;
            Attr_ContainerIndex = ContainerIndex;
            Attr_Task = Task;
            Attr_class_file = class_file;
            Attr_system_class_number = system_class_number;
            Attr_CBsystem_class_number = CBsystem_class_number;
            Attr_persist_link = persist_link;
            Attr_dispatcher = dispatcher;
            Attr_CBdispatcher = CBdispatcher;
            Attr_attribute_format = attribute_format;
            Attr_attribute_dump = attribute_dump;
            Attr_te_cID = te_cID;
            Attr_Obj_ID = Obj_ID;
            Attr_nextID = nextID;
        }

        public CIMClassTE_CLASSBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["ID"], (string)attrArgs["Name"], (int)attrArgs["Numb"], (string)attrArgs["Key_Lett"], (string)attrArgs["scope"], (string)attrArgs["GeneratedName"], (string)attrArgs["CBGeneratedName"], (bool)attrArgs["Included"], (bool)attrArgs["PEIsDefinedInData"], (bool)attrArgs["IsFixedPopulation"], (bool)attrArgs["IsReadOnly"], (bool)attrArgs["ExcludeFromGen"], (int)attrArgs["MaxExtentSize"], (bool)attrArgs["SelfCreated"], (bool)attrArgs["NonSelfCreated"], (bool)attrArgs["Persistent"], (int)attrArgs["Order"], (bool)attrArgs["IsTrace"], (int)attrArgs["ContainerIndex"], (int)attrArgs["Task"], (string)attrArgs["class_file"], (string)attrArgs["system_class_number"], (string)attrArgs["CBsystem_class_number"], (string)attrArgs["persist_link"], (string)attrArgs["dispatcher"], (string)attrArgs["CBdispatcher"], (string)attrArgs["attribute_format"], (string)attrArgs["attribute_dump"], (string)attrArgs["te_cID"], (string)attrArgs["Obj_ID"], (string)attrArgs["nextID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassO_OBJ LinkedToR2019()
        {
            var candidates = repository.GetCIInstances(domainName, "O_OBJ").Where(i => ((CIMClassO_OBJ)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_OBJ linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_OBJ)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_C LinkedToR2064()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_C").Where(i => ((CIMClassTE_C)i).Attr_ID == this.Attr_te_cID);
            CIMClassTE_C linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_C)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_CLASS LinkedToR2092Succeeds()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_CLASS").Where(i => ((CIMClassTE_CLASS)i).Attr_ID == this.Attr_nextID);
            CIMClassTE_CLASS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_CLASS)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassTE_SWC> LinkedFromR2001()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SWC").Where(i => ((CIMClassTE_SWC)i).Attr_GeneratedName == this.Attr_GeneratedName);
            var linked = new List<CIMClassTE_SWC>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassTE_SWC)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassTE_ATTR> LinkedFromR2061()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_ATTR").Where(i => ((CIMClassTE_ATTR)i).Attr_te_classGeneratedName == this.Attr_GeneratedName);
            var linked = new List<CIMClassTE_ATTR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassTE_ATTR)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassTE_SM> LinkedFromR2072()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SM").Where(i => ((CIMClassTE_SM)i).Attr_te_classGeneratedName == this.Attr_GeneratedName);
            var linked = new List<CIMClassTE_SM>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassTE_SM)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassTE_LNK> LinkedFromR2076()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_LNK").Where(i => ((CIMClassTE_LNK)i).Attr_te_classGeneratedName == this.Attr_GeneratedName);
            var linked = new List<CIMClassTE_LNK>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassTE_LNK)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassTE_SELECT_RELATED> LinkedFromR2077()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SELECT_RELATED").Where(i => ((CIMClassTE_SELECT_RELATED)i).Attr_te_classGeneratedName == this.Attr_GeneratedName);
            var linked = new List<CIMClassTE_SELECT_RELATED>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassTE_SELECT_RELATED)c);
            }
            return linked;

        }

        public CIMClassTE_CLASS LinkedFromR2092Precedes()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_CLASS").Where(i => ((CIMClassTE_CLASS)i).Attr_nextID == this.Attr_ID);
            CIMClassTE_CLASS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_CLASS)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_C LinkedFromR2103()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_C").Where(i => ((CIMClassTE_C)i).Attr_first_te_class_ID == this.Attr_ID);
            CIMClassTE_C linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_C)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassTE_CONTAINERBase : CIMOOAofOOAClass, CIMClassTE_CONTAINER
    {
        public string Attr_flavor { get; set; }

        public CIMClassTE_CONTAINERBase(CIModelRepository repository, string flavor ) : base(repository, "TE_CONTAINER")
        {
            Attr_flavor = flavor;
        }

        public CIMClassTE_CONTAINERBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["flavor"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMSubClassR2045 SubClassR2045()
        {
            var subClassNames = new List<string>() { "TE_SLIST", "TE_DLIST" };
            CIMSubClassR2045 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR2045)i).CIMSuperClassTE_CONTAINER() != null && (((CIMSubClassR2045)i).CIMSuperClassTE_CONTAINER().Attr_flavor == this.Attr_flavor));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR2045)candidates.First();
                    break;
                }
            }
            return subClass;

        }

    }
    public class CIMClassTE_CONTINUEBase : CIMOOAofOOAClass, CIMClassTE_CONTINUE
    {
        public string Attr_Statement_ID { get; set; }

        public CIMClassTE_CONTINUEBase(CIModelRepository repository, string Statement_ID ) : base(repository, "TE_CONTINUE")
        {
            Attr_Statement_ID = Statement_ID;
        }

        public CIMClassTE_CONTINUEBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_SMT CIMSuperClassTE_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SMT").Where(i => ((CIMClassTE_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassTE_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_CONTROLBase : CIMOOAofOOAClass, CIMClassTE_CONTROL
    {
        public string Attr_Statement_ID { get; set; }

        public CIMClassTE_CONTROLBase(CIModelRepository repository, string Statement_ID ) : base(repository, "TE_CONTROL")
        {
            Attr_Statement_ID = Statement_ID;
        }

        public CIMClassTE_CONTROLBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_SMT CIMSuperClassTE_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SMT").Where(i => ((CIMClassTE_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassTE_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_COPYRIGHTBase : CIMOOAofOOAClass, CIMClassTE_COPYRIGHT
    {
        public string Attr_body { get; set; }

        public CIMClassTE_COPYRIGHTBase(CIModelRepository repository, string body ) : base(repository, "TE_COPYRIGHT")
        {
            Attr_body = body;
        }

        public CIMClassTE_COPYRIGHTBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["body"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

    }
    public class CIMClassTE_CREATE_EVENTBase : CIMOOAofOOAClass, CIMClassTE_CREATE_EVENT
    {
        public string Attr_sm_evt { get; set; }
        public bool Attr_is_implicit { get; set; }
        public string Attr_class_name { get; set; }
        public string Attr_event_meaning { get; set; }
        public string Attr_oal_var_name { get; set; }
        public string Attr_var_name { get; set; }
        public string Attr_recipient_var_name { get; set; }
        public string Attr_parameters { get; set; }
        public string Attr_Statement_ID { get; set; }

        public CIMClassTE_CREATE_EVENTBase(CIModelRepository repository, string sm_evt, bool is_implicit, string class_name, string event_meaning, string oal_var_name, string var_name, string recipient_var_name, string parameters, string Statement_ID ) : base(repository, "TE_CREATE_EVENT")
        {
            Attr_sm_evt = sm_evt;
            Attr_is_implicit = is_implicit;
            Attr_class_name = class_name;
            Attr_event_meaning = event_meaning;
            Attr_oal_var_name = oal_var_name;
            Attr_var_name = var_name;
            Attr_recipient_var_name = recipient_var_name;
            Attr_parameters = parameters;
            Attr_Statement_ID = Statement_ID;
        }

        public CIMClassTE_CREATE_EVENTBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["sm_evt"], (bool)attrArgs["is_implicit"], (string)attrArgs["class_name"], (string)attrArgs["event_meaning"], (string)attrArgs["oal_var_name"], (string)attrArgs["var_name"], (string)attrArgs["recipient_var_name"], (string)attrArgs["parameters"], (string)attrArgs["Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_SMT CIMSuperClassTE_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SMT").Where(i => ((CIMClassTE_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassTE_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_CREATE_INSTANCEBase : CIMOOAofOOAClass, CIMClassTE_CREATE_INSTANCE
    {
        public string Attr_o_obj { get; set; }
        public bool Attr_is_implicit { get; set; }
        public string Attr_class_name { get; set; }
        public string Attr_var_name { get; set; }
        public string Attr_Statement_ID { get; set; }

        public CIMClassTE_CREATE_INSTANCEBase(CIModelRepository repository, string o_obj, bool is_implicit, string class_name, string var_name, string Statement_ID ) : base(repository, "TE_CREATE_INSTANCE")
        {
            Attr_o_obj = o_obj;
            Attr_is_implicit = is_implicit;
            Attr_class_name = class_name;
            Attr_var_name = var_name;
            Attr_Statement_ID = Statement_ID;
        }

        public CIMClassTE_CREATE_INSTANCEBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["o_obj"], (bool)attrArgs["is_implicit"], (string)attrArgs["class_name"], (string)attrArgs["var_name"], (string)attrArgs["Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_SMT CIMSuperClassTE_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SMT").Where(i => ((CIMClassTE_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassTE_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_DBATTRBase : CIMOOAofOOAClass, CIMClassTE_DBATTR
    {
        public bool Attr_Included { get; set; }
        public string Attr_AbaID { get; set; }
        public string Attr_GeneratedName { get; set; }
        public string Attr_Attr_ID { get; set; }
        public string Attr_Obj_ID { get; set; }

        public CIMClassTE_DBATTRBase(CIModelRepository repository, bool Included, string AbaID, string GeneratedName, string Attr_ID, string Obj_ID ) : base(repository, "TE_DBATTR")
        {
            Attr_Included = Included;
            Attr_AbaID = AbaID;
            Attr_GeneratedName = GeneratedName;
            Attr_Attr_ID = Attr_ID;
            Attr_Obj_ID = Obj_ID;
        }

        public CIMClassTE_DBATTRBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (bool)attrArgs["Included"], (string)attrArgs["AbaID"], (string)attrArgs["GeneratedName"], (string)attrArgs["Attr_ID"], (string)attrArgs["Obj_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassO_DBATTR LinkedToR2026()
        {
            var candidates = repository.GetCIInstances(domainName, "O_DBATTR").Where(i => ((CIMClassO_DBATTR)i).Attr_Attr_ID == this.Attr_Attr_ID && ((CIMClassO_DBATTR)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_DBATTR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_DBATTR)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_ABA CIMSuperClassTE_ABA()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_ABA").Where(i => ((CIMClassTE_ABA)i).Attr_AbaID == this.Attr_AbaID);
            CIMClassTE_ABA linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_ABA)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_DCIBase : CIMOOAofOOAClass, CIMClassTE_DCI
    {
        public string Attr_te_cID { get; set; }
        public string Attr_class_numbers { get; set; }
        public string Attr_persist_union { get; set; }
        public string Attr_task_list { get; set; }
        public string Attr_task_numbers { get; set; }
        public string Attr_max { get; set; }
        public string Attr_max_models { get; set; }
        public string Attr_init { get; set; }
        public string Attr_array_name { get; set; }

        public CIMClassTE_DCIBase(CIModelRepository repository, string te_cID, string class_numbers, string persist_union, string task_list, string task_numbers, string max, string max_models, string init, string array_name ) : base(repository, "TE_DCI")
        {
            Attr_te_cID = te_cID;
            Attr_class_numbers = class_numbers;
            Attr_persist_union = persist_union;
            Attr_task_list = task_list;
            Attr_task_numbers = task_numbers;
            Attr_max = max;
            Attr_max_models = max_models;
            Attr_init = init;
            Attr_array_name = array_name;
        }

        public CIMClassTE_DCIBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["te_cID"], (string)attrArgs["class_numbers"], (string)attrArgs["persist_union"], (string)attrArgs["task_list"], (string)attrArgs["task_numbers"], (string)attrArgs["max"], (string)attrArgs["max_models"], (string)attrArgs["init"], (string)attrArgs["array_name"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_C LinkedToR2090()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_C").Where(i => ((CIMClassTE_C)i).Attr_ID == this.Attr_te_cID);
            CIMClassTE_C linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_C)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassTE_DELETE_INSTANCEBase : CIMOOAofOOAClass, CIMClassTE_DELETE_INSTANCE
    {
        public string Attr_o_obj { get; set; }
        public string Attr_var_name { get; set; }
        public int Attr_del_count { get; set; }
        public string Attr_Statement_ID { get; set; }

        public CIMClassTE_DELETE_INSTANCEBase(CIModelRepository repository, string o_obj, string var_name, int del_count, string Statement_ID ) : base(repository, "TE_DELETE_INSTANCE")
        {
            Attr_o_obj = o_obj;
            Attr_var_name = var_name;
            Attr_del_count = del_count;
            Attr_Statement_ID = Statement_ID;
        }

        public CIMClassTE_DELETE_INSTANCEBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["o_obj"], (string)attrArgs["var_name"], (int)attrArgs["del_count"], (string)attrArgs["Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_SMT CIMSuperClassTE_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SMT").Where(i => ((CIMClassTE_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassTE_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_DIMBase : CIMOOAofOOAClass, CIMClassTE_DIM
    {
        public string Attr_te_dimID { get; set; }
        public int Attr_elementCount { get; set; }
        public int Attr_dimensionCount { get; set; }
        public string Attr_next_te_dimID { get; set; }

        public CIMClassTE_DIMBase(CIModelRepository repository, string te_dimID, int elementCount, int dimensionCount, string next_te_dimID ) : base(repository, "TE_DIM")
        {
            Attr_te_dimID = te_dimID;
            Attr_elementCount = elementCount;
            Attr_dimensionCount = dimensionCount;
            Attr_next_te_dimID = next_te_dimID;
        }

        public CIMClassTE_DIMBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["te_dimID"], (int)attrArgs["elementCount"], (int)attrArgs["dimensionCount"], (string)attrArgs["next_te_dimID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_DIM LinkedToR2060Succeeds()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_DIM").Where(i => ((CIMClassTE_DIM)i).Attr_te_dimID == this.Attr_next_te_dimID);
            CIMClassTE_DIM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_DIM)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_ATTR LinkedFromR2055()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_ATTR").Where(i => ((CIMClassTE_ATTR)i).Attr_te_dimID == this.Attr_te_dimID);
            CIMClassTE_ATTR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_ATTR)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassTE_PARM> LinkedFromR2056()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_PARM").Where(i => ((CIMClassTE_PARM)i).Attr_te_dimID == this.Attr_te_dimID);
            var linked = new List<CIMClassTE_PARM>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassTE_PARM)c);
            }
            return linked;

        }

        public CIMClassTE_VAR LinkedFromR2057()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_VAR").Where(i => ((CIMClassTE_VAR)i).Attr_te_dimID == this.Attr_te_dimID);
            CIMClassTE_VAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_VAR)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_ABA LinkedFromR2058()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_ABA").Where(i => ((CIMClassTE_ABA)i).Attr_te_dimID == this.Attr_te_dimID);
            CIMClassTE_ABA linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_ABA)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_MBR LinkedFromR2059()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_MBR").Where(i => ((CIMClassTE_MBR)i).Attr_te_dimID == this.Attr_te_dimID);
            CIMClassTE_MBR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_MBR)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_DIM LinkedFromR2060Precedes()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_DIM").Where(i => ((CIMClassTE_DIM)i).Attr_next_te_dimID == this.Attr_te_dimID);
            CIMClassTE_DIM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_DIM)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassTE_VAL> LinkedFromR2079()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_VAL").Where(i => ((CIMClassTE_VAL)i).Attr_te_dimID == this.Attr_te_dimID);
            var linked = new List<CIMClassTE_VAL>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassTE_VAL)c);
            }
            return linked;

        }

    }
    public class CIMClassTE_DISPBase : CIMOOAofOOAClass, CIMClassTE_DISP
    {
        public int Attr_Dispatcher_ID { get; set; }
        public int Attr_SystemID { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }
        public string Attr_message_id_type { get; set; }
        public string Attr_base_message_type { get; set; }

        public CIMClassTE_DISPBase(CIModelRepository repository, int Dispatcher_ID, int SystemID, string Name, string Descrip, string message_id_type, string base_message_type ) : base(repository, "TE_DISP")
        {
            Attr_Dispatcher_ID = Dispatcher_ID;
            Attr_SystemID = SystemID;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
            Attr_message_id_type = message_id_type;
            Attr_base_message_type = base_message_type;
        }

        public CIMClassTE_DISPBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (int)attrArgs["Dispatcher_ID"], (int)attrArgs["SystemID"], (string)attrArgs["Name"], (string)attrArgs["Descrip"], (string)attrArgs["message_id_type"], (string)attrArgs["base_message_type"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_SYS LinkedToR2003()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SYS").Where(i => ((CIMClassTE_SYS)i).Attr_SystemID == this.Attr_SystemID);
            CIMClassTE_SYS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SYS)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassTE_QUEUE> LinkedFromR2004()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_QUEUE").Where(i => ((CIMClassTE_QUEUE)i).Attr_Dispatcher_ID == this.Attr_Dispatcher_ID);
            var linked = new List<CIMClassTE_QUEUE>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassTE_QUEUE)c);
            }
            return linked;

        }

    }
    public class CIMClassTE_DLISTBase : CIMOOAofOOAClass, CIMClassTE_DLIST
    {
        public string Attr_flavor { get; set; }
        public string Attr_remove_node { get; set; }

        public CIMClassTE_DLISTBase(CIModelRepository repository, string flavor, string remove_node ) : base(repository, "TE_DLIST")
        {
            Attr_flavor = flavor;
            Attr_remove_node = remove_node;
        }

        public CIMClassTE_DLISTBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["flavor"], (string)attrArgs["remove_node"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_CONTAINER CIMSuperClassTE_CONTAINER()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_CONTAINER").Where(i => ((CIMClassTE_CONTAINER)i).Attr_flavor == this.Attr_flavor);
            CIMClassTE_CONTAINER linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_CONTAINER)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_DMABase : CIMOOAofOOAClass, CIMClassTE_DMA
    {
        public string Attr_file { get; set; }
        public string Attr_allocate { get; set; }
        public string Attr_release { get; set; }
        public bool Attr_debugging_heap { get; set; }

        public CIMClassTE_DMABase(CIModelRepository repository, string file, string allocate, string release, bool debugging_heap ) : base(repository, "TE_DMA")
        {
            Attr_file = file;
            Attr_allocate = allocate;
            Attr_release = release;
            Attr_debugging_heap = debugging_heap;
        }

        public CIMClassTE_DMABase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["file"], (string)attrArgs["allocate"], (string)attrArgs["release"], (bool)attrArgs["debugging_heap"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

    }
    public class CIMClassTE_DTBase : CIMOOAofOOAClass, CIMClassTE_DT
    {
        public string Attr_ID { get; set; }
        public string Attr_Name { get; set; }
        public int Attr_Core_Typ { get; set; }
        public bool Attr_Included { get; set; }
        public string Attr_ExtName { get; set; }
        public string Attr_Include_File { get; set; }
        public string Attr_Initial_Value { get; set; }
        public string Attr_Value { get; set; }
        public bool Attr_Is_Enum { get; set; }
        public string Attr_Owning_Dom_Name { get; set; }
        public string Attr_string_format { get; set; }
        public bool Attr_generated { get; set; }
        public string Attr_te_cID { get; set; }
        public string Attr_DT_ID { get; set; }

        public CIMClassTE_DTBase(CIModelRepository repository, string ID, string Name, int Core_Typ, bool Included, string ExtName, string Include_File, string Initial_Value, string Value, bool Is_Enum, string Owning_Dom_Name, string string_format, bool generated, string te_cID, string DT_ID ) : base(repository, "TE_DT")
        {
            Attr_ID = ID;
            Attr_Name = Name;
            Attr_Core_Typ = Core_Typ;
            Attr_Included = Included;
            Attr_ExtName = ExtName;
            Attr_Include_File = Include_File;
            Attr_Initial_Value = Initial_Value;
            Attr_Value = Value;
            Attr_Is_Enum = Is_Enum;
            Attr_Owning_Dom_Name = Owning_Dom_Name;
            Attr_string_format = string_format;
            Attr_generated = generated;
            Attr_te_cID = te_cID;
            Attr_DT_ID = DT_ID;
        }

        public CIMClassTE_DTBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["ID"], (string)attrArgs["Name"], (int)attrArgs["Core_Typ"], (bool)attrArgs["Included"], (string)attrArgs["ExtName"], (string)attrArgs["Include_File"], (string)attrArgs["Initial_Value"], (string)attrArgs["Value"], (bool)attrArgs["Is_Enum"], (string)attrArgs["Owning_Dom_Name"], (string)attrArgs["string_format"], (bool)attrArgs["generated"], (string)attrArgs["te_cID"], (string)attrArgs["DT_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassS_DT LinkedToR2021()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DT").Where(i => ((CIMClassS_DT)i).Attr_DT_ID == this.Attr_DT_ID);
            CIMClassS_DT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_DT)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_C LinkedToR2086()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_C").Where(i => ((CIMClassTE_C)i).Attr_ID == this.Attr_te_cID);
            CIMClassTE_C linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_C)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassTE_PARM> LinkedFromR2049()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_PARM").Where(i => ((CIMClassTE_PARM)i).Attr_te_dtID == this.Attr_ID);
            var linked = new List<CIMClassTE_PARM>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassTE_PARM)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassTE_MBR> LinkedFromR2068()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_MBR").Where(i => ((CIMClassTE_MBR)i).Attr_te_dtID == this.Attr_ID);
            var linked = new List<CIMClassTE_MBR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassTE_MBR)c);
            }
            return linked;

        }

    }
    public class CIMClassTE_EEBase : CIMOOAofOOAClass, CIMClassTE_EE
    {
        public string Attr_Name { get; set; }
        public string Attr_RegisteredName { get; set; }
        public string Attr_Key_Lett { get; set; }
        public string Attr_Descrip { get; set; }
        public bool Attr_Included { get; set; }
        public string Attr_file { get; set; }
        public string Attr_Include_File { get; set; }
        public bool Attr_Used { get; set; }
        public string Attr_te_cID { get; set; }
        public string Attr_EE_ID { get; set; }
        public string Attr_ID { get; set; }
        public string Attr_nextID { get; set; }

        public CIMClassTE_EEBase(CIModelRepository repository, string Name, string RegisteredName, string Key_Lett, string Descrip, bool Included, string file, string Include_File, bool Used, string te_cID, string EE_ID, string ID, string nextID ) : base(repository, "TE_EE")
        {
            Attr_Name = Name;
            Attr_RegisteredName = RegisteredName;
            Attr_Key_Lett = Key_Lett;
            Attr_Descrip = Descrip;
            Attr_Included = Included;
            Attr_file = file;
            Attr_Include_File = Include_File;
            Attr_Used = Used;
            Attr_te_cID = te_cID;
            Attr_EE_ID = EE_ID;
            Attr_ID = ID;
            Attr_nextID = nextID;
        }

        public CIMClassTE_EEBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Name"], (string)attrArgs["RegisteredName"], (string)attrArgs["Key_Lett"], (string)attrArgs["Descrip"], (bool)attrArgs["Included"], (string)attrArgs["file"], (string)attrArgs["Include_File"], (bool)attrArgs["Used"], (string)attrArgs["te_cID"], (string)attrArgs["EE_ID"], (string)attrArgs["ID"], (string)attrArgs["nextID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassS_EE LinkedToR2020()
        {
            var candidates = repository.GetCIInstances(domainName, "S_EE").Where(i => ((CIMClassS_EE)i).Attr_EE_ID == this.Attr_EE_ID);
            CIMClassS_EE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_EE)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_C LinkedToR2085()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_C").Where(i => ((CIMClassTE_C)i).Attr_ID == this.Attr_te_cID);
            CIMClassTE_C linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_C)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_EE LinkedToR2096Succeeds()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_EE").Where(i => ((CIMClassTE_EE)i).Attr_ID == this.Attr_nextID);
            CIMClassTE_EE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_EE)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassTE_BRG> LinkedFromR2089()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_BRG").Where(i => ((CIMClassTE_BRG)i).Attr_EE_ID == this.Attr_EE_ID);
            var linked = new List<CIMClassTE_BRG>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassTE_BRG)c);
            }
            return linked;

        }

        public CIMClassTE_EE LinkedFromR2096Precedes()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_EE").Where(i => ((CIMClassTE_EE)i).Attr_nextID == this.Attr_ID);
            CIMClassTE_EE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_EE)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_C LinkedFromR2098()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_C").Where(i => ((CIMClassTE_C)i).Attr_first_eeID == this.Attr_ID);
            CIMClassTE_C linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_C)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassTE_ELIFBase : CIMOOAofOOAClass, CIMClassTE_ELIF
    {
        public string Attr_condition { get; set; }
        public string Attr_Statement_ID { get; set; }

        public CIMClassTE_ELIFBase(CIModelRepository repository, string condition, string Statement_ID ) : base(repository, "TE_ELIF")
        {
            Attr_condition = condition;
            Attr_Statement_ID = Statement_ID;
        }

        public CIMClassTE_ELIFBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["condition"], (string)attrArgs["Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_SMT CIMSuperClassTE_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SMT").Where(i => ((CIMClassTE_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassTE_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_ELSEBase : CIMOOAofOOAClass, CIMClassTE_ELSE
    {
        public string Attr_Statement_ID { get; set; }

        public CIMClassTE_ELSEBase(CIModelRepository repository, string Statement_ID ) : base(repository, "TE_ELSE")
        {
            Attr_Statement_ID = Statement_ID;
        }

        public CIMClassTE_ELSEBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_SMT CIMSuperClassTE_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SMT").Where(i => ((CIMClassTE_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassTE_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_ENUMBase : CIMOOAofOOAClass, CIMClassTE_ENUM
    {
        public string Attr_Name { get; set; }
        public string Attr_Value { get; set; }
        public int Attr_Order { get; set; }
        public string Attr_GeneratedName { get; set; }
        public string Attr_Enum_ID { get; set; }

        public CIMClassTE_ENUMBase(CIModelRepository repository, string Name, string Value, int Order, string GeneratedName, string Enum_ID ) : base(repository, "TE_ENUM")
        {
            Attr_Name = Name;
            Attr_Value = Value;
            Attr_Order = Order;
            Attr_GeneratedName = GeneratedName;
            Attr_Enum_ID = Enum_ID;
        }

        public CIMClassTE_ENUMBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Name"], (string)attrArgs["Value"], (int)attrArgs["Order"], (string)attrArgs["GeneratedName"], (string)attrArgs["Enum_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassS_ENUM LinkedToR2027()
        {
            var candidates = repository.GetCIInstances(domainName, "S_ENUM").Where(i => ((CIMClassS_ENUM)i).Attr_Enum_ID == this.Attr_Enum_ID);
            CIMClassS_ENUM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_ENUM)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassTE_EQBase : CIMOOAofOOAClass, CIMClassTE_EQ
    {
        public string Attr_ignored { get; set; }
        public string Attr_cant_happen { get; set; }
        public string Attr_system_events_union { get; set; }
        public string Attr_system_event_pool { get; set; }
        public string Attr_constant_type { get; set; }
        public string Attr_base_event_type { get; set; }
        public string Attr_base_variable { get; set; }
        public string Attr_max_events { get; set; }
        public string Attr_max_self_events { get; set; }
        public string Attr_max_nonself_events { get; set; }
        public string Attr_new { get; set; }
        public string Attr_allocate { get; set; }
        public string Attr_delete { get; set; }
        public string Attr_modify { get; set; }
        public string Attr_self { get; set; }
        public string Attr_non_self { get; set; }
        public string Attr_search_and_destroy { get; set; }
        public string Attr_run_flag { get; set; }
        public string Attr_event_message_variable { get; set; }
        public string Attr_scope { get; set; }

        public CIMClassTE_EQBase(CIModelRepository repository, string ignored, string cant_happen, string system_events_union, string system_event_pool, string constant_type, string base_event_type, string base_variable, string max_events, string max_self_events, string max_nonself_events, string new_, string allocate, string delete, string modify, string self, string non_self, string search_and_destroy, string run_flag, string event_message_variable, string scope ) : base(repository, "TE_EQ")
        {
            Attr_ignored = ignored;
            Attr_cant_happen = cant_happen;
            Attr_system_events_union = system_events_union;
            Attr_system_event_pool = system_event_pool;
            Attr_constant_type = constant_type;
            Attr_base_event_type = base_event_type;
            Attr_base_variable = base_variable;
            Attr_max_events = max_events;
            Attr_max_self_events = max_self_events;
            Attr_max_nonself_events = max_nonself_events;
            Attr_new = new_;
            Attr_allocate = allocate;
            Attr_delete = delete;
            Attr_modify = modify;
            Attr_self = self;
            Attr_non_self = non_self;
            Attr_search_and_destroy = search_and_destroy;
            Attr_run_flag = run_flag;
            Attr_event_message_variable = event_message_variable;
            Attr_scope = scope;
        }

        public CIMClassTE_EQBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["ignored"], (string)attrArgs["cant_happen"], (string)attrArgs["system_events_union"], (string)attrArgs["system_event_pool"], (string)attrArgs["constant_type"], (string)attrArgs["base_event_type"], (string)attrArgs["base_variable"], (string)attrArgs["max_events"], (string)attrArgs["max_self_events"], (string)attrArgs["max_nonself_events"], (string)attrArgs["new"], (string)attrArgs["allocate"], (string)attrArgs["delete"], (string)attrArgs["modify"], (string)attrArgs["self"], (string)attrArgs["non_self"], (string)attrArgs["search_and_destroy"], (string)attrArgs["run_flag"], (string)attrArgs["event_message_variable"], (string)attrArgs["scope"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

    }
    public class CIMClassTE_EVENT_PARAMETERSBase : CIMOOAofOOAClass, CIMClassTE_EVENT_PARAMETERS
    {
        public string Attr_evt_msg_var { get; set; }
        public string Attr_parameter { get; set; }
        public string Attr_value { get; set; }
        public string Attr_value_type { get; set; }
        public string Attr_Statement_ID { get; set; }

        public CIMClassTE_EVENT_PARAMETERSBase(CIModelRepository repository, string evt_msg_var, string parameter, string value, string value_type, string Statement_ID ) : base(repository, "TE_EVENT_PARAMETERS")
        {
            Attr_evt_msg_var = evt_msg_var;
            Attr_parameter = parameter;
            Attr_value = value;
            Attr_value_type = value_type;
            Attr_Statement_ID = Statement_ID;
        }

        public CIMClassTE_EVENT_PARAMETERSBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["evt_msg_var"], (string)attrArgs["parameter"], (string)attrArgs["value"], (string)attrArgs["value_type"], (string)attrArgs["Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_SMT CIMSuperClassTE_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SMT").Where(i => ((CIMClassTE_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassTE_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_EVTBase : CIMOOAofOOAClass, CIMClassTE_EVT
    {
        public string Attr_ID { get; set; }
        public string Attr_Name { get; set; }
        public int Attr_Numb { get; set; }
        public string Attr_GeneratedName { get; set; }
        public string Attr_Enumerator { get; set; }
        public int Attr_Order { get; set; }
        public bool Attr_Used { get; set; }
        public int Attr_UsedCount { get; set; }
        public int Attr_Priority { get; set; }
        public string Attr_SM_ID { get; set; }
        public string Attr_SMevt_ID { get; set; }
        public string Attr_te_smID { get; set; }
        public string Attr_next_ID { get; set; }

        public CIMClassTE_EVTBase(CIModelRepository repository, string ID, string Name, int Numb, string GeneratedName, string Enumerator, int Order, bool Used, int UsedCount, int Priority, string SM_ID, string SMevt_ID, string te_smID, string next_ID ) : base(repository, "TE_EVT")
        {
            Attr_ID = ID;
            Attr_Name = Name;
            Attr_Numb = Numb;
            Attr_GeneratedName = GeneratedName;
            Attr_Enumerator = Enumerator;
            Attr_Order = Order;
            Attr_Used = Used;
            Attr_UsedCount = UsedCount;
            Attr_Priority = Priority;
            Attr_SM_ID = SM_ID;
            Attr_SMevt_ID = SMevt_ID;
            Attr_te_smID = te_smID;
            Attr_next_ID = next_ID;
        }

        public CIMClassTE_EVTBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["ID"], (string)attrArgs["Name"], (int)attrArgs["Numb"], (string)attrArgs["GeneratedName"], (string)attrArgs["Enumerator"], (int)attrArgs["Order"], (bool)attrArgs["Used"], (int)attrArgs["UsedCount"], (int)attrArgs["Priority"], (string)attrArgs["SM_ID"], (string)attrArgs["SMevt_ID"], (string)attrArgs["te_smID"], (string)attrArgs["next_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSM_EVT LinkedToR2036()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_EVT").Where(i => ((CIMClassSM_EVT)i).Attr_SMevt_ID == this.Attr_SMevt_ID);
            CIMClassSM_EVT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_EVT)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_SM LinkedToR2071()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SM").Where(i => ((CIMClassTE_SM)i).Attr_ID == this.Attr_te_smID);
            CIMClassTE_SM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SM)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_EVT LinkedToR2102Succeeds()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_EVT").Where(i => ((CIMClassTE_EVT)i).Attr_ID == this.Attr_next_ID);
            CIMClassTE_EVT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_EVT)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassTE_MACT> LinkedFromR2082()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_MACT").Where(i => ((CIMClassTE_MACT)i).Attr_te_evtID == this.Attr_ID);
            var linked = new List<CIMClassTE_MACT>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassTE_MACT)c);
            }
            return linked;

        }

        public CIMClassTE_EVT LinkedFromR2102Precedes()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_EVT").Where(i => ((CIMClassTE_EVT)i).Attr_next_ID == this.Attr_ID);
            CIMClassTE_EVT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_EVT)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_SM LinkedFromR2104()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SM").Where(i => ((CIMClassTE_SM)i).Attr_first_te_evt_ID == this.Attr_ID);
            CIMClassTE_SM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SM)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassTE_EXTENTBase : CIMOOAofOOAClass, CIMClassTE_EXTENT
    {
        public string Attr_sets_type { get; set; }
        public string Attr_type { get; set; }
        public string Attr_active { get; set; }
        public string Attr_inactive { get; set; }
        public string Attr_initializer { get; set; }
        public string Attr_size_type { get; set; }
        public string Attr_size_name { get; set; }
        public string Attr_istate_type { get; set; }
        public string Attr_istate_name { get; set; }
        public string Attr_container_type { get; set; }
        public string Attr_container_name { get; set; }
        public string Attr_pool_type { get; set; }
        public string Attr_pool_name { get; set; }
        public string Attr_population_type { get; set; }
        public string Attr_population_name { get; set; }
        public string Attr_rstorsize_type { get; set; }
        public string Attr_rstorsize_name { get; set; }
        public string Attr_linkfunc_name { get; set; }

        public CIMClassTE_EXTENTBase(CIModelRepository repository, string sets_type, string type, string active, string inactive, string initializer, string size_type, string size_name, string istate_type, string istate_name, string container_type, string container_name, string pool_type, string pool_name, string population_type, string population_name, string rstorsize_type, string rstorsize_name, string linkfunc_name ) : base(repository, "TE_EXTENT")
        {
            Attr_sets_type = sets_type;
            Attr_type = type;
            Attr_active = active;
            Attr_inactive = inactive;
            Attr_initializer = initializer;
            Attr_size_type = size_type;
            Attr_size_name = size_name;
            Attr_istate_type = istate_type;
            Attr_istate_name = istate_name;
            Attr_container_type = container_type;
            Attr_container_name = container_name;
            Attr_pool_type = pool_type;
            Attr_pool_name = pool_name;
            Attr_population_type = population_type;
            Attr_population_name = population_name;
            Attr_rstorsize_type = rstorsize_type;
            Attr_rstorsize_name = rstorsize_name;
            Attr_linkfunc_name = linkfunc_name;
        }

        public CIMClassTE_EXTENTBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["sets_type"], (string)attrArgs["type"], (string)attrArgs["active"], (string)attrArgs["inactive"], (string)attrArgs["initializer"], (string)attrArgs["size_type"], (string)attrArgs["size_name"], (string)attrArgs["istate_type"], (string)attrArgs["istate_name"], (string)attrArgs["container_type"], (string)attrArgs["container_name"], (string)attrArgs["pool_type"], (string)attrArgs["pool_name"], (string)attrArgs["population_type"], (string)attrArgs["population_name"], (string)attrArgs["rstorsize_type"], (string)attrArgs["rstorsize_name"], (string)attrArgs["linkfunc_name"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

         public CIMClassTE_SET LinkedOneSideR2066()
         {
            var candidates = repository.GetCIInstances(domainName, "TE_SET");
            CIMClassTE_SET linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SET)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_INSTANCE LinkedOtherSideR2066()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_INSTANCE");
            CIMClassTE_INSTANCE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_INSTANCE)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassTE_FILEBase : CIMOOAofOOAClass, CIMClassTE_FILE
    {
        public string Attr_hdr_file_ext { get; set; }
        public string Attr_src_file_ext { get; set; }
        public string Attr_obj_file_ext { get; set; }
        public string Attr_sys_main { get; set; }
        public string Attr_factory { get; set; }
        public string Attr_events { get; set; }
        public string Attr_nvs { get; set; }
        public string Attr_nvs_bridge { get; set; }
        public string Attr_sets { get; set; }
        public string Attr_types { get; set; }
        public string Attr_thread { get; set; }
        public string Attr_trace { get; set; }
        public string Attr_tim { get; set; }
        public string Attr_callout { get; set; }
        public string Attr_ilb { get; set; }
        public string Attr_persist { get; set; }
        public string Attr_xtumlload { get; set; }
        public string Attr_interfaces { get; set; }
        public string Attr_registers { get; set; }
        public string Attr_domain_color_path { get; set; }
        public string Attr_domain_source_path { get; set; }
        public string Attr_domain_include_path { get; set; }
        public string Attr_system_source_path { get; set; }
        public string Attr_system_include_path { get; set; }
        public string Attr_system_color_path { get; set; }
        public string Attr_bridge_mark { get; set; }
        public string Attr_system_mark { get; set; }
        public string Attr_datatype_mark { get; set; }
        public string Attr_event_mark { get; set; }
        public string Attr_class_mark { get; set; }
        public string Attr_domain_mark { get; set; }
        public string Attr_system_functions_mark { get; set; }
        public string Attr_arc_path { get; set; }
        public string Attr_root_path { get; set; }

        public CIMClassTE_FILEBase(CIModelRepository repository, string hdr_file_ext, string src_file_ext, string obj_file_ext, string sys_main, string factory, string events, string nvs, string nvs_bridge, string sets, string types, string thread, string trace, string tim, string callout, string ilb, string persist, string xtumlload, string interfaces, string registers, string domain_color_path, string domain_source_path, string domain_include_path, string system_source_path, string system_include_path, string system_color_path, string bridge_mark, string system_mark, string datatype_mark, string event_mark, string class_mark, string domain_mark, string system_functions_mark, string arc_path, string root_path ) : base(repository, "TE_FILE")
        {
            Attr_hdr_file_ext = hdr_file_ext;
            Attr_src_file_ext = src_file_ext;
            Attr_obj_file_ext = obj_file_ext;
            Attr_sys_main = sys_main;
            Attr_factory = factory;
            Attr_events = events;
            Attr_nvs = nvs;
            Attr_nvs_bridge = nvs_bridge;
            Attr_sets = sets;
            Attr_types = types;
            Attr_thread = thread;
            Attr_trace = trace;
            Attr_tim = tim;
            Attr_callout = callout;
            Attr_ilb = ilb;
            Attr_persist = persist;
            Attr_xtumlload = xtumlload;
            Attr_interfaces = interfaces;
            Attr_registers = registers;
            Attr_domain_color_path = domain_color_path;
            Attr_domain_source_path = domain_source_path;
            Attr_domain_include_path = domain_include_path;
            Attr_system_source_path = system_source_path;
            Attr_system_include_path = system_include_path;
            Attr_system_color_path = system_color_path;
            Attr_bridge_mark = bridge_mark;
            Attr_system_mark = system_mark;
            Attr_datatype_mark = datatype_mark;
            Attr_event_mark = event_mark;
            Attr_class_mark = class_mark;
            Attr_domain_mark = domain_mark;
            Attr_system_functions_mark = system_functions_mark;
            Attr_arc_path = arc_path;
            Attr_root_path = root_path;
        }

        public CIMClassTE_FILEBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["hdr_file_ext"], (string)attrArgs["src_file_ext"], (string)attrArgs["obj_file_ext"], (string)attrArgs["sys_main"], (string)attrArgs["factory"], (string)attrArgs["events"], (string)attrArgs["nvs"], (string)attrArgs["nvs_bridge"], (string)attrArgs["sets"], (string)attrArgs["types"], (string)attrArgs["thread"], (string)attrArgs["trace"], (string)attrArgs["tim"], (string)attrArgs["callout"], (string)attrArgs["ilb"], (string)attrArgs["persist"], (string)attrArgs["xtumlload"], (string)attrArgs["interfaces"], (string)attrArgs["registers"], (string)attrArgs["domain_color_path"], (string)attrArgs["domain_source_path"], (string)attrArgs["domain_include_path"], (string)attrArgs["system_source_path"], (string)attrArgs["system_include_path"], (string)attrArgs["system_color_path"], (string)attrArgs["bridge_mark"], (string)attrArgs["system_mark"], (string)attrArgs["datatype_mark"], (string)attrArgs["event_mark"], (string)attrArgs["class_mark"], (string)attrArgs["domain_mark"], (string)attrArgs["system_functions_mark"], (string)attrArgs["arc_path"], (string)attrArgs["root_path"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

    }
    public class CIMClassTE_FORBase : CIMOOAofOOAClass, CIMClassTE_FOR
    {
        public bool Attr_isImplicit { get; set; }
        public string Attr_class_name { get; set; }
        public string Attr_loop_variable { get; set; }
        public string Attr_set_variable { get; set; }
        public string Attr_Statement_ID { get; set; }

        public CIMClassTE_FORBase(CIModelRepository repository, bool isImplicit, string class_name, string loop_variable, string set_variable, string Statement_ID ) : base(repository, "TE_FOR")
        {
            Attr_isImplicit = isImplicit;
            Attr_class_name = class_name;
            Attr_loop_variable = loop_variable;
            Attr_set_variable = set_variable;
            Attr_Statement_ID = Statement_ID;
        }

        public CIMClassTE_FORBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (bool)attrArgs["isImplicit"], (string)attrArgs["class_name"], (string)attrArgs["loop_variable"], (string)attrArgs["set_variable"], (string)attrArgs["Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_SMT CIMSuperClassTE_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SMT").Where(i => ((CIMClassTE_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassTE_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_FUNCTIONBase : CIMOOAofOOAClass, CIMClassTE_FUNCTION
    {
        public string Attr_method { get; set; }
        public string Attr_parameters { get; set; }
        public string Attr_Statement_ID { get; set; }

        public CIMClassTE_FUNCTIONBase(CIModelRepository repository, string method, string parameters, string Statement_ID ) : base(repository, "TE_FUNCTION")
        {
            Attr_method = method;
            Attr_parameters = parameters;
            Attr_Statement_ID = Statement_ID;
        }

        public CIMClassTE_FUNCTIONBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["method"], (string)attrArgs["parameters"], (string)attrArgs["Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_SMT CIMSuperClassTE_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SMT").Where(i => ((CIMClassTE_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassTE_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_GENERATEBase : CIMOOAofOOAClass, CIMClassTE_GENERATE
    {
        public string Attr_sm_evt { get; set; }
        public bool Attr_self_directed { get; set; }
        public string Attr_var_name { get; set; }
        public string Attr_event_label { get; set; }
        public string Attr_event_meaning { get; set; }
        public string Attr_parameters { get; set; }
        public string Attr_Statement_ID { get; set; }

        public CIMClassTE_GENERATEBase(CIModelRepository repository, string sm_evt, bool self_directed, string var_name, string event_label, string event_meaning, string parameters, string Statement_ID ) : base(repository, "TE_GENERATE")
        {
            Attr_sm_evt = sm_evt;
            Attr_self_directed = self_directed;
            Attr_var_name = var_name;
            Attr_event_label = event_label;
            Attr_event_meaning = event_meaning;
            Attr_parameters = parameters;
            Attr_Statement_ID = Statement_ID;
        }

        public CIMClassTE_GENERATEBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["sm_evt"], (bool)attrArgs["self_directed"], (string)attrArgs["var_name"], (string)attrArgs["event_label"], (string)attrArgs["event_meaning"], (string)attrArgs["parameters"], (string)attrArgs["Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_SMT CIMSuperClassTE_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SMT").Where(i => ((CIMClassTE_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassTE_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_GENERATE_CREATOR_EVENTBase : CIMOOAofOOAClass, CIMClassTE_GENERATE_CREATOR_EVENT
    {
        public string Attr_sm_evt { get; set; }
        public bool Attr_self_directed { get; set; }
        public string Attr_var_name { get; set; }
        public string Attr_event_label { get; set; }
        public string Attr_event_meaning { get; set; }
        public string Attr_parameters { get; set; }
        public string Attr_Statement_ID { get; set; }

        public CIMClassTE_GENERATE_CREATOR_EVENTBase(CIModelRepository repository, string sm_evt, bool self_directed, string var_name, string event_label, string event_meaning, string parameters, string Statement_ID ) : base(repository, "TE_GENERATE_CREATOR_EVENT")
        {
            Attr_sm_evt = sm_evt;
            Attr_self_directed = self_directed;
            Attr_var_name = var_name;
            Attr_event_label = event_label;
            Attr_event_meaning = event_meaning;
            Attr_parameters = parameters;
            Attr_Statement_ID = Statement_ID;
        }

        public CIMClassTE_GENERATE_CREATOR_EVENTBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["sm_evt"], (bool)attrArgs["self_directed"], (string)attrArgs["var_name"], (string)attrArgs["event_label"], (string)attrArgs["event_meaning"], (string)attrArgs["parameters"], (string)attrArgs["Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_SMT CIMSuperClassTE_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SMT").Where(i => ((CIMClassTE_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassTE_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_GENERATE_PRECREATED_EVENTBase : CIMOOAofOOAClass, CIMClassTE_GENERATE_PRECREATED_EVENT
    {
        public bool Attr_self_directed { get; set; }
        public string Attr_var_name { get; set; }
        public string Attr_Statement_ID { get; set; }

        public CIMClassTE_GENERATE_PRECREATED_EVENTBase(CIModelRepository repository, bool self_directed, string var_name, string Statement_ID ) : base(repository, "TE_GENERATE_PRECREATED_EVENT")
        {
            Attr_self_directed = self_directed;
            Attr_var_name = var_name;
            Attr_Statement_ID = Statement_ID;
        }

        public CIMClassTE_GENERATE_PRECREATED_EVENTBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (bool)attrArgs["self_directed"], (string)attrArgs["var_name"], (string)attrArgs["Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_SMT CIMSuperClassTE_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SMT").Where(i => ((CIMClassTE_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassTE_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_GENERATE_TO_CLASSBase : CIMOOAofOOAClass, CIMClassTE_GENERATE_TO_CLASS
    {
        public string Attr_sm_evt { get; set; }
        public bool Attr_self_directed { get; set; }
        public string Attr_var_name { get; set; }
        public string Attr_event_label { get; set; }
        public string Attr_even_meaning { get; set; }
        public string Attr_parameters { get; set; }
        public string Attr_Statement_ID { get; set; }

        public CIMClassTE_GENERATE_TO_CLASSBase(CIModelRepository repository, string sm_evt, bool self_directed, string var_name, string event_label, string even_meaning, string parameters, string Statement_ID ) : base(repository, "TE_GENERATE_TO_CLASS")
        {
            Attr_sm_evt = sm_evt;
            Attr_self_directed = self_directed;
            Attr_var_name = var_name;
            Attr_event_label = event_label;
            Attr_even_meaning = even_meaning;
            Attr_parameters = parameters;
            Attr_Statement_ID = Statement_ID;
        }

        public CIMClassTE_GENERATE_TO_CLASSBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["sm_evt"], (bool)attrArgs["self_directed"], (string)attrArgs["var_name"], (string)attrArgs["event_label"], (string)attrArgs["even_meaning"], (string)attrArgs["parameters"], (string)attrArgs["Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_SMT CIMSuperClassTE_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SMT").Where(i => ((CIMClassTE_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassTE_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_IFBase : CIMOOAofOOAClass, CIMClassTE_IF
    {
        public string Attr_condition { get; set; }
        public string Attr_Statement_ID { get; set; }

        public CIMClassTE_IFBase(CIModelRepository repository, string condition, string Statement_ID ) : base(repository, "TE_IF")
        {
            Attr_condition = condition;
            Attr_Statement_ID = Statement_ID;
        }

        public CIMClassTE_IFBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["condition"], (string)attrArgs["Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_SMT CIMSuperClassTE_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SMT").Where(i => ((CIMClassTE_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassTE_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_IIRBase : CIMOOAofOOAClass, CIMClassTE_IIR
    {
        public string Attr_ID { get; set; }
        public string Attr_component_name { get; set; }
        public string Attr_port_name { get; set; }
        public string Attr_interface_name { get; set; }
        public bool Attr_polymorphic { get; set; }
        public string Attr_template_parameter_values { get; set; }
        public string Attr_C2C { get; set; }
        public string Attr_cl_iirId { get; set; }
        public string Attr_c_irId { get; set; }
        public string Attr_te_poID { get; set; }
        public string Attr_provider_te_iirID { get; set; }

        public CIMClassTE_IIRBase(CIModelRepository repository, string ID, string component_name, string port_name, string interface_name, bool polymorphic, string template_parameter_values, string C2C, string cl_iirId, string c_irId, string te_poID, string provider_te_iirID ) : base(repository, "TE_IIR")
        {
            Attr_ID = ID;
            Attr_component_name = component_name;
            Attr_port_name = port_name;
            Attr_interface_name = interface_name;
            Attr_polymorphic = polymorphic;
            Attr_template_parameter_values = template_parameter_values;
            Attr_C2C = C2C;
            Attr_cl_iirId = cl_iirId;
            Attr_c_irId = c_irId;
            Attr_te_poID = te_poID;
            Attr_provider_te_iirID = provider_te_iirID;
        }

        public CIMClassTE_IIRBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["ID"], (string)attrArgs["component_name"], (string)attrArgs["port_name"], (string)attrArgs["interface_name"], (bool)attrArgs["polymorphic"], (string)attrArgs["template_parameter_values"], (string)attrArgs["C2C"], (string)attrArgs["cl_iirId"], (string)attrArgs["c_irId"], (string)attrArgs["te_poID"], (string)attrArgs["provider_te_iirID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassCL_IIR LinkedToR2013()
        {
            var candidates = repository.GetCIInstances(domainName, "CL_IIR").Where(i => ((CIMClassCL_IIR)i).Attr_Id == this.Attr_cl_iirId);
            CIMClassCL_IIR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassCL_IIR)candidates.First();
            }
            return linked;

        }

        public CIMClassC_IR LinkedToR2046()
        {
            var candidates = repository.GetCIInstances(domainName, "C_IR").Where(i => ((CIMClassC_IR)i).Attr_Id == this.Attr_c_irId);
            CIMClassC_IR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_IR)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_PO LinkedToR2080()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_PO").Where(i => ((CIMClassTE_PO)i).Attr_ID == this.Attr_te_poID);
            CIMClassTE_PO linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_PO)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_IIR LinkedToR2081ProvidesOrIsDelegated()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_IIR").Where(i => ((CIMClassTE_IIR)i).Attr_ID == this.Attr_provider_te_iirID);
            CIMClassTE_IIR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_IIR)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassTE_IIR> LinkedFromR2081RequiresOrDelegates()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_IIR").Where(i => ((CIMClassTE_IIR)i).Attr_provider_te_iirID == this.Attr_ID);
            var linked = new List<CIMClassTE_IIR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassTE_IIR)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassTM_TPV> LinkedFromR2806()
        {
            var candidates = repository.GetCIInstances(domainName, "TM_TPV").Where(i => ((CIMClassTM_TPV)i).Attr_te_iirID == this.Attr_ID);
            var linked = new List<CIMClassTM_TPV>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassTM_TPV)c);
            }
            return linked;

        }

    }
    public class CIMClassTE_ILBBase : CIMOOAofOOAClass, CIMClassTE_ILB
    {
        public string Attr_file { get; set; }
        public string Attr_define_name { get; set; }
        public string Attr_data_define_name { get; set; }
        public string Attr_interleave_bridge { get; set; }
        public string Attr_interleave_bridge_done { get; set; }
        public string Attr_get_data { get; set; }
        public string Attr_dispatch { get; set; }

        public CIMClassTE_ILBBase(CIModelRepository repository, string file, string define_name, string data_define_name, string interleave_bridge, string interleave_bridge_done, string get_data, string dispatch ) : base(repository, "TE_ILB")
        {
            Attr_file = file;
            Attr_define_name = define_name;
            Attr_data_define_name = data_define_name;
            Attr_interleave_bridge = interleave_bridge;
            Attr_interleave_bridge_done = interleave_bridge_done;
            Attr_get_data = get_data;
            Attr_dispatch = dispatch;
        }

        public CIMClassTE_ILBBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["file"], (string)attrArgs["define_name"], (string)attrArgs["data_define_name"], (string)attrArgs["interleave_bridge"], (string)attrArgs["interleave_bridge_done"], (string)attrArgs["get_data"], (string)attrArgs["dispatch"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

    }
    public class CIMClassTE_INSTANCEBase : CIMOOAofOOAClass, CIMClassTE_INSTANCE
    {
        public string Attr_create { get; set; }
        public string Attr_create_persistent { get; set; }
        public string Attr_delete { get; set; }
        public string Attr_delete_persistent { get; set; }
        public string Attr_self { get; set; }
        public string Attr_global_self { get; set; }
        public string Attr_base { get; set; }
        public string Attr_handle { get; set; }
        public string Attr_factory_init { get; set; }
        public string Attr_base_class { get; set; }
        public string Attr_max_extent { get; set; }
        public string Attr_max_association_extent { get; set; }
        public string Attr_max_transient_extent { get; set; }
        public string Attr_current_state { get; set; }
        public string Attr_scope { get; set; }
        public string Attr_get_dci { get; set; }
        public string Attr_get_event_dispatcher { get; set; }
        public string Attr_get_thread_assignment { get; set; }
        public string Attr_module { get; set; }

        public CIMClassTE_INSTANCEBase(CIModelRepository repository, string create, string create_persistent, string delete, string delete_persistent, string self, string global_self, string base_, string handle, string factory_init, string base_class, string max_extent, string max_association_extent, string max_transient_extent, string current_state, string scope, string get_dci, string get_event_dispatcher, string get_thread_assignment, string module ) : base(repository, "TE_INSTANCE")
        {
            Attr_create = create;
            Attr_create_persistent = create_persistent;
            Attr_delete = delete;
            Attr_delete_persistent = delete_persistent;
            Attr_self = self;
            Attr_global_self = global_self;
            Attr_base = base_;
            Attr_handle = handle;
            Attr_factory_init = factory_init;
            Attr_base_class = base_class;
            Attr_max_extent = max_extent;
            Attr_max_association_extent = max_association_extent;
            Attr_max_transient_extent = max_transient_extent;
            Attr_current_state = current_state;
            Attr_scope = scope;
            Attr_get_dci = get_dci;
            Attr_get_event_dispatcher = get_event_dispatcher;
            Attr_get_thread_assignment = get_thread_assignment;
            Attr_module = module;
        }

        public CIMClassTE_INSTANCEBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["create"], (string)attrArgs["create_persistent"], (string)attrArgs["delete"], (string)attrArgs["delete_persistent"], (string)attrArgs["self"], (string)attrArgs["global_self"], (string)attrArgs["base"], (string)attrArgs["handle"], (string)attrArgs["factory_init"], (string)attrArgs["base_class"], (string)attrArgs["max_extent"], (string)attrArgs["max_association_extent"], (string)attrArgs["max_transient_extent"], (string)attrArgs["current_state"], (string)attrArgs["scope"], (string)attrArgs["get_dci"], (string)attrArgs["get_event_dispatcher"], (string)attrArgs["get_thread_assignment"], (string)attrArgs["module"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_EXTENT LinkedOneSideR2066()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_EXTENT");
            CIMClassTE_EXTENT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_EXTENT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_IOPBase : CIMOOAofOOAClass, CIMClassTE_IOP
    {
        public string Attr_name { get; set; }
        public string Attr_parameters { get; set; }
        public string Attr_Statement_ID { get; set; }

        public CIMClassTE_IOPBase(CIModelRepository repository, string name, string parameters, string Statement_ID ) : base(repository, "TE_IOP")
        {
            Attr_name = name;
            Attr_parameters = parameters;
            Attr_Statement_ID = Statement_ID;
        }

        public CIMClassTE_IOPBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["name"], (string)attrArgs["parameters"], (string)attrArgs["Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_SMT CIMSuperClassTE_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SMT").Where(i => ((CIMClassTE_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassTE_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_LNKBase : CIMOOAofOOAClass, CIMClassTE_LNK
    {
        public string Attr_ID { get; set; }
        public int Attr_Mult { get; set; }
        public string Attr_rel_phrase { get; set; }
        public int Attr_rel_number { get; set; }
        public string Attr_OAL { get; set; }
        public string Attr_buffer { get; set; }
        public string Attr_next_ID { get; set; }
        public string Attr_Link_ID { get; set; }
        public string Attr_linkage { get; set; }
        public string Attr_iterator { get; set; }
        public string Attr_left { get; set; }
        public string Attr_te_classGeneratedName { get; set; }
        public bool Attr_first { get; set; }
        public bool Attr_last { get; set; }
        public string Attr_assoc_type { get; set; }

        public CIMClassTE_LNKBase(CIModelRepository repository, string ID, int Mult, string rel_phrase, int rel_number, string OAL, string buffer, string next_ID, string Link_ID, string linkage, string iterator, string left, string te_classGeneratedName, bool first, bool last, string assoc_type ) : base(repository, "TE_LNK")
        {
            Attr_ID = ID;
            Attr_Mult = Mult;
            Attr_rel_phrase = rel_phrase;
            Attr_rel_number = rel_number;
            Attr_OAL = OAL;
            Attr_buffer = buffer;
            Attr_next_ID = next_ID;
            Attr_Link_ID = Link_ID;
            Attr_linkage = linkage;
            Attr_iterator = iterator;
            Attr_left = left;
            Attr_te_classGeneratedName = te_classGeneratedName;
            Attr_first = first;
            Attr_last = last;
            Attr_assoc_type = assoc_type;
        }

        public CIMClassTE_LNKBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["ID"], (int)attrArgs["Mult"], (string)attrArgs["rel_phrase"], (int)attrArgs["rel_number"], (string)attrArgs["OAL"], (string)attrArgs["buffer"], (string)attrArgs["next_ID"], (string)attrArgs["Link_ID"], (string)attrArgs["linkage"], (string)attrArgs["iterator"], (string)attrArgs["left"], (string)attrArgs["te_classGeneratedName"], (bool)attrArgs["first"], (bool)attrArgs["last"], (string)attrArgs["assoc_type"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassACT_LNK LinkedToR2042()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_LNK").Where(i => ((CIMClassACT_LNK)i).Attr_Link_ID == this.Attr_Link_ID);
            CIMClassACT_LNK linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_LNK)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_LNK LinkedToR2075Succeeds()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_LNK").Where(i => ((CIMClassTE_LNK)i).Attr_ID == this.Attr_next_ID);
            CIMClassTE_LNK linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_LNK)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_CLASS LinkedToR2076()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_CLASS").Where(i => ((CIMClassTE_CLASS)i).Attr_GeneratedName == this.Attr_te_classGeneratedName);
            CIMClassTE_CLASS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_CLASS)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_SELECT_RELATED LinkedFromR2073()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SELECT_RELATED").Where(i => ((CIMClassTE_SELECT_RELATED)i).Attr_link_ID == this.Attr_ID);
            CIMClassTE_SELECT_RELATED linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SELECT_RELATED)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_LNK LinkedFromR2075Precedes()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_LNK").Where(i => ((CIMClassTE_LNK)i).Attr_next_ID == this.Attr_ID);
            CIMClassTE_LNK linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_LNK)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassTE_MACTBase : CIMOOAofOOAClass, CIMClassTE_MACT
    {
        public string Attr_AbaID { get; set; }
        public string Attr_ID { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }
        public string Attr_GeneratedName { get; set; }
        public string Attr_ComponentName { get; set; }
        public string Attr_OALParamBuffer { get; set; }
        public string Attr_PortName { get; set; }
        public string Attr_InterfaceName { get; set; }
        public string Attr_MessageName { get; set; }
        public int Attr_Direction { get; set; }
        public bool Attr_Provision { get; set; }
        public string Attr_subtypeKL { get; set; }
        public bool Attr_polymorphic { get; set; }
        public bool Attr_trace { get; set; }
        public int Attr_Order { get; set; }
        public string Attr_SPR_POId { get; set; }
        public string Attr_SPR_PSId { get; set; }
        public string Attr_SPR_ROId { get; set; }
        public string Attr_SPR_RSId { get; set; }
        public string Attr_te_cID { get; set; }
        public string Attr_te_poID { get; set; }
        public string Attr_te_evtID { get; set; }
        public string Attr_nextID { get; set; }

        public CIMClassTE_MACTBase(CIModelRepository repository, string AbaID, string ID, string Name, string Descrip, string GeneratedName, string ComponentName, string OALParamBuffer, string PortName, string InterfaceName, string MessageName, int Direction, bool Provision, string subtypeKL, bool polymorphic, bool trace, int Order, string SPR_POId, string SPR_PSId, string SPR_ROId, string SPR_RSId, string te_cID, string te_poID, string te_evtID, string nextID ) : base(repository, "TE_MACT")
        {
            Attr_AbaID = AbaID;
            Attr_ID = ID;
            Attr_Name = Name;
            Attr_Descrip = Descrip;
            Attr_GeneratedName = GeneratedName;
            Attr_ComponentName = ComponentName;
            Attr_OALParamBuffer = OALParamBuffer;
            Attr_PortName = PortName;
            Attr_InterfaceName = InterfaceName;
            Attr_MessageName = MessageName;
            Attr_Direction = Direction;
            Attr_Provision = Provision;
            Attr_subtypeKL = subtypeKL;
            Attr_polymorphic = polymorphic;
            Attr_trace = trace;
            Attr_Order = Order;
            Attr_SPR_POId = SPR_POId;
            Attr_SPR_PSId = SPR_PSId;
            Attr_SPR_ROId = SPR_ROId;
            Attr_SPR_RSId = SPR_RSId;
            Attr_te_cID = te_cID;
            Attr_te_poID = te_poID;
            Attr_te_evtID = te_evtID;
            Attr_nextID = nextID;
        }

        public CIMClassTE_MACTBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["AbaID"], (string)attrArgs["ID"], (string)attrArgs["Name"], (string)attrArgs["Descrip"], (string)attrArgs["GeneratedName"], (string)attrArgs["ComponentName"], (string)attrArgs["OALParamBuffer"], (string)attrArgs["PortName"], (string)attrArgs["InterfaceName"], (string)attrArgs["MessageName"], (int)attrArgs["Direction"], (bool)attrArgs["Provision"], (string)attrArgs["subtypeKL"], (bool)attrArgs["polymorphic"], (bool)attrArgs["trace"], (int)attrArgs["Order"], (string)attrArgs["SPR_POId"], (string)attrArgs["SPR_PSId"], (string)attrArgs["SPR_ROId"], (string)attrArgs["SPR_RSId"], (string)attrArgs["te_cID"], (string)attrArgs["te_poID"], (string)attrArgs["te_evtID"], (string)attrArgs["nextID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_C LinkedToR2002()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_C").Where(i => ((CIMClassTE_C)i).Attr_ID == this.Attr_te_cID);
            CIMClassTE_C linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_C)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_PO LinkedToR2006()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_PO").Where(i => ((CIMClassTE_PO)i).Attr_ID == this.Attr_te_poID);
            CIMClassTE_PO linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_PO)candidates.First();
            }
            return linked;

        }

        public CIMClassSPR_PO LinkedToR2050()
        {
            var candidates = repository.GetCIInstances(domainName, "SPR_PO").Where(i => ((CIMClassSPR_PO)i).Attr_Id == this.Attr_SPR_POId);
            CIMClassSPR_PO linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSPR_PO)candidates.First();
            }
            return linked;

        }

        public CIMClassSPR_PS LinkedToR2051()
        {
            var candidates = repository.GetCIInstances(domainName, "SPR_PS").Where(i => ((CIMClassSPR_PS)i).Attr_Id == this.Attr_SPR_PSId);
            CIMClassSPR_PS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSPR_PS)candidates.First();
            }
            return linked;

        }

        public CIMClassSPR_RO LinkedToR2052()
        {
            var candidates = repository.GetCIInstances(domainName, "SPR_RO").Where(i => ((CIMClassSPR_RO)i).Attr_Id == this.Attr_SPR_ROId);
            CIMClassSPR_RO linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSPR_RO)candidates.First();
            }
            return linked;

        }

        public CIMClassSPR_RS LinkedToR2053()
        {
            var candidates = repository.GetCIInstances(domainName, "SPR_RS").Where(i => ((CIMClassSPR_RS)i).Attr_Id == this.Attr_SPR_RSId);
            CIMClassSPR_RS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSPR_RS)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_EVT LinkedToR2082()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_EVT").Where(i => ((CIMClassTE_EVT)i).Attr_ID == this.Attr_te_evtID);
            CIMClassTE_EVT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_EVT)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_MACT LinkedToR2083Succeeds()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_MACT").Where(i => ((CIMClassTE_MACT)i).Attr_ID == this.Attr_nextID);
            CIMClassTE_MACT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_MACT)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_MACT LinkedFromR2083Precedes()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_MACT").Where(i => ((CIMClassTE_MACT)i).Attr_nextID == this.Attr_ID);
            CIMClassTE_MACT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_MACT)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_PO LinkedFromR2099()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_PO").Where(i => ((CIMClassTE_PO)i).Attr_first_te_mactID == this.Attr_ID);
            CIMClassTE_PO linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_PO)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassTM_MSG> LinkedFromR2809()
        {
            var candidates = repository.GetCIInstances(domainName, "TM_MSG").Where(i => ((CIMClassTM_MSG)i).Attr_te_mactID == this.Attr_ID);
            var linked = new List<CIMClassTM_MSG>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassTM_MSG)c);
            }
            return linked;

        }

        public CIMClassTE_ABA CIMSuperClassTE_ABA()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_ABA").Where(i => ((CIMClassTE_ABA)i).Attr_AbaID == this.Attr_AbaID);
            CIMClassTE_ABA linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_ABA)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_MBRBase : CIMOOAofOOAClass, CIMClassTE_MBR
    {
        public string Attr_ID { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_GeneratedName { get; set; }
        public int Attr_dimensions { get; set; }
        public string Attr_te_dimID { get; set; }
        public string Attr_array_spec { get; set; }
        public string Attr_previousID { get; set; }
        public string Attr_te_dtID { get; set; }
        public string Attr_Member_ID { get; set; }
        public string Attr_DT_ID { get; set; }

        public CIMClassTE_MBRBase(CIModelRepository repository, string ID, string Name, string GeneratedName, int dimensions, string te_dimID, string array_spec, string previousID, string te_dtID, string Member_ID, string DT_ID ) : base(repository, "TE_MBR")
        {
            Attr_ID = ID;
            Attr_Name = Name;
            Attr_GeneratedName = GeneratedName;
            Attr_dimensions = dimensions;
            Attr_te_dimID = te_dimID;
            Attr_array_spec = array_spec;
            Attr_previousID = previousID;
            Attr_te_dtID = te_dtID;
            Attr_Member_ID = Member_ID;
            Attr_DT_ID = DT_ID;
        }

        public CIMClassTE_MBRBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["ID"], (string)attrArgs["Name"], (string)attrArgs["GeneratedName"], (int)attrArgs["dimensions"], (string)attrArgs["te_dimID"], (string)attrArgs["array_spec"], (string)attrArgs["previousID"], (string)attrArgs["te_dtID"], (string)attrArgs["Member_ID"], (string)attrArgs["DT_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassS_MBR LinkedToR2047()
        {
            var candidates = repository.GetCIInstances(domainName, "S_MBR").Where(i => ((CIMClassS_MBR)i).Attr_Parent_DT_DT_ID == this.Attr_DT_ID && ((CIMClassS_MBR)i).Attr_Member_ID == this.Attr_Member_ID);
            CIMClassS_MBR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_MBR)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_DIM LinkedToR2059()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_DIM").Where(i => ((CIMClassTE_DIM)i).Attr_te_dimID == this.Attr_te_dimID);
            CIMClassTE_DIM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_DIM)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_MBR LinkedToR2067Precedes()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_MBR").Where(i => ((CIMClassTE_MBR)i).Attr_ID == this.Attr_previousID);
            CIMClassTE_MBR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_MBR)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_DT LinkedToR2068()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_DT").Where(i => ((CIMClassTE_DT)i).Attr_ID == this.Attr_te_dtID);
            CIMClassTE_DT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_DT)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_MBR LinkedFromR2067Succeeds()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_MBR").Where(i => ((CIMClassTE_MBR)i).Attr_previousID == this.Attr_ID);
            CIMClassTE_MBR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_MBR)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassTE_OIRBase : CIMOOAofOOAClass, CIMClassTE_OIR
    {
        public string Attr_data_member { get; set; }
        public string Attr_assoc_type { get; set; }
        public string Attr_object_id { get; set; }
        public string Attr_rel_phrase { get; set; }
        public int Attr_Mult { get; set; }
        public bool Attr_NavigatedTo { get; set; }
        public string Attr_OIR_ID { get; set; }
        public string Attr_Obj_ID { get; set; }
        public string Attr_Rel_ID { get; set; }

        public CIMClassTE_OIRBase(CIModelRepository repository, string data_member, string assoc_type, string object_id, string rel_phrase, int Mult, bool NavigatedTo, string OIR_ID, string Obj_ID, string Rel_ID ) : base(repository, "TE_OIR")
        {
            Attr_data_member = data_member;
            Attr_assoc_type = assoc_type;
            Attr_object_id = object_id;
            Attr_rel_phrase = rel_phrase;
            Attr_Mult = Mult;
            Attr_NavigatedTo = NavigatedTo;
            Attr_OIR_ID = OIR_ID;
            Attr_Obj_ID = Obj_ID;
            Attr_Rel_ID = Rel_ID;
        }

        public CIMClassTE_OIRBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["data_member"], (string)attrArgs["assoc_type"], (string)attrArgs["object_id"], (string)attrArgs["rel_phrase"], (int)attrArgs["Mult"], (bool)attrArgs["NavigatedTo"], (string)attrArgs["OIR_ID"], (string)attrArgs["Obj_ID"], (string)attrArgs["Rel_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassR_OIR LinkedToR2035()
        {
            var candidates = repository.GetCIInstances(domainName, "R_OIR").Where(i => ((CIMClassR_OIR)i).Attr_OIR_ID == this.Attr_OIR_ID && ((CIMClassR_OIR)i).Attr_Rel_ID == this.Attr_Rel_ID && ((CIMClassR_OIR)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassR_OIR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_OIR)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassTE_OPERATIONBase : CIMOOAofOOAClass, CIMClassTE_OPERATION
    {
        public bool Attr_instance_based { get; set; }
        public string Attr_operation_name { get; set; }
        public string Attr_parameters { get; set; }
        public string Attr_var_name { get; set; }
        public string Attr_Statement_ID { get; set; }

        public CIMClassTE_OPERATIONBase(CIModelRepository repository, bool instance_based, string operation_name, string parameters, string var_name, string Statement_ID ) : base(repository, "TE_OPERATION")
        {
            Attr_instance_based = instance_based;
            Attr_operation_name = operation_name;
            Attr_parameters = parameters;
            Attr_var_name = var_name;
            Attr_Statement_ID = Statement_ID;
        }

        public CIMClassTE_OPERATIONBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (bool)attrArgs["instance_based"], (string)attrArgs["operation_name"], (string)attrArgs["parameters"], (string)attrArgs["var_name"], (string)attrArgs["Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_SMT CIMSuperClassTE_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SMT").Where(i => ((CIMClassTE_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassTE_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_OUTFILEBase : CIMOOAofOOAClass, CIMClassTE_OUTFILE
    {
        public string Attr_ID { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_body { get; set; }
        public int Attr_Order { get; set; }

        public CIMClassTE_OUTFILEBase(CIModelRepository repository, string ID, string Name, string body, int Order ) : base(repository, "TE_OUTFILE")
        {
            Attr_ID = ID;
            Attr_Name = Name;
            Attr_body = body;
            Attr_Order = Order;
        }

        public CIMClassTE_OUTFILEBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["ID"], (string)attrArgs["Name"], (string)attrArgs["body"], (int)attrArgs["Order"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

    }
    public class CIMClassTE_PARBase : CIMOOAofOOAClass, CIMClassTE_PAR
    {
        public string Attr_Name { get; set; }
        public int Attr_By_Ref { get; set; }
        public string Attr_buffer { get; set; }
        public int Attr_Order { get; set; }
        public string Attr_Value_ID { get; set; }
        public string Attr_te_parmID { get; set; }

        public CIMClassTE_PARBase(CIModelRepository repository, string Name, int By_Ref, string buffer, int Order, string Value_ID, string te_parmID ) : base(repository, "TE_PAR")
        {
            Attr_Name = Name;
            Attr_By_Ref = By_Ref;
            Attr_buffer = buffer;
            Attr_Order = Order;
            Attr_Value_ID = Value_ID;
            Attr_te_parmID = te_parmID;
        }

        public CIMClassTE_PARBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Name"], (int)attrArgs["By_Ref"], (string)attrArgs["buffer"], (int)attrArgs["Order"], (string)attrArgs["Value_ID"], (string)attrArgs["te_parmID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassV_PAR LinkedToR2063()
        {
            var candidates = repository.GetCIInstances(domainName, "V_PAR").Where(i => ((CIMClassV_PAR)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassV_PAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_PAR)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_PARM LinkedToR2091()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_PARM").Where(i => ((CIMClassTE_PARM)i).Attr_ID == this.Attr_te_parmID);
            CIMClassTE_PARM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_PARM)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassTE_PARMBase : CIMOOAofOOAClass, CIMClassTE_PARM
    {
        public string Attr_Name { get; set; }
        public string Attr_Descrip { get; set; }
        public int Attr_Order { get; set; }
        public string Attr_ParamBuffer { get; set; }
        public string Attr_OALParamBuffer { get; set; }
        public string Attr_ID { get; set; }
        public string Attr_nextID { get; set; }
        public string Attr_GeneratedName { get; set; }
        public int Attr_By_Ref { get; set; }
        public string Attr_te_dtID { get; set; }
        public int Attr_dimensions { get; set; }
        public string Attr_te_dimID { get; set; }
        public string Attr_array_spec { get; set; }
        public string Attr_AbaID { get; set; }
        public string Attr_SM_ID { get; set; }
        public string Attr_SMedi_ID { get; set; }
        public string Attr_SParm_ID { get; set; }
        public string Attr_TParm_ID { get; set; }
        public string Attr_PP_Id { get; set; }
        public string Attr_BParm_ID { get; set; }

        public CIMClassTE_PARMBase(CIModelRepository repository, string Name, string Descrip, int Order, string ParamBuffer, string OALParamBuffer, string ID, string nextID, string GeneratedName, int By_Ref, string te_dtID, int dimensions, string te_dimID, string array_spec, string AbaID, string SM_ID, string SMedi_ID, string SParm_ID, string TParm_ID, string PP_Id, string BParm_ID ) : base(repository, "TE_PARM")
        {
            Attr_Name = Name;
            Attr_Descrip = Descrip;
            Attr_Order = Order;
            Attr_ParamBuffer = ParamBuffer;
            Attr_OALParamBuffer = OALParamBuffer;
            Attr_ID = ID;
            Attr_nextID = nextID;
            Attr_GeneratedName = GeneratedName;
            Attr_By_Ref = By_Ref;
            Attr_te_dtID = te_dtID;
            Attr_dimensions = dimensions;
            Attr_te_dimID = te_dimID;
            Attr_array_spec = array_spec;
            Attr_AbaID = AbaID;
            Attr_SM_ID = SM_ID;
            Attr_SMedi_ID = SMedi_ID;
            Attr_SParm_ID = SParm_ID;
            Attr_TParm_ID = TParm_ID;
            Attr_PP_Id = PP_Id;
            Attr_BParm_ID = BParm_ID;
        }

        public CIMClassTE_PARMBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Name"], (string)attrArgs["Descrip"], (int)attrArgs["Order"], (string)attrArgs["ParamBuffer"], (string)attrArgs["OALParamBuffer"], (string)attrArgs["ID"], (string)attrArgs["nextID"], (string)attrArgs["GeneratedName"], (int)attrArgs["By_Ref"], (string)attrArgs["te_dtID"], (int)attrArgs["dimensions"], (string)attrArgs["te_dimID"], (string)attrArgs["array_spec"], (string)attrArgs["AbaID"], (string)attrArgs["SM_ID"], (string)attrArgs["SMedi_ID"], (string)attrArgs["SParm_ID"], (string)attrArgs["TParm_ID"], (string)attrArgs["PP_Id"], (string)attrArgs["BParm_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassS_BPARM LinkedToR2028()
        {
            var candidates = repository.GetCIInstances(domainName, "S_BPARM").Where(i => ((CIMClassS_BPARM)i).Attr_BParm_ID == this.Attr_BParm_ID);
            CIMClassS_BPARM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_BPARM)candidates.First();
            }
            return linked;

        }

        public CIMClassO_TPARM LinkedToR2029()
        {
            var candidates = repository.GetCIInstances(domainName, "O_TPARM").Where(i => ((CIMClassO_TPARM)i).Attr_TParm_ID == this.Attr_TParm_ID);
            CIMClassO_TPARM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_TPARM)candidates.First();
            }
            return linked;

        }

        public CIMClassS_SPARM LinkedToR2030()
        {
            var candidates = repository.GetCIInstances(domainName, "S_SPARM").Where(i => ((CIMClassS_SPARM)i).Attr_SParm_ID == this.Attr_SParm_ID);
            CIMClassS_SPARM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_SPARM)candidates.First();
            }
            return linked;

        }

        public CIMClassSM_EVTDI LinkedToR2031()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_EVTDI").Where(i => ((CIMClassSM_EVTDI)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_EVTDI)i).Attr_SMedi_ID == this.Attr_SMedi_ID);
            CIMClassSM_EVTDI linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_EVTDI)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_PARM LinkedToR2041Succeeds()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_PARM").Where(i => ((CIMClassTE_PARM)i).Attr_ID == this.Attr_nextID);
            CIMClassTE_PARM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_PARM)candidates.First();
            }
            return linked;

        }

        public CIMClassC_PP LinkedToR2048()
        {
            var candidates = repository.GetCIInstances(domainName, "C_PP").Where(i => ((CIMClassC_PP)i).Attr_PP_Id == this.Attr_PP_Id);
            CIMClassC_PP linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_PP)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_DT LinkedToR2049()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_DT").Where(i => ((CIMClassTE_DT)i).Attr_ID == this.Attr_te_dtID);
            CIMClassTE_DT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_DT)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_DIM LinkedToR2056()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_DIM").Where(i => ((CIMClassTE_DIM)i).Attr_te_dimID == this.Attr_te_dimID);
            CIMClassTE_DIM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_DIM)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_ABA LinkedToR2062()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_ABA").Where(i => ((CIMClassTE_ABA)i).Attr_AbaID == this.Attr_AbaID);
            CIMClassTE_ABA linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_ABA)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_PARM LinkedFromR2041Precedes()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_PARM").Where(i => ((CIMClassTE_PARM)i).Attr_nextID == this.Attr_ID);
            CIMClassTE_PARM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_PARM)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassTE_PAR> LinkedFromR2091()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_PAR").Where(i => ((CIMClassTE_PAR)i).Attr_te_parmID == this.Attr_ID);
            var linked = new List<CIMClassTE_PAR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassTE_PAR)c);
            }
            return linked;

        }

    }
    public class CIMClassTE_PERSISTBase : CIMOOAofOOAClass, CIMClassTE_PERSIST
    {
        public string Attr_persist_file { get; set; }
        public string Attr_class_union { get; set; }
        public string Attr_instance_cache_depth { get; set; }
        public string Attr_link_cache_depth { get; set; }
        public string Attr_check_mark { get; set; }
        public string Attr_post_link { get; set; }
        public string Attr_link_type_name { get; set; }
        public string Attr_link_type_type { get; set; }
        public string Attr_factory_init { get; set; }
        public string Attr_commit { get; set; }
        public string Attr_restore { get; set; }
        public string Attr_remove { get; set; }
        public string Attr_domainnum_name { get; set; }
        public string Attr_domainnum_type { get; set; }
        public string Attr_classnum_name { get; set; }
        public string Attr_classnum_type { get; set; }
        public string Attr_index_name { get; set; }
        public string Attr_index_type { get; set; }
        public string Attr_instid_type { get; set; }
        public string Attr_instid_name { get; set; }
        public string Attr_dirty_type { get; set; }
        public string Attr_dirty_name { get; set; }
        public int Attr_dirty_dirty { get; set; }
        public int Attr_dirty_clean { get; set; }

        public CIMClassTE_PERSISTBase(CIModelRepository repository, string persist_file, string class_union, string instance_cache_depth, string link_cache_depth, string check_mark, string post_link, string link_type_name, string link_type_type, string factory_init, string commit, string restore, string remove, string domainnum_name, string domainnum_type, string classnum_name, string classnum_type, string index_name, string index_type, string instid_type, string instid_name, string dirty_type, string dirty_name, int dirty_dirty, int dirty_clean ) : base(repository, "TE_PERSIST")
        {
            Attr_persist_file = persist_file;
            Attr_class_union = class_union;
            Attr_instance_cache_depth = instance_cache_depth;
            Attr_link_cache_depth = link_cache_depth;
            Attr_check_mark = check_mark;
            Attr_post_link = post_link;
            Attr_link_type_name = link_type_name;
            Attr_link_type_type = link_type_type;
            Attr_factory_init = factory_init;
            Attr_commit = commit;
            Attr_restore = restore;
            Attr_remove = remove;
            Attr_domainnum_name = domainnum_name;
            Attr_domainnum_type = domainnum_type;
            Attr_classnum_name = classnum_name;
            Attr_classnum_type = classnum_type;
            Attr_index_name = index_name;
            Attr_index_type = index_type;
            Attr_instid_type = instid_type;
            Attr_instid_name = instid_name;
            Attr_dirty_type = dirty_type;
            Attr_dirty_name = dirty_name;
            Attr_dirty_dirty = dirty_dirty;
            Attr_dirty_clean = dirty_clean;
        }

        public CIMClassTE_PERSISTBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["persist_file"], (string)attrArgs["class_union"], (string)attrArgs["instance_cache_depth"], (string)attrArgs["link_cache_depth"], (string)attrArgs["check_mark"], (string)attrArgs["post_link"], (string)attrArgs["link_type_name"], (string)attrArgs["link_type_type"], (string)attrArgs["factory_init"], (string)attrArgs["commit"], (string)attrArgs["restore"], (string)attrArgs["remove"], (string)attrArgs["domainnum_name"], (string)attrArgs["domainnum_type"], (string)attrArgs["classnum_name"], (string)attrArgs["classnum_type"], (string)attrArgs["index_name"], (string)attrArgs["index_type"], (string)attrArgs["instid_type"], (string)attrArgs["instid_name"], (string)attrArgs["dirty_type"], (string)attrArgs["dirty_name"], (int)attrArgs["dirty_dirty"], (int)attrArgs["dirty_clean"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

    }
    public class CIMClassTE_POBase : CIMOOAofOOAClass, CIMClassTE_PO
    {
        public string Attr_ID { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_GeneratedName { get; set; }
        public string Attr_InterfaceName { get; set; }
        public string Attr_PackageName { get; set; }
        public string Attr_smsg_send { get; set; }
        public string Attr_smsg_recv { get; set; }
        public bool Attr_Provision { get; set; }
        public bool Attr_polymorphic { get; set; }
        public int Attr_sibling { get; set; }
        public int Attr_Order { get; set; }
        public string Attr_te_cID { get; set; }
        public string Attr_c_iId { get; set; }
        public string Attr_c_poId { get; set; }
        public string Attr_first_te_mactID { get; set; }

        public CIMClassTE_POBase(CIModelRepository repository, string ID, string Name, string GeneratedName, string InterfaceName, string PackageName, string smsg_send, string smsg_recv, bool Provision, bool polymorphic, int sibling, int Order, string te_cID, string c_iId, string c_poId, string first_te_mactID ) : base(repository, "TE_PO")
        {
            Attr_ID = ID;
            Attr_Name = Name;
            Attr_GeneratedName = GeneratedName;
            Attr_InterfaceName = InterfaceName;
            Attr_PackageName = PackageName;
            Attr_smsg_send = smsg_send;
            Attr_smsg_recv = smsg_recv;
            Attr_Provision = Provision;
            Attr_polymorphic = polymorphic;
            Attr_sibling = sibling;
            Attr_Order = Order;
            Attr_te_cID = te_cID;
            Attr_c_iId = c_iId;
            Attr_c_poId = c_poId;
            Attr_first_te_mactID = first_te_mactID;
        }

        public CIMClassTE_POBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["ID"], (string)attrArgs["Name"], (string)attrArgs["GeneratedName"], (string)attrArgs["InterfaceName"], (string)attrArgs["PackageName"], (string)attrArgs["smsg_send"], (string)attrArgs["smsg_recv"], (bool)attrArgs["Provision"], (bool)attrArgs["polymorphic"], (int)attrArgs["sibling"], (int)attrArgs["Order"], (string)attrArgs["te_cID"], (string)attrArgs["c_iId"], (string)attrArgs["c_poId"], (string)attrArgs["first_te_mactID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_C LinkedToR2005()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_C").Where(i => ((CIMClassTE_C)i).Attr_ID == this.Attr_te_cID);
            CIMClassTE_C linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_C)candidates.First();
            }
            return linked;

        }

        public CIMClassC_I LinkedToR2007()
        {
            var candidates = repository.GetCIInstances(domainName, "C_I").Where(i => ((CIMClassC_I)i).Attr_Id == this.Attr_c_iId);
            CIMClassC_I linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_I)candidates.First();
            }
            return linked;

        }

        public CIMClassC_PO LinkedToR2044()
        {
            var candidates = repository.GetCIInstances(domainName, "C_PO").Where(i => ((CIMClassC_PO)i).Attr_Id == this.Attr_c_poId);
            CIMClassC_PO linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_PO)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_MACT LinkedToR2099()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_MACT").Where(i => ((CIMClassTE_MACT)i).Attr_ID == this.Attr_first_te_mactID);
            CIMClassTE_MACT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_MACT)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassTE_MACT> LinkedFromR2006()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_MACT").Where(i => ((CIMClassTE_MACT)i).Attr_te_poID == this.Attr_ID);
            var linked = new List<CIMClassTE_MACT>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassTE_MACT)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassTE_IIR> LinkedFromR2080()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_IIR").Where(i => ((CIMClassTE_IIR)i).Attr_te_poID == this.Attr_ID);
            var linked = new List<CIMClassTE_IIR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassTE_IIR)c);
            }
            return linked;

        }

    }
    public class CIMClassTE_PREFIXBase : CIMOOAofOOAClass, CIMClassTE_PREFIX
    {
        public string Attr_symbol { get; set; }
        public string Attr_symbolsw { get; set; }
        public string Attr_type { get; set; }
        public string Attr_typesw { get; set; }
        public string Attr_define_u { get; set; }
        public string Attr_define_c { get; set; }
        public string Attr_define_csw { get; set; }
        public string Attr_define_usw { get; set; }
        public string Attr_file { get; set; }
        public string Attr_result { get; set; }
        public string Attr_provided_port { get; set; }
        public string Attr_required_port { get; set; }
        public string Attr_channel { get; set; }

        public CIMClassTE_PREFIXBase(CIModelRepository repository, string symbol, string symbolsw, string type, string typesw, string define_u, string define_c, string define_csw, string define_usw, string file, string result, string provided_port, string required_port, string channel ) : base(repository, "TE_PREFIX")
        {
            Attr_symbol = symbol;
            Attr_symbolsw = symbolsw;
            Attr_type = type;
            Attr_typesw = typesw;
            Attr_define_u = define_u;
            Attr_define_c = define_c;
            Attr_define_csw = define_csw;
            Attr_define_usw = define_usw;
            Attr_file = file;
            Attr_result = result;
            Attr_provided_port = provided_port;
            Attr_required_port = required_port;
            Attr_channel = channel;
        }

        public CIMClassTE_PREFIXBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["symbol"], (string)attrArgs["symbolsw"], (string)attrArgs["type"], (string)attrArgs["typesw"], (string)attrArgs["define_u"], (string)attrArgs["define_c"], (string)attrArgs["define_csw"], (string)attrArgs["define_usw"], (string)attrArgs["file"], (string)attrArgs["result"], (string)attrArgs["provided_port"], (string)attrArgs["required_port"], (string)attrArgs["channel"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

    }
    public class CIMClassTE_QUEUEBase : CIMOOAofOOAClass, CIMClassTE_QUEUE
    {
        public int Attr_Queue_ID { get; set; }
        public int Attr_Dispatcher_ID { get; set; }
        public int Attr_Type { get; set; }
        public string Attr_Descrip { get; set; }
        public bool Attr_RenderCode { get; set; }
        public int Attr_MaxDepth { get; set; }

        public CIMClassTE_QUEUEBase(CIModelRepository repository, int Queue_ID, int Dispatcher_ID, int Type, string Descrip, bool RenderCode, int MaxDepth ) : base(repository, "TE_QUEUE")
        {
            Attr_Queue_ID = Queue_ID;
            Attr_Dispatcher_ID = Dispatcher_ID;
            Attr_Type = Type;
            Attr_Descrip = Descrip;
            Attr_RenderCode = RenderCode;
            Attr_MaxDepth = MaxDepth;
        }

        public CIMClassTE_QUEUEBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (int)attrArgs["Queue_ID"], (int)attrArgs["Dispatcher_ID"], (int)attrArgs["Type"], (string)attrArgs["Descrip"], (bool)attrArgs["RenderCode"], (int)attrArgs["MaxDepth"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_DISP LinkedToR2004()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_DISP").Where(i => ((CIMClassTE_DISP)i).Attr_Dispatcher_ID == this.Attr_Dispatcher_ID);
            CIMClassTE_DISP linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_DISP)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassTE_RELBase : CIMOOAofOOAClass, CIMClassTE_REL
    {
        public int Attr_Numb { get; set; }
        public bool Attr_LinkNeeded { get; set; }
        public bool Attr_UnlinkNeeded { get; set; }
        public bool Attr_Navigated { get; set; }
        public int Attr_Order { get; set; }
        public bool Attr_storage_needed { get; set; }
        public string Attr_Rel_ID { get; set; }

        public CIMClassTE_RELBase(CIModelRepository repository, int Numb, bool LinkNeeded, bool UnlinkNeeded, bool Navigated, int Order, bool storage_needed, string Rel_ID ) : base(repository, "TE_REL")
        {
            Attr_Numb = Numb;
            Attr_LinkNeeded = LinkNeeded;
            Attr_UnlinkNeeded = UnlinkNeeded;
            Attr_Navigated = Navigated;
            Attr_Order = Order;
            Attr_storage_needed = storage_needed;
            Attr_Rel_ID = Rel_ID;
        }

        public CIMClassTE_RELBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (int)attrArgs["Numb"], (bool)attrArgs["LinkNeeded"], (bool)attrArgs["UnlinkNeeded"], (bool)attrArgs["Navigated"], (int)attrArgs["Order"], (bool)attrArgs["storage_needed"], (string)attrArgs["Rel_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassR_REL LinkedToR2034()
        {
            var candidates = repository.GetCIInstances(domainName, "R_REL").Where(i => ((CIMClassR_REL)i).Attr_Rel_ID == this.Attr_Rel_ID);
            CIMClassR_REL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassR_REL)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassTE_RELATEBase : CIMOOAofOOAClass, CIMClassTE_RELATE
    {
        public string Attr_one_o_obj { get; set; }
        public string Attr_oth_o_obj { get; set; }
        public string Attr_r_rel { get; set; }
        public bool Attr_is_reflexive { get; set; }
        public int Attr_relationship_number { get; set; }
        public string Attr_relationship_phrase { get; set; }
        public string Attr_one_var_name { get; set; }
        public string Attr_oth_var_name { get; set; }
        public string Attr_Statement_ID { get; set; }

        public CIMClassTE_RELATEBase(CIModelRepository repository, string one_o_obj, string oth_o_obj, string r_rel, bool is_reflexive, int relationship_number, string relationship_phrase, string one_var_name, string oth_var_name, string Statement_ID ) : base(repository, "TE_RELATE")
        {
            Attr_one_o_obj = one_o_obj;
            Attr_oth_o_obj = oth_o_obj;
            Attr_r_rel = r_rel;
            Attr_is_reflexive = is_reflexive;
            Attr_relationship_number = relationship_number;
            Attr_relationship_phrase = relationship_phrase;
            Attr_one_var_name = one_var_name;
            Attr_oth_var_name = oth_var_name;
            Attr_Statement_ID = Statement_ID;
        }

        public CIMClassTE_RELATEBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["one_o_obj"], (string)attrArgs["oth_o_obj"], (string)attrArgs["r_rel"], (bool)attrArgs["is_reflexive"], (int)attrArgs["relationship_number"], (string)attrArgs["relationship_phrase"], (string)attrArgs["one_var_name"], (string)attrArgs["oth_var_name"], (string)attrArgs["Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_SMT CIMSuperClassTE_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SMT").Where(i => ((CIMClassTE_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassTE_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_RELATE_USINGBase : CIMOOAofOOAClass, CIMClassTE_RELATE_USING
    {
        public string Attr_one_o_obj { get; set; }
        public string Attr_oth_o_obj { get; set; }
        public string Attr_ass_o_obj { get; set; }
        public string Attr_r_rel { get; set; }
        public bool Attr_is_inflexive { get; set; }
        public int Attr_relationship_number { get; set; }
        public string Attr_relationship_phrase { get; set; }
        public string Attr_one_var_name { get; set; }
        public string Attr_oth_var_name { get; set; }
        public string Attr_ass_var_name { get; set; }
        public string Attr_one_rel_phrase { get; set; }
        public string Attr_oth_rel_phrase { get; set; }
        public string Attr_Statement_ID { get; set; }

        public CIMClassTE_RELATE_USINGBase(CIModelRepository repository, string one_o_obj, string oth_o_obj, string ass_o_obj, string r_rel, bool is_inflexive, int relationship_number, string relationship_phrase, string one_var_name, string oth_var_name, string ass_var_name, string one_rel_phrase, string oth_rel_phrase, string Statement_ID ) : base(repository, "TE_RELATE_USING")
        {
            Attr_one_o_obj = one_o_obj;
            Attr_oth_o_obj = oth_o_obj;
            Attr_ass_o_obj = ass_o_obj;
            Attr_r_rel = r_rel;
            Attr_is_inflexive = is_inflexive;
            Attr_relationship_number = relationship_number;
            Attr_relationship_phrase = relationship_phrase;
            Attr_one_var_name = one_var_name;
            Attr_oth_var_name = oth_var_name;
            Attr_ass_var_name = ass_var_name;
            Attr_one_rel_phrase = one_rel_phrase;
            Attr_oth_rel_phrase = oth_rel_phrase;
            Attr_Statement_ID = Statement_ID;
        }

        public CIMClassTE_RELATE_USINGBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["one_o_obj"], (string)attrArgs["oth_o_obj"], (string)attrArgs["ass_o_obj"], (string)attrArgs["r_rel"], (bool)attrArgs["is_inflexive"], (int)attrArgs["relationship_number"], (string)attrArgs["relationship_phrase"], (string)attrArgs["one_var_name"], (string)attrArgs["oth_var_name"], (string)attrArgs["ass_var_name"], (string)attrArgs["one_rel_phrase"], (string)attrArgs["oth_rel_phrase"], (string)attrArgs["Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_SMT CIMSuperClassTE_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SMT").Where(i => ((CIMClassTE_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassTE_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_RELINFOBase : CIMOOAofOOAClass, CIMClassTE_RELINFO
    {
        public string Attr_obj { get; set; }
        public string Attr_related_obj { get; set; }
        public string Attr_rel { get; set; }
        public string Attr_rto { get; set; }
        public string Attr_rgo { get; set; }
        public string Attr_oir { get; set; }
        public int Attr_multiplicity { get; set; }
        public bool Attr_gen_link_methods { get; set; }
        public string Attr_rel_phrase { get; set; }
        public bool Attr_is_formalizer { get; set; }
        public bool Attr_is_supertype { get; set; }
        public bool Attr_generate_subtype { get; set; }
        public bool Attr_gen_declaration { get; set; }

        public CIMClassTE_RELINFOBase(CIModelRepository repository, string obj, string related_obj, string rel, string rto, string rgo, string oir, int multiplicity, bool gen_link_methods, string rel_phrase, bool is_formalizer, bool is_supertype, bool generate_subtype, bool gen_declaration ) : base(repository, "TE_RELINFO")
        {
            Attr_obj = obj;
            Attr_related_obj = related_obj;
            Attr_rel = rel;
            Attr_rto = rto;
            Attr_rgo = rgo;
            Attr_oir = oir;
            Attr_multiplicity = multiplicity;
            Attr_gen_link_methods = gen_link_methods;
            Attr_rel_phrase = rel_phrase;
            Attr_is_formalizer = is_formalizer;
            Attr_is_supertype = is_supertype;
            Attr_generate_subtype = generate_subtype;
            Attr_gen_declaration = gen_declaration;
        }

        public CIMClassTE_RELINFOBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["obj"], (string)attrArgs["related_obj"], (string)attrArgs["rel"], (string)attrArgs["rto"], (string)attrArgs["rgo"], (string)attrArgs["oir"], (int)attrArgs["multiplicity"], (bool)attrArgs["gen_link_methods"], (string)attrArgs["rel_phrase"], (bool)attrArgs["is_formalizer"], (bool)attrArgs["is_supertype"], (bool)attrArgs["generate_subtype"], (bool)attrArgs["gen_declaration"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

    }
    public class CIMClassTE_RELSTOREBase : CIMOOAofOOAClass, CIMClassTE_RELSTORE
    {
        public string Attr_data_declare { get; set; }
        public string Attr_data_init { get; set; }
        public string Attr_link_calls { get; set; }
        public int Attr_link_index { get; set; }
        public string Attr_data_fini { get; set; }
        public string Attr_self_name { get; set; }

        public CIMClassTE_RELSTOREBase(CIModelRepository repository, string data_declare, string data_init, string link_calls, int link_index, string data_fini, string self_name ) : base(repository, "TE_RELSTORE")
        {
            Attr_data_declare = data_declare;
            Attr_data_init = data_init;
            Attr_link_calls = link_calls;
            Attr_link_index = link_index;
            Attr_data_fini = data_fini;
            Attr_self_name = self_name;
        }

        public CIMClassTE_RELSTOREBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["data_declare"], (string)attrArgs["data_init"], (string)attrArgs["link_calls"], (int)attrArgs["link_index"], (string)attrArgs["data_fini"], (string)attrArgs["self_name"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

    }
    public class CIMClassTE_RETURNBase : CIMOOAofOOAClass, CIMClassTE_RETURN
    {
        public string Attr_value { get; set; }
        public string Attr_cast1 { get; set; }
        public string Attr_cast2 { get; set; }
        public string Attr_Statement_ID { get; set; }

        public CIMClassTE_RETURNBase(CIModelRepository repository, string value, string cast1, string cast2, string Statement_ID ) : base(repository, "TE_RETURN")
        {
            Attr_value = value;
            Attr_cast1 = cast1;
            Attr_cast2 = cast2;
            Attr_Statement_ID = Statement_ID;
        }

        public CIMClassTE_RETURNBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["value"], (string)attrArgs["cast1"], (string)attrArgs["cast2"], (string)attrArgs["Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_SMT CIMSuperClassTE_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SMT").Where(i => ((CIMClassTE_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassTE_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_SELECTBase : CIMOOAofOOAClass, CIMClassTE_SELECT
    {
        public string Attr_o_obj { get; set; }
        public bool Attr_is_implicit { get; set; }
        public string Attr_class_name { get; set; }
        public string Attr_target_class_name { get; set; }
        public string Attr_class_description { get; set; }
        public string Attr_multiplicity { get; set; }
        public string Attr_var_name { get; set; }
        public string Attr_Statement_ID { get; set; }

        public CIMClassTE_SELECTBase(CIModelRepository repository, string o_obj, bool is_implicit, string class_name, string target_class_name, string class_description, string multiplicity, string var_name, string Statement_ID ) : base(repository, "TE_SELECT")
        {
            Attr_o_obj = o_obj;
            Attr_is_implicit = is_implicit;
            Attr_class_name = class_name;
            Attr_target_class_name = target_class_name;
            Attr_class_description = class_description;
            Attr_multiplicity = multiplicity;
            Attr_var_name = var_name;
            Attr_Statement_ID = Statement_ID;
        }

        public CIMClassTE_SELECTBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["o_obj"], (bool)attrArgs["is_implicit"], (string)attrArgs["class_name"], (string)attrArgs["target_class_name"], (string)attrArgs["class_description"], (string)attrArgs["multiplicity"], (string)attrArgs["var_name"], (string)attrArgs["Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_SMT CIMSuperClassTE_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SMT").Where(i => ((CIMClassTE_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassTE_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_SELECT_RELATEDBase : CIMOOAofOOAClass, CIMClassTE_SELECT_RELATED
    {
        public string Attr_Statement_ID { get; set; }
        public string Attr_link_ID { get; set; }
        public string Attr_starting_Value_ID { get; set; }
        public string Attr_where_clause_Value_ID { get; set; }
        public string Attr_starting_Var_ID { get; set; }
        public string Attr_result_Var_ID { get; set; }
        public bool Attr_by_where { get; set; }
        public string Attr_where_clause { get; set; }
        public string Attr_where_clause_OAL { get; set; }
        public string Attr_multiplicity { get; set; }
        public bool Attr_is_implicit { get; set; }
        public string Attr_result_var { get; set; }
        public string Attr_result_var_OAL { get; set; }
        public bool Attr_start_many { get; set; }
        public string Attr_start_var { get; set; }
        public string Attr_start_var_OAL { get; set; }
        public string Attr_te_classGeneratedName { get; set; }

        public CIMClassTE_SELECT_RELATEDBase(CIModelRepository repository, string Statement_ID, string link_ID, string starting_Value_ID, string where_clause_Value_ID, string starting_Var_ID, string result_Var_ID, bool by_where, string where_clause, string where_clause_OAL, string multiplicity, bool is_implicit, string result_var, string result_var_OAL, bool start_many, string start_var, string start_var_OAL, string te_classGeneratedName ) : base(repository, "TE_SELECT_RELATED")
        {
            Attr_Statement_ID = Statement_ID;
            Attr_link_ID = link_ID;
            Attr_starting_Value_ID = starting_Value_ID;
            Attr_where_clause_Value_ID = where_clause_Value_ID;
            Attr_starting_Var_ID = starting_Var_ID;
            Attr_result_Var_ID = result_Var_ID;
            Attr_by_where = by_where;
            Attr_where_clause = where_clause;
            Attr_where_clause_OAL = where_clause_OAL;
            Attr_multiplicity = multiplicity;
            Attr_is_implicit = is_implicit;
            Attr_result_var = result_var;
            Attr_result_var_OAL = result_var_OAL;
            Attr_start_many = start_many;
            Attr_start_var = start_var;
            Attr_start_var_OAL = start_var_OAL;
            Attr_te_classGeneratedName = te_classGeneratedName;
        }

        public CIMClassTE_SELECT_RELATEDBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"], (string)attrArgs["link_ID"], (string)attrArgs["starting_Value_ID"], (string)attrArgs["where_clause_Value_ID"], (string)attrArgs["starting_Var_ID"], (string)attrArgs["result_Var_ID"], (bool)attrArgs["by_where"], (string)attrArgs["where_clause"], (string)attrArgs["where_clause_OAL"], (string)attrArgs["multiplicity"], (bool)attrArgs["is_implicit"], (string)attrArgs["result_var"], (string)attrArgs["result_var_OAL"], (bool)attrArgs["start_many"], (string)attrArgs["start_var"], (string)attrArgs["start_var_OAL"], (string)attrArgs["te_classGeneratedName"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_VAL LinkedToR2070()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_VAL").Where(i => ((CIMClassTE_VAL)i).Attr_Value_ID == this.Attr_starting_Value_ID);
            CIMClassTE_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_VAL)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_LNK LinkedToR2073()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_LNK").Where(i => ((CIMClassTE_LNK)i).Attr_ID == this.Attr_link_ID);
            CIMClassTE_LNK linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_LNK)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_VAL LinkedToR2074()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_VAL").Where(i => ((CIMClassTE_VAL)i).Attr_Value_ID == this.Attr_where_clause_Value_ID);
            CIMClassTE_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_VAL)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_CLASS LinkedToR2077()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_CLASS").Where(i => ((CIMClassTE_CLASS)i).Attr_GeneratedName == this.Attr_te_classGeneratedName);
            CIMClassTE_CLASS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_CLASS)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_VAR LinkedToR2093()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_VAR").Where(i => ((CIMClassTE_VAR)i).Attr_Var_ID == this.Attr_result_Var_ID);
            CIMClassTE_VAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_VAR)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_VAR LinkedToR2094()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_VAR").Where(i => ((CIMClassTE_VAR)i).Attr_Var_ID == this.Attr_starting_Var_ID);
            CIMClassTE_VAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_VAR)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_SMT CIMSuperClassTE_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SMT").Where(i => ((CIMClassTE_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassTE_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_SELECT_WHEREBase : CIMOOAofOOAClass, CIMClassTE_SELECT_WHERE
    {
        public string Attr_o_obj { get; set; }
        public bool Attr_is_implicit { get; set; }
        public string Attr_class_name { get; set; }
        public string Attr_oal_var_name { get; set; }
        public string Attr_class_description { get; set; }
        public string Attr_multiplicity { get; set; }
        public string Attr_var_name { get; set; }
        public string Attr_selected_var_name { get; set; }
        public string Attr_where_clause { get; set; }
        public bool Attr_special { get; set; }
        public int Attr_oid_id { get; set; }
        public string Attr_Statement_ID { get; set; }

        public CIMClassTE_SELECT_WHEREBase(CIModelRepository repository, string o_obj, bool is_implicit, string class_name, string oal_var_name, string class_description, string multiplicity, string var_name, string selected_var_name, string where_clause, bool special, int oid_id, string Statement_ID ) : base(repository, "TE_SELECT_WHERE")
        {
            Attr_o_obj = o_obj;
            Attr_is_implicit = is_implicit;
            Attr_class_name = class_name;
            Attr_oal_var_name = oal_var_name;
            Attr_class_description = class_description;
            Attr_multiplicity = multiplicity;
            Attr_var_name = var_name;
            Attr_selected_var_name = selected_var_name;
            Attr_where_clause = where_clause;
            Attr_special = special;
            Attr_oid_id = oid_id;
            Attr_Statement_ID = Statement_ID;
        }

        public CIMClassTE_SELECT_WHEREBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["o_obj"], (bool)attrArgs["is_implicit"], (string)attrArgs["class_name"], (string)attrArgs["oal_var_name"], (string)attrArgs["class_description"], (string)attrArgs["multiplicity"], (string)attrArgs["var_name"], (string)attrArgs["selected_var_name"], (string)attrArgs["where_clause"], (bool)attrArgs["special"], (int)attrArgs["oid_id"], (string)attrArgs["Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_SMT CIMSuperClassTE_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SMT").Where(i => ((CIMClassTE_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassTE_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_SETBase : CIMOOAofOOAClass, CIMClassTE_SET
    {
        public string Attr_number_of_containoids { get; set; }
        public string Attr_iterator_class_name { get; set; }
        public string Attr_factory { get; set; }
        public string Attr_init { get; set; }
        public string Attr_copy { get; set; }
        public string Attr_clear { get; set; }
        public string Attr_setunion { get; set; }
        public string Attr_setintersection { get; set; }
        public string Attr_setdifference { get; set; }
        public string Attr_setsymmetricdifference { get; set; }
        public string Attr_insert_element { get; set; }
        public string Attr_insert_instance { get; set; }
        public string Attr_insert_block { get; set; }
        public string Attr_remove_element { get; set; }
        public string Attr_remove_instance { get; set; }
        public string Attr_element_count { get; set; }
        public string Attr_contains { get; set; }
        public string Attr_equality { get; set; }
        public string Attr_emptiness { get; set; }
        public string Attr_get_any { get; set; }
        public string Attr_iterator_reset { get; set; }
        public string Attr_iterator_next { get; set; }
        public string Attr_base_class { get; set; }
        public string Attr_element_type { get; set; }
        public string Attr_scope { get; set; }
        public string Attr_module { get; set; }

        public CIMClassTE_SETBase(CIModelRepository repository, string number_of_containoids, string iterator_class_name, string factory, string init, string copy, string clear, string setunion, string setintersection, string setdifference, string setsymmetricdifference, string insert_element, string insert_instance, string insert_block, string remove_element, string remove_instance, string element_count, string contains, string equality, string emptiness, string get_any, string iterator_reset, string iterator_next, string base_class, string element_type, string scope, string module ) : base(repository, "TE_SET")
        {
            Attr_number_of_containoids = number_of_containoids;
            Attr_iterator_class_name = iterator_class_name;
            Attr_factory = factory;
            Attr_init = init;
            Attr_copy = copy;
            Attr_clear = clear;
            Attr_setunion = setunion;
            Attr_setintersection = setintersection;
            Attr_setdifference = setdifference;
            Attr_setsymmetricdifference = setsymmetricdifference;
            Attr_insert_element = insert_element;
            Attr_insert_instance = insert_instance;
            Attr_insert_block = insert_block;
            Attr_remove_element = remove_element;
            Attr_remove_instance = remove_instance;
            Attr_element_count = element_count;
            Attr_contains = contains;
            Attr_equality = equality;
            Attr_emptiness = emptiness;
            Attr_get_any = get_any;
            Attr_iterator_reset = iterator_reset;
            Attr_iterator_next = iterator_next;
            Attr_base_class = base_class;
            Attr_element_type = element_type;
            Attr_scope = scope;
            Attr_module = module;
        }

        public CIMClassTE_SETBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["number_of_containoids"], (string)attrArgs["iterator_class_name"], (string)attrArgs["factory"], (string)attrArgs["init"], (string)attrArgs["copy"], (string)attrArgs["clear"], (string)attrArgs["setunion"], (string)attrArgs["setintersection"], (string)attrArgs["setdifference"], (string)attrArgs["setsymmetricdifference"], (string)attrArgs["insert_element"], (string)attrArgs["insert_instance"], (string)attrArgs["insert_block"], (string)attrArgs["remove_element"], (string)attrArgs["remove_instance"], (string)attrArgs["element_count"], (string)attrArgs["contains"], (string)attrArgs["equality"], (string)attrArgs["emptiness"], (string)attrArgs["get_any"], (string)attrArgs["iterator_reset"], (string)attrArgs["iterator_next"], (string)attrArgs["base_class"], (string)attrArgs["element_type"], (string)attrArgs["scope"], (string)attrArgs["module"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public IEnumerable<CIMClassTE_EXTENT> LinkedOtherSideR2066()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_EXTENT");
            var linked = new List<CIMClassTE_EXTENT>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassTE_EXTENT)c);
            }
            return linked;

        }

    }
    public class CIMClassTE_SGNBase : CIMOOAofOOAClass, CIMClassTE_SGN
    {
        public string Attr_sm_evt { get; set; }
        public bool Attr_self_directed { get; set; }
        public string Attr_var_name { get; set; }
        public string Attr_event_label { get; set; }
        public string Attr_event_meaning { get; set; }
        public string Attr_parameters { get; set; }
        public string Attr_Statement_ID { get; set; }

        public CIMClassTE_SGNBase(CIModelRepository repository, string sm_evt, bool self_directed, string var_name, string event_label, string event_meaning, string parameters, string Statement_ID ) : base(repository, "TE_SGN")
        {
            Attr_sm_evt = sm_evt;
            Attr_self_directed = self_directed;
            Attr_var_name = var_name;
            Attr_event_label = event_label;
            Attr_event_meaning = event_meaning;
            Attr_parameters = parameters;
            Attr_Statement_ID = Statement_ID;
        }

        public CIMClassTE_SGNBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["sm_evt"], (bool)attrArgs["self_directed"], (string)attrArgs["var_name"], (string)attrArgs["event_label"], (string)attrArgs["event_meaning"], (string)attrArgs["parameters"], (string)attrArgs["Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_SMT CIMSuperClassTE_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SMT").Where(i => ((CIMClassTE_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassTE_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_SLISTBase : CIMOOAofOOAClass, CIMClassTE_SLIST
    {
        public string Attr_flavor { get; set; }
        public string Attr_remove_node { get; set; }

        public CIMClassTE_SLISTBase(CIModelRepository repository, string flavor, string remove_node ) : base(repository, "TE_SLIST")
        {
            Attr_flavor = flavor;
            Attr_remove_node = remove_node;
        }

        public CIMClassTE_SLISTBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["flavor"], (string)attrArgs["remove_node"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_CONTAINER CIMSuperClassTE_CONTAINER()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_CONTAINER").Where(i => ((CIMClassTE_CONTAINER)i).Attr_flavor == this.Attr_flavor);
            CIMClassTE_CONTAINER linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_CONTAINER)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_SMBase : CIMOOAofOOAClass, CIMClassTE_SM
    {
        public string Attr_ID { get; set; }
        public bool Attr_complete { get; set; }
        public string Attr_initial_state { get; set; }
        public string Attr_SEMname { get; set; }
        public string Attr_action_array { get; set; }
        public string Attr_action_type { get; set; }
        public string Attr_events_union { get; set; }
        public string Attr_txn_action_array { get; set; }
        public int Attr_txn_action_count { get; set; }
        public string Attr_state_names_array { get; set; }
        public int Attr_num_states { get; set; }
        public int Attr_num_events { get; set; }
        public string Attr_SM_ID { get; set; }
        public string Attr_te_classGeneratedName { get; set; }
        public string Attr_first_te_state_ID { get; set; }
        public string Attr_first_te_evt_ID { get; set; }
        public string Attr_state_strings { get; set; }
        public string Attr_event_strings { get; set; }
        public bool Attr_class_based { get; set; }

        public CIMClassTE_SMBase(CIModelRepository repository, string ID, bool complete, string initial_state, string SEMname, string action_array, string action_type, string events_union, string txn_action_array, int txn_action_count, string state_names_array, int num_states, int num_events, string SM_ID, string te_classGeneratedName, string first_te_state_ID, string first_te_evt_ID, string state_strings, string event_strings, bool class_based ) : base(repository, "TE_SM")
        {
            Attr_ID = ID;
            Attr_complete = complete;
            Attr_initial_state = initial_state;
            Attr_SEMname = SEMname;
            Attr_action_array = action_array;
            Attr_action_type = action_type;
            Attr_events_union = events_union;
            Attr_txn_action_array = txn_action_array;
            Attr_txn_action_count = txn_action_count;
            Attr_state_names_array = state_names_array;
            Attr_num_states = num_states;
            Attr_num_events = num_events;
            Attr_SM_ID = SM_ID;
            Attr_te_classGeneratedName = te_classGeneratedName;
            Attr_first_te_state_ID = first_te_state_ID;
            Attr_first_te_evt_ID = first_te_evt_ID;
            Attr_state_strings = state_strings;
            Attr_event_strings = event_strings;
            Attr_class_based = class_based;
        }

        public CIMClassTE_SMBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["ID"], (bool)attrArgs["complete"], (string)attrArgs["initial_state"], (string)attrArgs["SEMname"], (string)attrArgs["action_array"], (string)attrArgs["action_type"], (string)attrArgs["events_union"], (string)attrArgs["txn_action_array"], (int)attrArgs["txn_action_count"], (string)attrArgs["state_names_array"], (int)attrArgs["num_states"], (int)attrArgs["num_events"], (string)attrArgs["SM_ID"], (string)attrArgs["te_classGeneratedName"], (string)attrArgs["first_te_state_ID"], (string)attrArgs["first_te_evt_ID"], (string)attrArgs["state_strings"], (string)attrArgs["event_strings"], (bool)attrArgs["class_based"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSM_SM LinkedToR2043()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_SM").Where(i => ((CIMClassSM_SM)i).Attr_SM_ID == this.Attr_SM_ID);
            CIMClassSM_SM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_SM)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_CLASS LinkedToR2072()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_CLASS").Where(i => ((CIMClassTE_CLASS)i).Attr_GeneratedName == this.Attr_te_classGeneratedName);
            CIMClassTE_CLASS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_CLASS)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_STATE LinkedToR2100()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_STATE").Where(i => ((CIMClassTE_STATE)i).Attr_ID == this.Attr_first_te_state_ID);
            CIMClassTE_STATE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_STATE)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_EVT LinkedToR2104()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_EVT").Where(i => ((CIMClassTE_EVT)i).Attr_ID == this.Attr_first_te_evt_ID);
            CIMClassTE_EVT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_EVT)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassTE_EVT> LinkedFromR2071()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_EVT").Where(i => ((CIMClassTE_EVT)i).Attr_te_smID == this.Attr_ID);
            var linked = new List<CIMClassTE_EVT>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassTE_EVT)c);
            }
            return linked;

        }

    }
    public class CIMClassTE_SMTBase : CIMOOAofOOAClass, CIMClassTE_SMT
    {
        public string Attr_Statement_ID { get; set; }
        public string Attr_OAL { get; set; }
        public string Attr_buffer { get; set; }
        public string Attr_buffer2 { get; set; }
        public string Attr_trace { get; set; }
        public string Attr_next_Statement_ID { get; set; }
        public string Attr_sub_Block_ID { get; set; }
        public string Attr_subtypeKL { get; set; }
        public string Attr_parent_Block_ID { get; set; }

        public CIMClassTE_SMTBase(CIModelRepository repository, string Statement_ID, string OAL, string buffer, string buffer2, string trace, string next_Statement_ID, string sub_Block_ID, string subtypeKL, string parent_Block_ID ) : base(repository, "TE_SMT")
        {
            Attr_Statement_ID = Statement_ID;
            Attr_OAL = OAL;
            Attr_buffer = buffer;
            Attr_buffer2 = buffer2;
            Attr_trace = trace;
            Attr_next_Statement_ID = next_Statement_ID;
            Attr_sub_Block_ID = sub_Block_ID;
            Attr_subtypeKL = subtypeKL;
            Attr_parent_Block_ID = parent_Block_ID;
        }

        public CIMClassTE_SMTBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Statement_ID"], (string)attrArgs["OAL"], (string)attrArgs["buffer"], (string)attrArgs["buffer2"], (string)attrArgs["trace"], (string)attrArgs["next_Statement_ID"], (string)attrArgs["sub_Block_ID"], (string)attrArgs["subtypeKL"], (string)attrArgs["parent_Block_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_SMT LinkedToR2012Succeeds()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SMT").Where(i => ((CIMClassTE_SMT)i).Attr_Statement_ID == this.Attr_next_Statement_ID);
            CIMClassTE_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SMT)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_BLK LinkedToR2015()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_BLK").Where(i => ((CIMClassTE_BLK)i).Attr_Block_ID == this.Attr_sub_Block_ID);
            CIMClassTE_BLK linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_BLK)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_SMT LinkedToR2038()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SMT").Where(i => ((CIMClassACT_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_SMT)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_BLK LinkedToR2078()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_BLK").Where(i => ((CIMClassTE_BLK)i).Attr_Block_ID == this.Attr_parent_Block_ID);
            CIMClassTE_BLK linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_BLK)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_SMT LinkedFromR2012Precedes()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SMT").Where(i => ((CIMClassTE_SMT)i).Attr_next_Statement_ID == this.Attr_Statement_ID);
            CIMClassTE_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SMT)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_BLK LinkedFromR2014()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_BLK").Where(i => ((CIMClassTE_BLK)i).Attr_first_Statement_ID == this.Attr_Statement_ID);
            CIMClassTE_BLK linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_BLK)candidates.First();
            }
            return linked;

        }

        public CIMSubClassR2069 SubClassR2069()
        {
            var subClassNames = new List<string>() { "TE_ASSIGN", "TE_FOR", "TE_ELSE", "TE_DELETE_INSTANCE", "TE_IF", "TE_WHILE", "TE_CREATE_INSTANCE", "TE_ELIF", "TE_CREATE_EVENT", "TE_UNRELATE_USING", "TE_UNRELATE", "TE_RELATE", "TE_SELECT", "TE_RELATE_USING", "TE_SELECT_WHERE", "TE_SELECT_RELATED", "TE_GENERATE_PRECREATED_EVENT", "TE_EVENT_PARAMETERS", "TE_GENERATE", "TE_GENERATE_CREATOR_EVENT", "TE_GENERATE_TO_CLASS", "TE_SGN", "TE_IOP", "TE_OPERATION", "TE_BRIDGE", "TE_FUNCTION", "TE_RETURN", "TE_CONTROL", "TE_BREAK", "TE_CONTINUE" };
            CIMSubClassR2069 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR2069)i).CIMSuperClassTE_SMT() != null && (((CIMSubClassR2069)i).CIMSuperClassTE_SMT().Attr_Statement_ID == this.Attr_Statement_ID));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR2069)candidates.First();
                    break;
                }
            }
            return subClass;

        }

    }
    public class CIMClassTE_STATEBase : CIMOOAofOOAClass, CIMClassTE_STATE
    {
        public string Attr_ID { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_enumerator { get; set; }
        public int Attr_Numb { get; set; }
        public int Attr_number { get; set; }
        public int Attr_Order { get; set; }
        public string Attr_SM_ID { get; set; }
        public string Attr_SMstt_ID { get; set; }
        public string Attr_next_ID { get; set; }

        public CIMClassTE_STATEBase(CIModelRepository repository, string ID, string Name, string enumerator, int Numb, int number, int Order, string SM_ID, string SMstt_ID, string next_ID ) : base(repository, "TE_STATE")
        {
            Attr_ID = ID;
            Attr_Name = Name;
            Attr_enumerator = enumerator;
            Attr_Numb = Numb;
            Attr_number = number;
            Attr_Order = Order;
            Attr_SM_ID = SM_ID;
            Attr_SMstt_ID = SMstt_ID;
            Attr_next_ID = next_ID;
        }

        public CIMClassTE_STATEBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["ID"], (string)attrArgs["Name"], (string)attrArgs["enumerator"], (int)attrArgs["Numb"], (int)attrArgs["number"], (int)attrArgs["Order"], (string)attrArgs["SM_ID"], (string)attrArgs["SMstt_ID"], (string)attrArgs["next_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSM_STATE LinkedToR2037()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_STATE").Where(i => ((CIMClassSM_STATE)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_STATE)i).Attr_SMstt_ID == this.Attr_SMstt_ID);
            CIMClassSM_STATE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_STATE)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_STATE LinkedToR2101Succeeds()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_STATE").Where(i => ((CIMClassTE_STATE)i).Attr_ID == this.Attr_next_ID);
            CIMClassTE_STATE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_STATE)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_SM LinkedFromR2100()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SM").Where(i => ((CIMClassTE_SM)i).Attr_first_te_state_ID == this.Attr_ID);
            CIMClassTE_SM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SM)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_STATE LinkedFromR2101Precedes()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_STATE").Where(i => ((CIMClassTE_STATE)i).Attr_next_ID == this.Attr_ID);
            CIMClassTE_STATE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_STATE)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassTE_STRINGBase : CIMOOAofOOAClass, CIMClassTE_STRING
    {
        public string Attr_memset { get; set; }
        public string Attr_memmove { get; set; }
        public string Attr_strcpy { get; set; }
        public string Attr_stradd { get; set; }
        public string Attr_strlen { get; set; }
        public string Attr_strcmp { get; set; }
        public string Attr_strget { get; set; }
        public string Attr_itoa { get; set; }
        public string Attr_atoi { get; set; }
        public string Attr_max_string_length { get; set; }
        public string Attr_debug_buffer_depth { get; set; }
        public string Attr_u128touuid { get; set; }
        public string Attr_uuidtou128 { get; set; }

        public CIMClassTE_STRINGBase(CIModelRepository repository, string memset, string memmove, string strcpy, string stradd, string strlen, string strcmp, string strget, string itoa, string atoi, string max_string_length, string debug_buffer_depth, string u128touuid, string uuidtou128 ) : base(repository, "TE_STRING")
        {
            Attr_memset = memset;
            Attr_memmove = memmove;
            Attr_strcpy = strcpy;
            Attr_stradd = stradd;
            Attr_strlen = strlen;
            Attr_strcmp = strcmp;
            Attr_strget = strget;
            Attr_itoa = itoa;
            Attr_atoi = atoi;
            Attr_max_string_length = max_string_length;
            Attr_debug_buffer_depth = debug_buffer_depth;
            Attr_u128touuid = u128touuid;
            Attr_uuidtou128 = uuidtou128;
        }

        public CIMClassTE_STRINGBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["memset"], (string)attrArgs["memmove"], (string)attrArgs["strcpy"], (string)attrArgs["stradd"], (string)attrArgs["strlen"], (string)attrArgs["strcmp"], (string)attrArgs["strget"], (string)attrArgs["itoa"], (string)attrArgs["atoi"], (string)attrArgs["max_string_length"], (string)attrArgs["debug_buffer_depth"], (string)attrArgs["u128touuid"], (string)attrArgs["uuidtou128"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

    }
    public class CIMClassTE_SWCBase : CIMOOAofOOAClass, CIMClassTE_SWC
    {
        public string Attr_Obj_Kl { get; set; }
        public string Attr_Where_Spec { get; set; }
        public string Attr_Key { get; set; }
        public bool Attr_Ret_Val { get; set; }
        public bool Attr_Built_In { get; set; }
        public int Attr_Oid_ID { get; set; }
        public string Attr_GeneratedName { get; set; }

        public CIMClassTE_SWCBase(CIModelRepository repository, string Obj_Kl, string Where_Spec, string Key, bool Ret_Val, bool Built_In, int Oid_ID, string GeneratedName ) : base(repository, "TE_SWC")
        {
            Attr_Obj_Kl = Obj_Kl;
            Attr_Where_Spec = Where_Spec;
            Attr_Key = Key;
            Attr_Ret_Val = Ret_Val;
            Attr_Built_In = Built_In;
            Attr_Oid_ID = Oid_ID;
            Attr_GeneratedName = GeneratedName;
        }

        public CIMClassTE_SWCBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Obj_Kl"], (string)attrArgs["Where_Spec"], (string)attrArgs["Key"], (bool)attrArgs["Ret_Val"], (bool)attrArgs["Built_In"], (int)attrArgs["Oid_ID"], (string)attrArgs["GeneratedName"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_CLASS LinkedToR2001()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_CLASS").Where(i => ((CIMClassTE_CLASS)i).Attr_GeneratedName == this.Attr_GeneratedName);
            CIMClassTE_CLASS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_CLASS)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassTE_SYNCBase : CIMOOAofOOAClass, CIMClassTE_SYNC
    {
        public string Attr_Name { get; set; }
        public bool Attr_Included { get; set; }
        public bool Attr_IsInitFunction { get; set; }
        public bool Attr_IsSafeForInterrupts { get; set; }
        public bool Attr_XlateSemantics { get; set; }
        public int Attr_Order { get; set; }
        public string Attr_AbaID { get; set; }
        public string Attr_GeneratedName { get; set; }
        public string Attr_intraface_method { get; set; }
        public string Attr_deferred_method { get; set; }
        public string Attr_te_cID { get; set; }
        public string Attr_Sync_ID { get; set; }
        public string Attr_ID { get; set; }
        public string Attr_nextID { get; set; }

        public CIMClassTE_SYNCBase(CIModelRepository repository, string Name, bool Included, bool IsInitFunction, bool IsSafeForInterrupts, bool XlateSemantics, int Order, string AbaID, string GeneratedName, string intraface_method, string deferred_method, string te_cID, string Sync_ID, string ID, string nextID ) : base(repository, "TE_SYNC")
        {
            Attr_Name = Name;
            Attr_Included = Included;
            Attr_IsInitFunction = IsInitFunction;
            Attr_IsSafeForInterrupts = IsSafeForInterrupts;
            Attr_XlateSemantics = XlateSemantics;
            Attr_Order = Order;
            Attr_AbaID = AbaID;
            Attr_GeneratedName = GeneratedName;
            Attr_intraface_method = intraface_method;
            Attr_deferred_method = deferred_method;
            Attr_te_cID = te_cID;
            Attr_Sync_ID = Sync_ID;
            Attr_ID = ID;
            Attr_nextID = nextID;
        }

        public CIMClassTE_SYNCBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Name"], (bool)attrArgs["Included"], (bool)attrArgs["IsInitFunction"], (bool)attrArgs["IsSafeForInterrupts"], (bool)attrArgs["XlateSemantics"], (int)attrArgs["Order"], (string)attrArgs["AbaID"], (string)attrArgs["GeneratedName"], (string)attrArgs["intraface_method"], (string)attrArgs["deferred_method"], (string)attrArgs["te_cID"], (string)attrArgs["Sync_ID"], (string)attrArgs["ID"], (string)attrArgs["nextID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassS_SYNC LinkedToR2023()
        {
            var candidates = repository.GetCIInstances(domainName, "S_SYNC").Where(i => ((CIMClassS_SYNC)i).Attr_Sync_ID == this.Attr_Sync_ID);
            CIMClassS_SYNC linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_SYNC)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_C LinkedToR2084()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_C").Where(i => ((CIMClassTE_C)i).Attr_ID == this.Attr_te_cID);
            CIMClassTE_C linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_C)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_SYNC LinkedToR2095Succeeds()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SYNC").Where(i => ((CIMClassTE_SYNC)i).Attr_ID == this.Attr_nextID);
            CIMClassTE_SYNC linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SYNC)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_SYNC LinkedFromR2095Precedes()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SYNC").Where(i => ((CIMClassTE_SYNC)i).Attr_nextID == this.Attr_ID);
            CIMClassTE_SYNC linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SYNC)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_C LinkedFromR2097()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_C").Where(i => ((CIMClassTE_C)i).Attr_first_syncID == this.Attr_ID);
            CIMClassTE_C linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_C)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_ABA CIMSuperClassTE_ABA()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_ABA").Where(i => ((CIMClassTE_ABA)i).Attr_AbaID == this.Attr_AbaID);
            CIMClassTE_ABA linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_ABA)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_SYSBase : CIMOOAofOOAClass, CIMClassTE_SYS
    {
        public int Attr_SystemID { get; set; }
        public string Attr_ModelCompilerName { get; set; }
        public string Attr_ExecutableName { get; set; }
        public int Attr_MaxStringLen { get; set; }
        public int Attr_MaxObjExtent { get; set; }
        public int Attr_MaxRelExtent { get; set; }
        public int Attr_MaxSelectExtent { get; set; }
        public int Attr_TotalContainers { get; set; }
        public int Attr_MaxSelfEvents { get; set; }
        public int Attr_MaxNonSelfEvents { get; set; }
        public int Attr_MaxTimers { get; set; }
        public int Attr_MaxInterleavedBridges { get; set; }
        public int Attr_MaxInterleavedBridgeDataSize { get; set; }
        public int Attr_CollectionsFlavor { get; set; }
        public bool Attr_ForcePriorityEvents { get; set; }
        public int Attr_PEIClassCount { get; set; }
        public int Attr_PersistentClassCount { get; set; }
        public int Attr_PersistInstanceCacheDepth { get; set; }
        public int Attr_PersistLinkCacheDepth { get; set; }
        public int Attr_UnitsToDynamicallyAllocate { get; set; }
        public bool Attr_InstanceLoading { get; set; }
        public string Attr_self_name { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_SystemCPortsType { get; set; }
        public bool Attr_AllPortsPoly { get; set; }
        public bool Attr_StructuredMessaging { get; set; }
        public bool Attr_NetworkSockets { get; set; }
        public bool Attr_SimulatedTime { get; set; }
        public int Attr_StateSaveBufferSize { get; set; }
        public string Attr_Sys_ID { get; set; }

        public CIMClassTE_SYSBase(CIModelRepository repository, int SystemID, string ModelCompilerName, string ExecutableName, int MaxStringLen, int MaxObjExtent, int MaxRelExtent, int MaxSelectExtent, int TotalContainers, int MaxSelfEvents, int MaxNonSelfEvents, int MaxTimers, int MaxInterleavedBridges, int MaxInterleavedBridgeDataSize, int CollectionsFlavor, bool ForcePriorityEvents, int PEIClassCount, int PersistentClassCount, int PersistInstanceCacheDepth, int PersistLinkCacheDepth, int UnitsToDynamicallyAllocate, bool InstanceLoading, string self_name, string Name, string SystemCPortsType, bool AllPortsPoly, bool StructuredMessaging, bool NetworkSockets, bool SimulatedTime, int StateSaveBufferSize, string Sys_ID ) : base(repository, "TE_SYS")
        {
            Attr_SystemID = SystemID;
            Attr_ModelCompilerName = ModelCompilerName;
            Attr_ExecutableName = ExecutableName;
            Attr_MaxStringLen = MaxStringLen;
            Attr_MaxObjExtent = MaxObjExtent;
            Attr_MaxRelExtent = MaxRelExtent;
            Attr_MaxSelectExtent = MaxSelectExtent;
            Attr_TotalContainers = TotalContainers;
            Attr_MaxSelfEvents = MaxSelfEvents;
            Attr_MaxNonSelfEvents = MaxNonSelfEvents;
            Attr_MaxTimers = MaxTimers;
            Attr_MaxInterleavedBridges = MaxInterleavedBridges;
            Attr_MaxInterleavedBridgeDataSize = MaxInterleavedBridgeDataSize;
            Attr_CollectionsFlavor = CollectionsFlavor;
            Attr_ForcePriorityEvents = ForcePriorityEvents;
            Attr_PEIClassCount = PEIClassCount;
            Attr_PersistentClassCount = PersistentClassCount;
            Attr_PersistInstanceCacheDepth = PersistInstanceCacheDepth;
            Attr_PersistLinkCacheDepth = PersistLinkCacheDepth;
            Attr_UnitsToDynamicallyAllocate = UnitsToDynamicallyAllocate;
            Attr_InstanceLoading = InstanceLoading;
            Attr_self_name = self_name;
            Attr_Name = Name;
            Attr_SystemCPortsType = SystemCPortsType;
            Attr_AllPortsPoly = AllPortsPoly;
            Attr_StructuredMessaging = StructuredMessaging;
            Attr_NetworkSockets = NetworkSockets;
            Attr_SimulatedTime = SimulatedTime;
            Attr_StateSaveBufferSize = StateSaveBufferSize;
            Attr_Sys_ID = Sys_ID;
        }

        public CIMClassTE_SYSBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (int)attrArgs["SystemID"], (string)attrArgs["ModelCompilerName"], (string)attrArgs["ExecutableName"], (int)attrArgs["MaxStringLen"], (int)attrArgs["MaxObjExtent"], (int)attrArgs["MaxRelExtent"], (int)attrArgs["MaxSelectExtent"], (int)attrArgs["TotalContainers"], (int)attrArgs["MaxSelfEvents"], (int)attrArgs["MaxNonSelfEvents"], (int)attrArgs["MaxTimers"], (int)attrArgs["MaxInterleavedBridges"], (int)attrArgs["MaxInterleavedBridgeDataSize"], (int)attrArgs["CollectionsFlavor"], (bool)attrArgs["ForcePriorityEvents"], (int)attrArgs["PEIClassCount"], (int)attrArgs["PersistentClassCount"], (int)attrArgs["PersistInstanceCacheDepth"], (int)attrArgs["PersistLinkCacheDepth"], (int)attrArgs["UnitsToDynamicallyAllocate"], (bool)attrArgs["InstanceLoading"], (string)attrArgs["self_name"], (string)attrArgs["Name"], (string)attrArgs["SystemCPortsType"], (bool)attrArgs["AllPortsPoly"], (bool)attrArgs["StructuredMessaging"], (bool)attrArgs["NetworkSockets"], (bool)attrArgs["SimulatedTime"], (int)attrArgs["StateSaveBufferSize"], (string)attrArgs["Sys_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassS_SYS LinkedToR2018()
        {
            var candidates = repository.GetCIInstances(domainName, "S_SYS").Where(i => ((CIMClassS_SYS)i).Attr_Sys_ID == this.Attr_Sys_ID);
            CIMClassS_SYS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_SYS)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassTE_DISP> LinkedFromR2003()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_DISP").Where(i => ((CIMClassTE_DISP)i).Attr_SystemID == this.Attr_SystemID);
            var linked = new List<CIMClassTE_DISP>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassTE_DISP)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassTE_C> LinkedFromR2065()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_C").Where(i => ((CIMClassTE_C)i).Attr_SystemID == this.Attr_SystemID);
            var linked = new List<CIMClassTE_C>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassTE_C)c);
            }
            return linked;

        }

    }
    public class CIMClassTE_TARGETBase : CIMOOAofOOAClass, CIMClassTE_TARGET
    {
        public string Attr_language { get; set; }
        public string Attr_c2cplusplus_linkage_begin { get; set; }
        public string Attr_c2cplusplus_linkage_end { get; set; }
        public string Attr_main { get; set; }

        public CIMClassTE_TARGETBase(CIModelRepository repository, string language, string c2cplusplus_linkage_begin, string c2cplusplus_linkage_end, string main ) : base(repository, "TE_TARGET")
        {
            Attr_language = language;
            Attr_c2cplusplus_linkage_begin = c2cplusplus_linkage_begin;
            Attr_c2cplusplus_linkage_end = c2cplusplus_linkage_end;
            Attr_main = main;
        }

        public CIMClassTE_TARGETBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["language"], (string)attrArgs["c2cplusplus_linkage_begin"], (string)attrArgs["c2cplusplus_linkage_end"], (string)attrArgs["main"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

    }
    public class CIMClassTE_TFRBase : CIMOOAofOOAClass, CIMClassTE_TFR
    {
        public bool Attr_Included { get; set; }
        public bool Attr_XlateSemantics { get; set; }
        public int Attr_Instance_Based { get; set; }
        public string Attr_Key_Lett { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_GeneratedName { get; set; }
        public string Attr_AbaID { get; set; }
        public string Attr_Tfr_ID { get; set; }

        public CIMClassTE_TFRBase(CIModelRepository repository, bool Included, bool XlateSemantics, int Instance_Based, string Key_Lett, string Name, string GeneratedName, string AbaID, string Tfr_ID ) : base(repository, "TE_TFR")
        {
            Attr_Included = Included;
            Attr_XlateSemantics = XlateSemantics;
            Attr_Instance_Based = Instance_Based;
            Attr_Key_Lett = Key_Lett;
            Attr_Name = Name;
            Attr_GeneratedName = GeneratedName;
            Attr_AbaID = AbaID;
            Attr_Tfr_ID = Tfr_ID;
        }

        public CIMClassTE_TFRBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (bool)attrArgs["Included"], (bool)attrArgs["XlateSemantics"], (int)attrArgs["Instance_Based"], (string)attrArgs["Key_Lett"], (string)attrArgs["Name"], (string)attrArgs["GeneratedName"], (string)attrArgs["AbaID"], (string)attrArgs["Tfr_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassO_TFR LinkedToR2024()
        {
            var candidates = repository.GetCIInstances(domainName, "O_TFR").Where(i => ((CIMClassO_TFR)i).Attr_Tfr_ID == this.Attr_Tfr_ID);
            CIMClassO_TFR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_TFR)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_ABA CIMSuperClassTE_ABA()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_ABA").Where(i => ((CIMClassTE_ABA)i).Attr_AbaID == this.Attr_AbaID);
            CIMClassTE_ABA linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_ABA)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_THREADBase : CIMOOAofOOAClass, CIMClassTE_THREAD
    {
        public string Attr_file { get; set; }
        public string Attr_create { get; set; }
        public string Attr_mutex_lock { get; set; }
        public string Attr_mutex_unlock { get; set; }
        public string Attr_nonbusy_wait { get; set; }
        public string Attr_nonbusy_wake { get; set; }
        public string Attr_shutdown { get; set; }
        public bool Attr_enabled { get; set; }
        public string Attr_flavor { get; set; }
        public bool Attr_serialize { get; set; }
        public int Attr_number_of_threads { get; set; }
        public string Attr_extra_initialization { get; set; }

        public CIMClassTE_THREADBase(CIModelRepository repository, string file, string create, string mutex_lock, string mutex_unlock, string nonbusy_wait, string nonbusy_wake, string shutdown, bool enabled, string flavor, bool serialize, int number_of_threads, string extra_initialization ) : base(repository, "TE_THREAD")
        {
            Attr_file = file;
            Attr_create = create;
            Attr_mutex_lock = mutex_lock;
            Attr_mutex_unlock = mutex_unlock;
            Attr_nonbusy_wait = nonbusy_wait;
            Attr_nonbusy_wake = nonbusy_wake;
            Attr_shutdown = shutdown;
            Attr_enabled = enabled;
            Attr_flavor = flavor;
            Attr_serialize = serialize;
            Attr_number_of_threads = number_of_threads;
            Attr_extra_initialization = extra_initialization;
        }

        public CIMClassTE_THREADBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["file"], (string)attrArgs["create"], (string)attrArgs["mutex_lock"], (string)attrArgs["mutex_unlock"], (string)attrArgs["nonbusy_wait"], (string)attrArgs["nonbusy_wake"], (string)attrArgs["shutdown"], (bool)attrArgs["enabled"], (string)attrArgs["flavor"], (bool)attrArgs["serialize"], (int)attrArgs["number_of_threads"], (string)attrArgs["extra_initialization"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

    }
    public class CIMClassTE_TIMBase : CIMOOAofOOAClass, CIMClassTE_TIM
    {
        public string Attr_max_timers { get; set; }
        public bool Attr_keyed_timer_support { get; set; }
        public bool Attr_recurring_timer_support { get; set; }
        public bool Attr_timer_event_search_and_destroy { get; set; }
        public string Attr_internal_type { get; set; }
        public string Attr_scope { get; set; }
        public string Attr_event_name { get; set; }

        public CIMClassTE_TIMBase(CIModelRepository repository, string max_timers, bool keyed_timer_support, bool recurring_timer_support, bool timer_event_search_and_destroy, string internal_type, string scope, string event_name ) : base(repository, "TE_TIM")
        {
            Attr_max_timers = max_timers;
            Attr_keyed_timer_support = keyed_timer_support;
            Attr_recurring_timer_support = recurring_timer_support;
            Attr_timer_event_search_and_destroy = timer_event_search_and_destroy;
            Attr_internal_type = internal_type;
            Attr_scope = scope;
            Attr_event_name = event_name;
        }

        public CIMClassTE_TIMBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["max_timers"], (bool)attrArgs["keyed_timer_support"], (bool)attrArgs["recurring_timer_support"], (bool)attrArgs["timer_event_search_and_destroy"], (string)attrArgs["internal_type"], (string)attrArgs["scope"], (string)attrArgs["event_name"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

    }
    public class CIMClassTE_TRACEBase : CIMOOAofOOAClass, CIMClassTE_TRACE
    {
        public string Attr_component_msg_start { get; set; }
        public string Attr_component_msg_end { get; set; }
        public string Attr_state_txn_start { get; set; }
        public string Attr_state_txn_end { get; set; }
        public string Attr_state_txn_event_ignored { get; set; }
        public string Attr_state_txn_cant_happen { get; set; }
        public string Attr_oal_trace { get; set; }

        public CIMClassTE_TRACEBase(CIModelRepository repository, string component_msg_start, string component_msg_end, string state_txn_start, string state_txn_end, string state_txn_event_ignored, string state_txn_cant_happen, string oal_trace ) : base(repository, "TE_TRACE")
        {
            Attr_component_msg_start = component_msg_start;
            Attr_component_msg_end = component_msg_end;
            Attr_state_txn_start = state_txn_start;
            Attr_state_txn_end = state_txn_end;
            Attr_state_txn_event_ignored = state_txn_event_ignored;
            Attr_state_txn_cant_happen = state_txn_cant_happen;
            Attr_oal_trace = oal_trace;
        }

        public CIMClassTE_TRACEBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["component_msg_start"], (string)attrArgs["component_msg_end"], (string)attrArgs["state_txn_start"], (string)attrArgs["state_txn_end"], (string)attrArgs["state_txn_event_ignored"], (string)attrArgs["state_txn_cant_happen"], (string)attrArgs["oal_trace"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

    }
    public class CIMClassTE_TYPEMAPBase : CIMOOAofOOAClass, CIMClassTE_TYPEMAP
    {
        public string Attr_instance_index_name { get; set; }
        public string Attr_instance_index_type { get; set; }
        public string Attr_object_size_name { get; set; }
        public string Attr_object_size_type { get; set; }
        public string Attr_object_number_name { get; set; }
        public string Attr_object_number_type { get; set; }
        public string Attr_state_number_name { get; set; }
        public string Attr_state_number_type { get; set; }
        public string Attr_domain_number_name { get; set; }
        public string Attr_domain_number_type { get; set; }
        public string Attr_event_number_name { get; set; }
        public string Attr_event_number_type { get; set; }
        public string Attr_event_priority_name { get; set; }
        public string Attr_event_priority_type { get; set; }
        public string Attr_event_flags_name { get; set; }
        public string Attr_event_flags_type { get; set; }
        public string Attr_poly_return_name { get; set; }
        public string Attr_poly_return_type { get; set; }
        public string Attr_SEM_cell_name { get; set; }
        public string Attr_SEM_cell_type { get; set; }
        public string Attr_structured_data_types { get; set; }
        public string Attr_enumeration_info { get; set; }
        public string Attr_user_supplied_data_types { get; set; }

        public CIMClassTE_TYPEMAPBase(CIModelRepository repository, string instance_index_name, string instance_index_type, string object_size_name, string object_size_type, string object_number_name, string object_number_type, string state_number_name, string state_number_type, string domain_number_name, string domain_number_type, string event_number_name, string event_number_type, string event_priority_name, string event_priority_type, string event_flags_name, string event_flags_type, string poly_return_name, string poly_return_type, string SEM_cell_name, string SEM_cell_type, string structured_data_types, string enumeration_info, string user_supplied_data_types ) : base(repository, "TE_TYPEMAP")
        {
            Attr_instance_index_name = instance_index_name;
            Attr_instance_index_type = instance_index_type;
            Attr_object_size_name = object_size_name;
            Attr_object_size_type = object_size_type;
            Attr_object_number_name = object_number_name;
            Attr_object_number_type = object_number_type;
            Attr_state_number_name = state_number_name;
            Attr_state_number_type = state_number_type;
            Attr_domain_number_name = domain_number_name;
            Attr_domain_number_type = domain_number_type;
            Attr_event_number_name = event_number_name;
            Attr_event_number_type = event_number_type;
            Attr_event_priority_name = event_priority_name;
            Attr_event_priority_type = event_priority_type;
            Attr_event_flags_name = event_flags_name;
            Attr_event_flags_type = event_flags_type;
            Attr_poly_return_name = poly_return_name;
            Attr_poly_return_type = poly_return_type;
            Attr_SEM_cell_name = SEM_cell_name;
            Attr_SEM_cell_type = SEM_cell_type;
            Attr_structured_data_types = structured_data_types;
            Attr_enumeration_info = enumeration_info;
            Attr_user_supplied_data_types = user_supplied_data_types;
        }

        public CIMClassTE_TYPEMAPBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["instance_index_name"], (string)attrArgs["instance_index_type"], (string)attrArgs["object_size_name"], (string)attrArgs["object_size_type"], (string)attrArgs["object_number_name"], (string)attrArgs["object_number_type"], (string)attrArgs["state_number_name"], (string)attrArgs["state_number_type"], (string)attrArgs["domain_number_name"], (string)attrArgs["domain_number_type"], (string)attrArgs["event_number_name"], (string)attrArgs["event_number_type"], (string)attrArgs["event_priority_name"], (string)attrArgs["event_priority_type"], (string)attrArgs["event_flags_name"], (string)attrArgs["event_flags_type"], (string)attrArgs["poly_return_name"], (string)attrArgs["poly_return_type"], (string)attrArgs["SEM_cell_name"], (string)attrArgs["SEM_cell_type"], (string)attrArgs["structured_data_types"], (string)attrArgs["enumeration_info"], (string)attrArgs["user_supplied_data_types"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

    }
    public class CIMClassTE_UNRELATEBase : CIMOOAofOOAClass, CIMClassTE_UNRELATE
    {
        public string Attr_one_o_obj { get; set; }
        public string Attr_oth_o_obj { get; set; }
        public string Attr_r_rel { get; set; }
        public bool Attr_is_inflexive { get; set; }
        public int Attr_relationship_number { get; set; }
        public string Attr_relationship_phrase { get; set; }
        public string Attr_one_var_name { get; set; }
        public string Attr_oth_var_name { get; set; }
        public string Attr_Statement_ID { get; set; }

        public CIMClassTE_UNRELATEBase(CIModelRepository repository, string one_o_obj, string oth_o_obj, string r_rel, bool is_inflexive, int relationship_number, string relationship_phrase, string one_var_name, string oth_var_name, string Statement_ID ) : base(repository, "TE_UNRELATE")
        {
            Attr_one_o_obj = one_o_obj;
            Attr_oth_o_obj = oth_o_obj;
            Attr_r_rel = r_rel;
            Attr_is_inflexive = is_inflexive;
            Attr_relationship_number = relationship_number;
            Attr_relationship_phrase = relationship_phrase;
            Attr_one_var_name = one_var_name;
            Attr_oth_var_name = oth_var_name;
            Attr_Statement_ID = Statement_ID;
        }

        public CIMClassTE_UNRELATEBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["one_o_obj"], (string)attrArgs["oth_o_obj"], (string)attrArgs["r_rel"], (bool)attrArgs["is_inflexive"], (int)attrArgs["relationship_number"], (string)attrArgs["relationship_phrase"], (string)attrArgs["one_var_name"], (string)attrArgs["oth_var_name"], (string)attrArgs["Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_SMT CIMSuperClassTE_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SMT").Where(i => ((CIMClassTE_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassTE_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_UNRELATE_USINGBase : CIMOOAofOOAClass, CIMClassTE_UNRELATE_USING
    {
        public string Attr_one_o_obj { get; set; }
        public string Attr_oth_o_obj { get; set; }
        public string Attr_ass_o_obj { get; set; }
        public string Attr_r_rel { get; set; }
        public bool Attr_is_reflexive { get; set; }
        public int Attr_relationship_number { get; set; }
        public string Attr_relationship_phrase { get; set; }
        public string Attr_one_var_name { get; set; }
        public string Attr_oth_var_name { get; set; }
        public string Attr_ass_var_name { get; set; }
        public string Attr_one_rel_phrase { get; set; }
        public string Attr_oth_rel_phrase { get; set; }
        public string Attr_Statement_ID { get; set; }

        public CIMClassTE_UNRELATE_USINGBase(CIModelRepository repository, string one_o_obj, string oth_o_obj, string ass_o_obj, string r_rel, bool is_reflexive, int relationship_number, string relationship_phrase, string one_var_name, string oth_var_name, string ass_var_name, string one_rel_phrase, string oth_rel_phrase, string Statement_ID ) : base(repository, "TE_UNRELATE_USING")
        {
            Attr_one_o_obj = one_o_obj;
            Attr_oth_o_obj = oth_o_obj;
            Attr_ass_o_obj = ass_o_obj;
            Attr_r_rel = r_rel;
            Attr_is_reflexive = is_reflexive;
            Attr_relationship_number = relationship_number;
            Attr_relationship_phrase = relationship_phrase;
            Attr_one_var_name = one_var_name;
            Attr_oth_var_name = oth_var_name;
            Attr_ass_var_name = ass_var_name;
            Attr_one_rel_phrase = one_rel_phrase;
            Attr_oth_rel_phrase = oth_rel_phrase;
            Attr_Statement_ID = Statement_ID;
        }

        public CIMClassTE_UNRELATE_USINGBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["one_o_obj"], (string)attrArgs["oth_o_obj"], (string)attrArgs["ass_o_obj"], (string)attrArgs["r_rel"], (bool)attrArgs["is_reflexive"], (int)attrArgs["relationship_number"], (string)attrArgs["relationship_phrase"], (string)attrArgs["one_var_name"], (string)attrArgs["oth_var_name"], (string)attrArgs["ass_var_name"], (string)attrArgs["one_rel_phrase"], (string)attrArgs["oth_rel_phrase"], (string)attrArgs["Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_SMT CIMSuperClassTE_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SMT").Where(i => ((CIMClassTE_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassTE_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTE_VALBase : CIMOOAofOOAClass, CIMClassTE_VAL
    {
        public string Attr_OAL { get; set; }
        public string Attr_buffer { get; set; }
        public int Attr_dimensions { get; set; }
        public string Attr_array_spec { get; set; }
        public string Attr_te_dimID { get; set; }
        public string Attr_Value_ID { get; set; }

        public CIMClassTE_VALBase(CIModelRepository repository, string OAL, string buffer, int dimensions, string array_spec, string te_dimID, string Value_ID ) : base(repository, "TE_VAL")
        {
            Attr_OAL = OAL;
            Attr_buffer = buffer;
            Attr_dimensions = dimensions;
            Attr_array_spec = array_spec;
            Attr_te_dimID = te_dimID;
            Attr_Value_ID = Value_ID;
        }

        public CIMClassTE_VALBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["OAL"], (string)attrArgs["buffer"], (int)attrArgs["dimensions"], (string)attrArgs["array_spec"], (string)attrArgs["te_dimID"], (string)attrArgs["Value_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassV_VAL LinkedToR2040()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_DIM LinkedToR2079()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_DIM").Where(i => ((CIMClassTE_DIM)i).Attr_te_dimID == this.Attr_te_dimID);
            CIMClassTE_DIM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_DIM)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_SELECT_RELATED LinkedFromR2070()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SELECT_RELATED").Where(i => ((CIMClassTE_SELECT_RELATED)i).Attr_starting_Value_ID == this.Attr_Value_ID);
            CIMClassTE_SELECT_RELATED linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SELECT_RELATED)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_SELECT_RELATED LinkedFromR2074()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SELECT_RELATED").Where(i => ((CIMClassTE_SELECT_RELATED)i).Attr_where_clause_Value_ID == this.Attr_Value_ID);
            CIMClassTE_SELECT_RELATED linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SELECT_RELATED)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassTE_VARBase : CIMOOAofOOAClass, CIMClassTE_VAR
    {
        public string Attr_OAL { get; set; }
        public string Attr_buffer { get; set; }
        public int Attr_dimensions { get; set; }
        public string Attr_te_dimID { get; set; }
        public string Attr_array_spec { get; set; }
        public string Attr_Var_ID { get; set; }

        public CIMClassTE_VARBase(CIModelRepository repository, string OAL, string buffer, int dimensions, string te_dimID, string array_spec, string Var_ID ) : base(repository, "TE_VAR")
        {
            Attr_OAL = OAL;
            Attr_buffer = buffer;
            Attr_dimensions = dimensions;
            Attr_te_dimID = te_dimID;
            Attr_array_spec = array_spec;
            Attr_Var_ID = Var_ID;
        }

        public CIMClassTE_VARBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["OAL"], (string)attrArgs["buffer"], (int)attrArgs["dimensions"], (string)attrArgs["te_dimID"], (string)attrArgs["array_spec"], (string)attrArgs["Var_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassV_VAR LinkedToR2039()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAR").Where(i => ((CIMClassV_VAR)i).Attr_Var_ID == this.Attr_Var_ID);
            CIMClassV_VAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAR)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_DIM LinkedToR2057()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_DIM").Where(i => ((CIMClassTE_DIM)i).Attr_te_dimID == this.Attr_te_dimID);
            CIMClassTE_DIM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_DIM)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassTE_SELECT_RELATED> LinkedFromR2093()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SELECT_RELATED").Where(i => ((CIMClassTE_SELECT_RELATED)i).Attr_result_Var_ID == this.Attr_Var_ID);
            var linked = new List<CIMClassTE_SELECT_RELATED>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassTE_SELECT_RELATED)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassTE_SELECT_RELATED> LinkedFromR2094()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SELECT_RELATED").Where(i => ((CIMClassTE_SELECT_RELATED)i).Attr_starting_Var_ID == this.Attr_Var_ID);
            var linked = new List<CIMClassTE_SELECT_RELATED>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassTE_SELECT_RELATED)c);
            }
            return linked;

        }

    }
    public class CIMClassTE_WHEREBase : CIMOOAofOOAClass, CIMClassTE_WHERE
    {
        public bool Attr_WhereKey { get; set; }
        public string Attr_select_any_where { get; set; }
        public int Attr_Oid_ID { get; set; }
        public string Attr_Obj_ID { get; set; }

        public CIMClassTE_WHEREBase(CIModelRepository repository, bool WhereKey, string select_any_where, int Oid_ID, string Obj_ID ) : base(repository, "TE_WHERE")
        {
            Attr_WhereKey = WhereKey;
            Attr_select_any_where = select_any_where;
            Attr_Oid_ID = Oid_ID;
            Attr_Obj_ID = Obj_ID;
        }

        public CIMClassTE_WHEREBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (bool)attrArgs["WhereKey"], (string)attrArgs["select_any_where"], (int)attrArgs["Oid_ID"], (string)attrArgs["Obj_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassO_ID LinkedToR2032()
        {
            var candidates = repository.GetCIInstances(domainName, "O_ID").Where(i => ((CIMClassO_ID)i).Attr_Oid_ID == this.Attr_Oid_ID && ((CIMClassO_ID)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_ID linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_ID)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassTE_WHILEBase : CIMOOAofOOAClass, CIMClassTE_WHILE
    {
        public string Attr_condition { get; set; }
        public string Attr_Statement_ID { get; set; }

        public CIMClassTE_WHILEBase(CIModelRepository repository, string condition, string Statement_ID ) : base(repository, "TE_WHILE")
        {
            Attr_condition = condition;
            Attr_Statement_ID = Statement_ID;
        }

        public CIMClassTE_WHILEBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["condition"], (string)attrArgs["Statement_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_SMT CIMSuperClassTE_SMT()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_SMT").Where(i => ((CIMClassTE_SMT)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassTE_SMT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_SMT)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassTM_BUILDBase : CIMOOAofOOAClass, CIMClassTM_BUILD
    {
        public string Attr_package_to_build { get; set; }
        public string Attr_package_obj_name { get; set; }
        public string Attr_package_inst_name { get; set; }

        public CIMClassTM_BUILDBase(CIModelRepository repository, string package_to_build, string package_obj_name, string package_inst_name ) : base(repository, "TM_BUILD")
        {
            Attr_package_to_build = package_to_build;
            Attr_package_obj_name = package_obj_name;
            Attr_package_inst_name = package_inst_name;
        }

        public CIMClassTM_BUILDBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["package_to_build"], (string)attrArgs["package_obj_name"], (string)attrArgs["package_inst_name"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

    }
    public class CIMClassTM_CBase : CIMOOAofOOAClass, CIMClassTM_C
    {
        public string Attr_Package { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_xName { get; set; }
        public string Attr_include_file { get; set; }
        public bool Attr_isChannel { get; set; }
        public bool Attr_isRealized { get; set; }
        public string Attr_te_cID { get; set; }

        public CIMClassTM_CBase(CIModelRepository repository, string Package, string Name, string xName, string include_file, bool isChannel, bool isRealized, string te_cID ) : base(repository, "TM_C")
        {
            Attr_Package = Package;
            Attr_Name = Name;
            Attr_xName = xName;
            Attr_include_file = include_file;
            Attr_isChannel = isChannel;
            Attr_isRealized = isRealized;
            Attr_te_cID = te_cID;
        }

        public CIMClassTM_CBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Package"], (string)attrArgs["Name"], (string)attrArgs["xName"], (string)attrArgs["include_file"], (bool)attrArgs["isChannel"], (bool)attrArgs["isRealized"], (string)attrArgs["te_cID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_C LinkedToR2804()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_C").Where(i => ((CIMClassTE_C)i).Attr_ID == this.Attr_te_cID);
            CIMClassTE_C linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_C)candidates.First();
            }
            return linked;

        }

        public CIMClassTM_TEMPLATE LinkedFromR2800()
        {
            var candidates = repository.GetCIInstances(domainName, "TM_TEMPLATE").Where(i => ((CIMClassTM_TEMPLATE)i).Attr_tm_cPackage == this.Attr_Package && ((CIMClassTM_TEMPLATE)i).Attr_tm_cName == this.Attr_Name);
            CIMClassTM_TEMPLATE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTM_TEMPLATE)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassTM_ENUMINITBase : CIMOOAofOOAClass, CIMClassTM_ENUMINIT
    {
        public string Attr_Domain { get; set; }
        public string Attr_enumeration { get; set; }
        public string Attr_value { get; set; }

        public CIMClassTM_ENUMINITBase(CIModelRepository repository, string Domain, string enumeration, string value ) : base(repository, "TM_ENUMINIT")
        {
            Attr_Domain = Domain;
            Attr_enumeration = enumeration;
            Attr_value = value;
        }

        public CIMClassTM_ENUMINITBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Domain"], (string)attrArgs["enumeration"], (string)attrArgs["value"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

    }
    public class CIMClassTM_ENUMVALBase : CIMOOAofOOAClass, CIMClassTM_ENUMVAL
    {
        public string Attr_Domain { get; set; }
        public string Attr_enumeration { get; set; }
        public string Attr_enumerator { get; set; }
        public string Attr_value { get; set; }

        public CIMClassTM_ENUMVALBase(CIModelRepository repository, string Domain, string enumeration, string enumerator, string value ) : base(repository, "TM_ENUMVAL")
        {
            Attr_Domain = Domain;
            Attr_enumeration = enumeration;
            Attr_enumerator = enumerator;
            Attr_value = value;
        }

        public CIMClassTM_ENUMVALBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Domain"], (string)attrArgs["enumeration"], (string)attrArgs["enumerator"], (string)attrArgs["value"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

    }
    public class CIMClassTM_IFBase : CIMOOAofOOAClass, CIMClassTM_IF
    {
        public string Attr_Package { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_c_iId { get; set; }

        public CIMClassTM_IFBase(CIModelRepository repository, string Package, string Name, string c_iId ) : base(repository, "TM_IF")
        {
            Attr_Package = Package;
            Attr_Name = Name;
            Attr_c_iId = c_iId;
        }

        public CIMClassTM_IFBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Package"], (string)attrArgs["Name"], (string)attrArgs["c_iId"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassC_I LinkedToR2807()
        {
            var candidates = repository.GetCIInstances(domainName, "C_I").Where(i => ((CIMClassC_I)i).Attr_Id == this.Attr_c_iId);
            CIMClassC_I linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_I)candidates.First();
            }
            return linked;

        }

        public CIMClassTM_TEMPLATE LinkedFromR2802()
        {
            var candidates = repository.GetCIInstances(domainName, "TM_TEMPLATE").Where(i => ((CIMClassTM_TEMPLATE)i).Attr_tm_ifName == this.Attr_Name && ((CIMClassTM_TEMPLATE)i).Attr_tm_ifPackage == this.Attr_Package);
            CIMClassTM_TEMPLATE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTM_TEMPLATE)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassTM_MSGBase : CIMOOAofOOAClass, CIMClassTM_MSG
    {
        public string Attr_te_mactID { get; set; }
        public string Attr_ComponentName { get; set; }
        public string Attr_PortName { get; set; }
        public string Attr_MessageName { get; set; }
        public bool Attr_IsSafeForInterrupts { get; set; }

        public CIMClassTM_MSGBase(CIModelRepository repository, string te_mactID, string ComponentName, string PortName, string MessageName, bool IsSafeForInterrupts ) : base(repository, "TM_MSG")
        {
            Attr_te_mactID = te_mactID;
            Attr_ComponentName = ComponentName;
            Attr_PortName = PortName;
            Attr_MessageName = MessageName;
            Attr_IsSafeForInterrupts = IsSafeForInterrupts;
        }

        public CIMClassTM_MSGBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["te_mactID"], (string)attrArgs["ComponentName"], (string)attrArgs["PortName"], (string)attrArgs["MessageName"], (bool)attrArgs["IsSafeForInterrupts"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_MACT LinkedToR2809()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_MACT").Where(i => ((CIMClassTE_MACT)i).Attr_ID == this.Attr_te_mactID);
            CIMClassTE_MACT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_MACT)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassTM_POINTERBase : CIMOOAofOOAClass, CIMClassTM_POINTER
    {
        public string Attr_Domain { get; set; }
        public string Attr_DT_name { get; set; }
        public string Attr_pointer_type { get; set; }
        public string Attr_include_file { get; set; }

        public CIMClassTM_POINTERBase(CIModelRepository repository, string Domain, string DT_name, string pointer_type, string include_file ) : base(repository, "TM_POINTER")
        {
            Attr_Domain = Domain;
            Attr_DT_name = DT_name;
            Attr_pointer_type = pointer_type;
            Attr_include_file = include_file;
        }

        public CIMClassTM_POINTERBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Domain"], (string)attrArgs["DT_name"], (string)attrArgs["pointer_type"], (string)attrArgs["include_file"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

    }
    public class CIMClassTM_PRECISIONBase : CIMOOAofOOAClass, CIMClassTM_PRECISION
    {
        public string Attr_Domain { get; set; }
        public string Attr_DT_name { get; set; }
        public string Attr_xName { get; set; }
        public string Attr_initial_value { get; set; }

        public CIMClassTM_PRECISIONBase(CIModelRepository repository, string Domain, string DT_name, string xName, string initial_value ) : base(repository, "TM_PRECISION")
        {
            Attr_Domain = Domain;
            Attr_DT_name = DT_name;
            Attr_xName = xName;
            Attr_initial_value = initial_value;
        }

        public CIMClassTM_PRECISIONBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Domain"], (string)attrArgs["DT_name"], (string)attrArgs["xName"], (string)attrArgs["initial_value"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

    }
    public class CIMClassTM_SYNCBase : CIMOOAofOOAClass, CIMClassTM_SYNC
    {
        public string Attr_RegisteredDomain { get; set; }
        public string Attr_Name { get; set; }
        public bool Attr_IsSafeForInterrupts { get; set; }
        public bool Attr_IsInitFunction { get; set; }

        public CIMClassTM_SYNCBase(CIModelRepository repository, string RegisteredDomain, string Name, bool IsSafeForInterrupts, bool IsInitFunction ) : base(repository, "TM_SYNC")
        {
            Attr_RegisteredDomain = RegisteredDomain;
            Attr_Name = Name;
            Attr_IsSafeForInterrupts = IsSafeForInterrupts;
            Attr_IsInitFunction = IsInitFunction;
        }

        public CIMClassTM_SYNCBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["RegisteredDomain"], (string)attrArgs["Name"], (bool)attrArgs["IsSafeForInterrupts"], (bool)attrArgs["IsInitFunction"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

    }
    public class CIMClassTM_SYSTAGBase : CIMOOAofOOAClass, CIMClassTM_SYSTAG
    {
        public int Attr_MaxStringLen { get; set; }
        public int Attr_MaxRelExtent { get; set; }
        public int Attr_MaxSelectExtent { get; set; }
        public int Attr_MaxSelfEvents { get; set; }
        public int Attr_MaxNonSelfEvents { get; set; }
        public int Attr_MaxTimers { get; set; }
        public int Attr_MaxInterleavedBridges { get; set; }
        public int Attr_MaxInterleavedBridgeDataSize { get; set; }
        public int Attr_CollectionsFlavor { get; set; }
        public int Attr_PersistInstanceCacheDepth { get; set; }
        public int Attr_PersistLinkCacheDepth { get; set; }
        public int Attr_UnitsToDynamicallyAllocate { get; set; }
        public bool Attr_InstanceLoading { get; set; }
        public string Attr_SystemCPortsType { get; set; }
        public bool Attr_AllPortsPoly { get; set; }
        public bool Attr_StructuredMessaging { get; set; }
        public bool Attr_NetworkSockets { get; set; }
        public bool Attr_SimulatedTime { get; set; }
        public int Attr_StateSaveBufferSize { get; set; }

        public CIMClassTM_SYSTAGBase(CIModelRepository repository, int MaxStringLen, int MaxRelExtent, int MaxSelectExtent, int MaxSelfEvents, int MaxNonSelfEvents, int MaxTimers, int MaxInterleavedBridges, int MaxInterleavedBridgeDataSize, int CollectionsFlavor, int PersistInstanceCacheDepth, int PersistLinkCacheDepth, int UnitsToDynamicallyAllocate, bool InstanceLoading, string SystemCPortsType, bool AllPortsPoly, bool StructuredMessaging, bool NetworkSockets, bool SimulatedTime, int StateSaveBufferSize ) : base(repository, "TM_SYSTAG")
        {
            Attr_MaxStringLen = MaxStringLen;
            Attr_MaxRelExtent = MaxRelExtent;
            Attr_MaxSelectExtent = MaxSelectExtent;
            Attr_MaxSelfEvents = MaxSelfEvents;
            Attr_MaxNonSelfEvents = MaxNonSelfEvents;
            Attr_MaxTimers = MaxTimers;
            Attr_MaxInterleavedBridges = MaxInterleavedBridges;
            Attr_MaxInterleavedBridgeDataSize = MaxInterleavedBridgeDataSize;
            Attr_CollectionsFlavor = CollectionsFlavor;
            Attr_PersistInstanceCacheDepth = PersistInstanceCacheDepth;
            Attr_PersistLinkCacheDepth = PersistLinkCacheDepth;
            Attr_UnitsToDynamicallyAllocate = UnitsToDynamicallyAllocate;
            Attr_InstanceLoading = InstanceLoading;
            Attr_SystemCPortsType = SystemCPortsType;
            Attr_AllPortsPoly = AllPortsPoly;
            Attr_StructuredMessaging = StructuredMessaging;
            Attr_NetworkSockets = NetworkSockets;
            Attr_SimulatedTime = SimulatedTime;
            Attr_StateSaveBufferSize = StateSaveBufferSize;
        }

        public CIMClassTM_SYSTAGBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (int)attrArgs["MaxStringLen"], (int)attrArgs["MaxRelExtent"], (int)attrArgs["MaxSelectExtent"], (int)attrArgs["MaxSelfEvents"], (int)attrArgs["MaxNonSelfEvents"], (int)attrArgs["MaxTimers"], (int)attrArgs["MaxInterleavedBridges"], (int)attrArgs["MaxInterleavedBridgeDataSize"], (int)attrArgs["CollectionsFlavor"], (int)attrArgs["PersistInstanceCacheDepth"], (int)attrArgs["PersistLinkCacheDepth"], (int)attrArgs["UnitsToDynamicallyAllocate"], (bool)attrArgs["InstanceLoading"], (string)attrArgs["SystemCPortsType"], (bool)attrArgs["AllPortsPoly"], (bool)attrArgs["StructuredMessaging"], (bool)attrArgs["NetworkSockets"], (bool)attrArgs["SimulatedTime"], (int)attrArgs["StateSaveBufferSize"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

    }
    public class CIMClassTM_TEMPLATEBase : CIMOOAofOOAClass, CIMClassTM_TEMPLATE
    {
        public string Attr_ID { get; set; }
        public string Attr_tm_cPackage { get; set; }
        public string Attr_tm_cName { get; set; }
        public string Attr_tm_ifPackage { get; set; }
        public string Attr_tm_ifName { get; set; }
        public bool Attr_current { get; set; }
        public string Attr_template_parameters { get; set; }
        public string Attr_template_parameters_default { get; set; }
        public string Attr_template_actual_parameters { get; set; }
        public string Attr_template_default_instantiation { get; set; }

        public CIMClassTM_TEMPLATEBase(CIModelRepository repository, string ID, string tm_cPackage, string tm_cName, string tm_ifPackage, string tm_ifName, bool current, string template_parameters, string template_parameters_default, string template_actual_parameters, string template_default_instantiation ) : base(repository, "TM_TEMPLATE")
        {
            Attr_ID = ID;
            Attr_tm_cPackage = tm_cPackage;
            Attr_tm_cName = tm_cName;
            Attr_tm_ifPackage = tm_ifPackage;
            Attr_tm_ifName = tm_ifName;
            Attr_current = current;
            Attr_template_parameters = template_parameters;
            Attr_template_parameters_default = template_parameters_default;
            Attr_template_actual_parameters = template_actual_parameters;
            Attr_template_default_instantiation = template_default_instantiation;
        }

        public CIMClassTM_TEMPLATEBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["ID"], (string)attrArgs["tm_cPackage"], (string)attrArgs["tm_cName"], (string)attrArgs["tm_ifPackage"], (string)attrArgs["tm_ifName"], (bool)attrArgs["current"], (string)attrArgs["template_parameters"], (string)attrArgs["template_parameters_default"], (string)attrArgs["template_actual_parameters"], (string)attrArgs["template_default_instantiation"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTM_C LinkedToR2800()
        {
            var candidates = repository.GetCIInstances(domainName, "TM_C").Where(i => ((CIMClassTM_C)i).Attr_Package == this.Attr_tm_cPackage && ((CIMClassTM_C)i).Attr_Name == this.Attr_tm_cName);
            CIMClassTM_C linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTM_C)candidates.First();
            }
            return linked;

        }

        public CIMClassTM_IF LinkedToR2802()
        {
            var candidates = repository.GetCIInstances(domainName, "TM_IF").Where(i => ((CIMClassTM_IF)i).Attr_Name == this.Attr_tm_ifName && ((CIMClassTM_IF)i).Attr_Package == this.Attr_tm_ifPackage);
            CIMClassTM_IF linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTM_IF)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassTM_TP> LinkedFromR2801()
        {
            var candidates = repository.GetCIInstances(domainName, "TM_TP").Where(i => ((CIMClassTM_TP)i).Attr_tm_templateID == this.Attr_ID);
            var linked = new List<CIMClassTM_TP>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassTM_TP)c);
            }
            return linked;

        }

    }
    public class CIMClassTM_THREADBase : CIMOOAofOOAClass, CIMClassTM_THREAD
    {
        public bool Attr_enabled { get; set; }
        public string Attr_flavor { get; set; }
        public bool Attr_serialize { get; set; }
        public int Attr_number_of_threads { get; set; }
        public string Attr_extra_initialization { get; set; }

        public CIMClassTM_THREADBase(CIModelRepository repository, bool enabled, string flavor, bool serialize, int number_of_threads, string extra_initialization ) : base(repository, "TM_THREAD")
        {
            Attr_enabled = enabled;
            Attr_flavor = flavor;
            Attr_serialize = serialize;
            Attr_number_of_threads = number_of_threads;
            Attr_extra_initialization = extra_initialization;
        }

        public CIMClassTM_THREADBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (bool)attrArgs["enabled"], (string)attrArgs["flavor"], (bool)attrArgs["serialize"], (int)attrArgs["number_of_threads"], (string)attrArgs["extra_initialization"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

    }
    public class CIMClassTM_TPBase : CIMOOAofOOAClass, CIMClassTM_TP
    {
        public string Attr_ID { get; set; }
        public string Attr_typename { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_DefaultValue { get; set; }
        public string Attr_tm_templateID { get; set; }

        public CIMClassTM_TPBase(CIModelRepository repository, string ID, string typename, string Name, string DefaultValue, string tm_templateID ) : base(repository, "TM_TP")
        {
            Attr_ID = ID;
            Attr_typename = typename;
            Attr_Name = Name;
            Attr_DefaultValue = DefaultValue;
            Attr_tm_templateID = tm_templateID;
        }

        public CIMClassTM_TPBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["ID"], (string)attrArgs["typename"], (string)attrArgs["Name"], (string)attrArgs["DefaultValue"], (string)attrArgs["tm_templateID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTM_TEMPLATE LinkedToR2801()
        {
            var candidates = repository.GetCIInstances(domainName, "TM_TEMPLATE").Where(i => ((CIMClassTM_TEMPLATE)i).Attr_ID == this.Attr_tm_templateID);
            CIMClassTM_TEMPLATE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTM_TEMPLATE)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassTM_TPV> LinkedFromR2808()
        {
            var candidates = repository.GetCIInstances(domainName, "TM_TPV").Where(i => ((CIMClassTM_TPV)i).Attr_tm_tpID == this.Attr_ID);
            var linked = new List<CIMClassTM_TPV>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassTM_TPV)c);
            }
            return linked;

        }

    }
    public class CIMClassTM_TPVBase : CIMOOAofOOAClass, CIMClassTM_TPV
    {
        public string Attr_ID { get; set; }
        public string Attr_instance { get; set; }
        public string Attr_value { get; set; }
        public string Attr_tm_tpID { get; set; }
        public string Attr_te_iirID { get; set; }
        public string Attr_te_ciID { get; set; }

        public CIMClassTM_TPVBase(CIModelRepository repository, string ID, string instance, string value, string tm_tpID, string te_iirID, string te_ciID ) : base(repository, "TM_TPV")
        {
            Attr_ID = ID;
            Attr_instance = instance;
            Attr_value = value;
            Attr_tm_tpID = tm_tpID;
            Attr_te_iirID = te_iirID;
            Attr_te_ciID = te_ciID;
        }

        public CIMClassTM_TPVBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["ID"], (string)attrArgs["instance"], (string)attrArgs["value"], (string)attrArgs["tm_tpID"], (string)attrArgs["te_iirID"], (string)attrArgs["te_ciID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassTE_CI LinkedToR2805()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_CI").Where(i => ((CIMClassTE_CI)i).Attr_ID == this.Attr_te_ciID);
            CIMClassTE_CI linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_CI)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_IIR LinkedToR2806()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_IIR").Where(i => ((CIMClassTE_IIR)i).Attr_ID == this.Attr_te_iirID);
            CIMClassTE_IIR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_IIR)candidates.First();
            }
            return linked;

        }

        public CIMClassTM_TP LinkedToR2808()
        {
            var candidates = repository.GetCIInstances(domainName, "TM_TP").Where(i => ((CIMClassTM_TP)i).Attr_ID == this.Attr_tm_tpID);
            CIMClassTM_TP linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTM_TP)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassUC_BABase : CIMOOAofOOAClass, CIMClassUC_BA
    {
        public string Attr_Assoc_ID { get; set; }
        public string Attr_Descrip { get; set; }

        public CIMClassUC_BABase(CIModelRepository repository, string Assoc_ID, string Descrip ) : base(repository, "UC_BA")
        {
            Attr_Assoc_ID = Assoc_ID;
            Attr_Descrip = Descrip;
        }

        public CIMClassUC_BABase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Assoc_ID"], (string)attrArgs["Descrip"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassUC_UCA CIMSuperClassUC_UCA()
        {
            var candidates = repository.GetCIInstances(domainName, "UC_UCA").Where(i => ((CIMClassUC_UCA)i).Attr_Assoc_ID == this.Attr_Assoc_ID);
            CIMClassUC_UCA linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassUC_UCA)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassUC_EBase : CIMOOAofOOAClass, CIMClassUC_E
    {
        public string Attr_Assoc_ID { get; set; }
        public string Attr_Descrip { get; set; }

        public CIMClassUC_EBase(CIModelRepository repository, string Assoc_ID, string Descrip ) : base(repository, "UC_E")
        {
            Attr_Assoc_ID = Assoc_ID;
            Attr_Descrip = Descrip;
        }

        public CIMClassUC_EBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Assoc_ID"], (string)attrArgs["Descrip"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassUC_UCA CIMSuperClassUC_UCA()
        {
            var candidates = repository.GetCIInstances(domainName, "UC_UCA").Where(i => ((CIMClassUC_UCA)i).Attr_Assoc_ID == this.Attr_Assoc_ID);
            CIMClassUC_UCA linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassUC_UCA)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassUC_GBase : CIMOOAofOOAClass, CIMClassUC_G
    {
        public string Attr_Assoc_ID { get; set; }
        public string Attr_Descrip { get; set; }

        public CIMClassUC_GBase(CIModelRepository repository, string Assoc_ID, string Descrip ) : base(repository, "UC_G")
        {
            Attr_Assoc_ID = Assoc_ID;
            Attr_Descrip = Descrip;
        }

        public CIMClassUC_GBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Assoc_ID"], (string)attrArgs["Descrip"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassUC_UCA CIMSuperClassUC_UCA()
        {
            var candidates = repository.GetCIInstances(domainName, "UC_UCA").Where(i => ((CIMClassUC_UCA)i).Attr_Assoc_ID == this.Attr_Assoc_ID);
            CIMClassUC_UCA linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassUC_UCA)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassUC_IBase : CIMOOAofOOAClass, CIMClassUC_I
    {
        public string Attr_Assoc_ID { get; set; }
        public string Attr_Descrip { get; set; }

        public CIMClassUC_IBase(CIModelRepository repository, string Assoc_ID, string Descrip ) : base(repository, "UC_I")
        {
            Attr_Assoc_ID = Assoc_ID;
            Attr_Descrip = Descrip;
        }

        public CIMClassUC_IBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Assoc_ID"], (string)attrArgs["Descrip"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassUC_UCA CIMSuperClassUC_UCA()
        {
            var candidates = repository.GetCIInstances(domainName, "UC_UCA").Where(i => ((CIMClassUC_UCA)i).Attr_Assoc_ID == this.Attr_Assoc_ID);
            CIMClassUC_UCA linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassUC_UCA)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassUC_UCABase : CIMOOAofOOAClass, CIMClassUC_UCA
    {
        public string Attr_Assoc_ID { get; set; }
        public string Attr_Source_Part_ID { get; set; }
        public string Attr_Destination_Part_ID { get; set; }

        public CIMClassUC_UCABase(CIModelRepository repository, string Assoc_ID, string Source_Part_ID, string Destination_Part_ID ) : base(repository, "UC_UCA")
        {
            Attr_Assoc_ID = Assoc_ID;
            Attr_Source_Part_ID = Source_Part_ID;
            Attr_Destination_Part_ID = Destination_Part_ID;
        }

        public CIMClassUC_UCABase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Assoc_ID"], (string)attrArgs["Source_Part_ID"], (string)attrArgs["Destination_Part_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSQ_P LinkedToR1206()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_P").Where(i => ((CIMClassSQ_P)i).Attr_Part_ID == this.Attr_Source_Part_ID);
            CIMClassSQ_P linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSQ_P)candidates.First();
            }
            return linked;

        }

        public CIMClassSQ_P LinkedToR1207()
        {
            var candidates = repository.GetCIInstances(domainName, "SQ_P").Where(i => ((CIMClassSQ_P)i).Attr_Part_ID == this.Attr_Destination_Part_ID);
            CIMClassSQ_P linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSQ_P)candidates.First();
            }
            return linked;

        }

        public CIMSubClassR1210 SubClassR1210()
        {
            var subClassNames = new List<string>() { "UC_E", "UC_G", "UC_I", "UC_BA" };
            CIMSubClassR1210 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR1210)i).CIMSuperClassUC_UCA() != null && (((CIMSubClassR1210)i).CIMSuperClassUC_UCA().Attr_Assoc_ID == this.Attr_Assoc_ID));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR1210)candidates.First();
                    break;
                }
            }
            return subClass;

        }

        public CIMClassPE_PE CIMSuperClassPE_PE()
        {
            var candidates = repository.GetCIInstances(domainName, "PE_PE").Where(i => ((CIMClassPE_PE)i).Attr_Element_ID == this.Attr_Assoc_ID);
            CIMClassPE_PE linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassPE_PE)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassV_AERBase : CIMOOAofOOAClass, CIMClassV_AER
    {
        public string Attr_Value_ID { get; set; }
        public string Attr_Root_Value_ID { get; set; }
        public string Attr_Index_Value_ID { get; set; }

        public CIMClassV_AERBase(CIModelRepository repository, string Value_ID, string Root_Value_ID, string Index_Value_ID ) : base(repository, "V_AER")
        {
            Attr_Value_ID = Value_ID;
            Attr_Root_Value_ID = Root_Value_ID;
            Attr_Index_Value_ID = Index_Value_ID;
        }

        public CIMClassV_AERBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Value_ID"], (string)attrArgs["Root_Value_ID"], (string)attrArgs["Index_Value_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassV_VAL LinkedToR838()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Root_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAL LinkedToR839()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Index_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAL CIMSuperClassV_VAL()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassV_ALVBase : CIMOOAofOOAClass, CIMClassV_ALV
    {
        public string Attr_Value_ID { get; set; }
        public string Attr_Array_Value_ID { get; set; }

        public CIMClassV_ALVBase(CIModelRepository repository, string Value_ID, string Array_Value_ID ) : base(repository, "V_ALV")
        {
            Attr_Value_ID = Value_ID;
            Attr_Array_Value_ID = Array_Value_ID;
        }

        public CIMClassV_ALVBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Value_ID"], (string)attrArgs["Array_Value_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassV_VAL LinkedToR840()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Array_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAL CIMSuperClassV_VAL()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassV_AVLBase : CIMOOAofOOAClass, CIMClassV_AVL
    {
        public string Attr_Value_ID { get; set; }
        public string Attr_Root_Value_ID { get; set; }
        public string Attr_Obj_ID { get; set; }
        public string Attr_Attr_ID { get; set; }

        public CIMClassV_AVLBase(CIModelRepository repository, string Value_ID, string Root_Value_ID, string Obj_ID, string Attr_ID ) : base(repository, "V_AVL")
        {
            Attr_Value_ID = Value_ID;
            Attr_Root_Value_ID = Root_Value_ID;
            Attr_Obj_ID = Obj_ID;
            Attr_Attr_ID = Attr_ID;
        }

        public CIMClassV_AVLBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Value_ID"], (string)attrArgs["Root_Value_ID"], (string)attrArgs["Obj_ID"], (string)attrArgs["Attr_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassO_ATTR LinkedToR806()
        {
            var candidates = repository.GetCIInstances(domainName, "O_ATTR").Where(i => ((CIMClassO_ATTR)i).Attr_Attr_ID == this.Attr_Attr_ID && ((CIMClassO_ATTR)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_ATTR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_ATTR)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAL LinkedToR807()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Root_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAL CIMSuperClassV_VAL()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassV_BINBase : CIMOOAofOOAClass, CIMClassV_BIN
    {
        public string Attr_Value_ID { get; set; }
        public string Attr_Right_Value_ID { get; set; }
        public string Attr_Left_Value_ID { get; set; }
        public string Attr_Operator { get; set; }

        public CIMClassV_BINBase(CIModelRepository repository, string Value_ID, string Right_Value_ID, string Left_Value_ID, string Operator ) : base(repository, "V_BIN")
        {
            Attr_Value_ID = Value_ID;
            Attr_Right_Value_ID = Right_Value_ID;
            Attr_Left_Value_ID = Left_Value_ID;
            Attr_Operator = Operator;
        }

        public CIMClassV_BINBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Value_ID"], (string)attrArgs["Right_Value_ID"], (string)attrArgs["Left_Value_ID"], (string)attrArgs["Operator"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassV_VAL LinkedToR802()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Left_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAL LinkedToR803()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Right_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAL CIMSuperClassV_VAL()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassV_BRVBase : CIMOOAofOOAClass, CIMClassV_BRV
    {
        public string Attr_Value_ID { get; set; }
        public string Attr_Brg_ID { get; set; }
        public bool Attr_ParmListOK { get; set; }
        public int Attr_externalEntityKeyLettersLineNumber { get; set; }
        public int Attr_externalEntityKeyLettersColumn { get; set; }

        public CIMClassV_BRVBase(CIModelRepository repository, string Value_ID, string Brg_ID, bool ParmListOK, int externalEntityKeyLettersLineNumber, int externalEntityKeyLettersColumn ) : base(repository, "V_BRV")
        {
            Attr_Value_ID = Value_ID;
            Attr_Brg_ID = Brg_ID;
            Attr_ParmListOK = ParmListOK;
            Attr_externalEntityKeyLettersLineNumber = externalEntityKeyLettersLineNumber;
            Attr_externalEntityKeyLettersColumn = externalEntityKeyLettersColumn;
        }

        public CIMClassV_BRVBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Value_ID"], (string)attrArgs["Brg_ID"], (bool)attrArgs["ParmListOK"], (int)attrArgs["externalEntityKeyLettersLineNumber"], (int)attrArgs["externalEntityKeyLettersColumn"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassS_BRG LinkedToR828()
        {
            var candidates = repository.GetCIInstances(domainName, "S_BRG").Where(i => ((CIMClassS_BRG)i).Attr_Brg_ID == this.Attr_Brg_ID);
            CIMClassS_BRG linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_BRG)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassV_PAR> LinkedFromR810()
        {
            var candidates = repository.GetCIInstances(domainName, "V_PAR").Where(i => ((CIMClassV_PAR)i).Attr_Invocation_Value_ID == this.Attr_Value_ID);
            var linked = new List<CIMClassV_PAR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_PAR)c);
            }
            return linked;

        }

        public CIMClassV_VAL CIMSuperClassV_VAL()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassV_EDVBase : CIMOOAofOOAClass, CIMClassV_EDV
    {
        public string Attr_Value_ID { get; set; }

        public CIMClassV_EDVBase(CIModelRepository repository, string Value_ID ) : base(repository, "V_EDV")
        {
            Attr_Value_ID = Value_ID;
        }

        public CIMClassV_EDVBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Value_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public IEnumerable<CIMClassV_EPR> LinkedFromR834()
        {
            var candidates = repository.GetCIInstances(domainName, "V_EPR").Where(i => ((CIMClassV_EPR)i).Attr_Value_ID == this.Attr_Value_ID);
            var linked = new List<CIMClassV_EPR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_EPR)c);
            }
            return linked;

        }

        public CIMClassV_VAL CIMSuperClassV_VAL()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassV_EPRBase : CIMOOAofOOAClass, CIMClassV_EPR
    {
        public string Attr_Value_ID { get; set; }
        public string Attr_SM_ID { get; set; }
        public string Attr_SMedi_ID { get; set; }
        public string Attr_PP_Id { get; set; }

        public CIMClassV_EPRBase(CIModelRepository repository, string Value_ID, string SM_ID, string SMedi_ID, string PP_Id ) : base(repository, "V_EPR")
        {
            Attr_Value_ID = Value_ID;
            Attr_SM_ID = SM_ID;
            Attr_SMedi_ID = SMedi_ID;
            Attr_PP_Id = PP_Id;
        }

        public CIMClassV_EPRBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Value_ID"], (string)attrArgs["SM_ID"], (string)attrArgs["SMedi_ID"], (string)attrArgs["PP_Id"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassV_EDV LinkedToR834()
        {
            var candidates = repository.GetCIInstances(domainName, "V_EDV").Where(i => ((CIMClassV_EDV)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassV_EDV linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_EDV)candidates.First();
            }
            return linked;

        }

        public CIMClassSM_EVTDI LinkedToR846()
        {
            var candidates = repository.GetCIInstances(domainName, "SM_EVTDI").Where(i => ((CIMClassSM_EVTDI)i).Attr_SM_ID == this.Attr_SM_ID && ((CIMClassSM_EVTDI)i).Attr_SMedi_ID == this.Attr_SMedi_ID);
            CIMClassSM_EVTDI linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSM_EVTDI)candidates.First();
            }
            return linked;

        }

        public CIMClassC_PP LinkedToR847()
        {
            var candidates = repository.GetCIInstances(domainName, "C_PP").Where(i => ((CIMClassC_PP)i).Attr_PP_Id == this.Attr_PP_Id);
            CIMClassC_PP linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_PP)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassV_FNVBase : CIMOOAofOOAClass, CIMClassV_FNV
    {
        public string Attr_Value_ID { get; set; }
        public string Attr_Sync_ID { get; set; }
        public bool Attr_ParmListOK { get; set; }

        public CIMClassV_FNVBase(CIModelRepository repository, string Value_ID, string Sync_ID, bool ParmListOK ) : base(repository, "V_FNV")
        {
            Attr_Value_ID = Value_ID;
            Attr_Sync_ID = Sync_ID;
            Attr_ParmListOK = ParmListOK;
        }

        public CIMClassV_FNVBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Value_ID"], (string)attrArgs["Sync_ID"], (bool)attrArgs["ParmListOK"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassS_SYNC LinkedToR827()
        {
            var candidates = repository.GetCIInstances(domainName, "S_SYNC").Where(i => ((CIMClassS_SYNC)i).Attr_Sync_ID == this.Attr_Sync_ID);
            CIMClassS_SYNC linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_SYNC)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassV_PAR> LinkedFromR817()
        {
            var candidates = repository.GetCIInstances(domainName, "V_PAR").Where(i => ((CIMClassV_PAR)i).Attr_Invocation_Value_ID == this.Attr_Value_ID);
            var linked = new List<CIMClassV_PAR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_PAR)c);
            }
            return linked;

        }

        public CIMClassV_VAL CIMSuperClassV_VAL()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassV_INSBase : CIMOOAofOOAClass, CIMClassV_INS
    {
        public string Attr_Var_ID { get; set; }
        public string Attr_Obj_ID { get; set; }

        public CIMClassV_INSBase(CIModelRepository repository, string Var_ID, string Obj_ID ) : base(repository, "V_INS")
        {
            Attr_Var_ID = Var_ID;
            Attr_Obj_ID = Obj_ID;
        }

        public CIMClassV_INSBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Var_ID"], (string)attrArgs["Obj_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassO_OBJ LinkedToR819()
        {
            var candidates = repository.GetCIInstances(domainName, "O_OBJ").Where(i => ((CIMClassO_OBJ)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_OBJ linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_OBJ)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAR CIMSuperClassV_VAR()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAR").Where(i => ((CIMClassV_VAR)i).Attr_Var_ID == this.Attr_Var_ID);
            CIMClassV_VAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAR)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassV_INTBase : CIMOOAofOOAClass, CIMClassV_INT
    {
        public string Attr_Var_ID { get; set; }
        public bool Attr_IsImplicitInFor { get; set; }
        public string Attr_Obj_ID { get; set; }

        public CIMClassV_INTBase(CIModelRepository repository, string Var_ID, bool IsImplicitInFor, string Obj_ID ) : base(repository, "V_INT")
        {
            Attr_Var_ID = Var_ID;
            Attr_IsImplicitInFor = IsImplicitInFor;
            Attr_Obj_ID = Obj_ID;
        }

        public CIMClassV_INTBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Var_ID"], (bool)attrArgs["IsImplicitInFor"], (string)attrArgs["Obj_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassO_OBJ LinkedToR818()
        {
            var candidates = repository.GetCIInstances(domainName, "O_OBJ").Where(i => ((CIMClassO_OBJ)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_OBJ linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_OBJ)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAR CIMSuperClassV_VAR()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAR").Where(i => ((CIMClassV_VAR)i).Attr_Var_ID == this.Attr_Var_ID);
            CIMClassV_VAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAR)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassV_IRFBase : CIMOOAofOOAClass, CIMClassV_IRF
    {
        public string Attr_Value_ID { get; set; }
        public string Attr_Var_ID { get; set; }

        public CIMClassV_IRFBase(CIModelRepository repository, string Value_ID, string Var_ID ) : base(repository, "V_IRF")
        {
            Attr_Value_ID = Value_ID;
            Attr_Var_ID = Var_ID;
        }

        public CIMClassV_IRFBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Value_ID"], (string)attrArgs["Var_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassV_VAR LinkedToR808()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAR").Where(i => ((CIMClassV_VAR)i).Attr_Var_ID == this.Attr_Var_ID);
            CIMClassV_VAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAR)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAL CIMSuperClassV_VAL()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassV_ISRBase : CIMOOAofOOAClass, CIMClassV_ISR
    {
        public string Attr_Value_ID { get; set; }
        public string Attr_Var_ID { get; set; }

        public CIMClassV_ISRBase(CIModelRepository repository, string Value_ID, string Var_ID ) : base(repository, "V_ISR")
        {
            Attr_Value_ID = Value_ID;
            Attr_Var_ID = Var_ID;
        }

        public CIMClassV_ISRBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Value_ID"], (string)attrArgs["Var_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassV_VAR LinkedToR809()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAR").Where(i => ((CIMClassV_VAR)i).Attr_Var_ID == this.Attr_Var_ID);
            CIMClassV_VAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAR)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAL CIMSuperClassV_VAL()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassV_LBOBase : CIMOOAofOOAClass, CIMClassV_LBO
    {
        public string Attr_Value_ID { get; set; }
        public string Attr_Value { get; set; }

        public CIMClassV_LBOBase(CIModelRepository repository, string Value_ID, string Value ) : base(repository, "V_LBO")
        {
            Attr_Value_ID = Value_ID;
            Attr_Value = Value;
        }

        public CIMClassV_LBOBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Value_ID"], (string)attrArgs["Value"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassV_VAL CIMSuperClassV_VAL()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassV_LENBase : CIMOOAofOOAClass, CIMClassV_LEN
    {
        public string Attr_Value_ID { get; set; }
        public string Attr_Enum_ID { get; set; }
        public int Attr_dataTypeNameLineNumber { get; set; }
        public int Attr_dataTypeNameColumn { get; set; }

        public CIMClassV_LENBase(CIModelRepository repository, string Value_ID, string Enum_ID, int dataTypeNameLineNumber, int dataTypeNameColumn ) : base(repository, "V_LEN")
        {
            Attr_Value_ID = Value_ID;
            Attr_Enum_ID = Enum_ID;
            Attr_dataTypeNameLineNumber = dataTypeNameLineNumber;
            Attr_dataTypeNameColumn = dataTypeNameColumn;
        }

        public CIMClassV_LENBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Value_ID"], (string)attrArgs["Enum_ID"], (int)attrArgs["dataTypeNameLineNumber"], (int)attrArgs["dataTypeNameColumn"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassS_ENUM LinkedToR824()
        {
            var candidates = repository.GetCIInstances(domainName, "S_ENUM").Where(i => ((CIMClassS_ENUM)i).Attr_Enum_ID == this.Attr_Enum_ID);
            CIMClassS_ENUM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_ENUM)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAL CIMSuperClassV_VAL()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassV_LINBase : CIMOOAofOOAClass, CIMClassV_LIN
    {
        public string Attr_Value_ID { get; set; }
        public string Attr_Value { get; set; }

        public CIMClassV_LINBase(CIModelRepository repository, string Value_ID, string Value ) : base(repository, "V_LIN")
        {
            Attr_Value_ID = Value_ID;
            Attr_Value = Value;
        }

        public CIMClassV_LINBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Value_ID"], (string)attrArgs["Value"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassV_VAL CIMSuperClassV_VAL()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassV_LOCBase : CIMOOAofOOAClass, CIMClassV_LOC
    {
        public string Attr_Id { get; set; }
        public int Attr_LineNumber { get; set; }
        public int Attr_StartPosition { get; set; }
        public int Attr_EndPosition { get; set; }
        public string Attr_Var_ID { get; set; }

        public CIMClassV_LOCBase(CIModelRepository repository, string Id, int LineNumber, int StartPosition, int EndPosition, string Var_ID ) : base(repository, "V_LOC")
        {
            Attr_Id = Id;
            Attr_LineNumber = LineNumber;
            Attr_StartPosition = StartPosition;
            Attr_EndPosition = EndPosition;
            Attr_Var_ID = Var_ID;
        }

        public CIMClassV_LOCBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Id"], (int)attrArgs["LineNumber"], (int)attrArgs["StartPosition"], (int)attrArgs["EndPosition"], (string)attrArgs["Var_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassV_VAR LinkedToR835()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAR").Where(i => ((CIMClassV_VAR)i).Attr_Var_ID == this.Attr_Var_ID);
            CIMClassV_VAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAR)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassV_LRLBase : CIMOOAofOOAClass, CIMClassV_LRL
    {
        public string Attr_Value_ID { get; set; }
        public string Attr_Value { get; set; }

        public CIMClassV_LRLBase(CIModelRepository repository, string Value_ID, string Value ) : base(repository, "V_LRL")
        {
            Attr_Value_ID = Value_ID;
            Attr_Value = Value;
        }

        public CIMClassV_LRLBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Value_ID"], (string)attrArgs["Value"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassV_VAL CIMSuperClassV_VAL()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassV_LSTBase : CIMOOAofOOAClass, CIMClassV_LST
    {
        public string Attr_Value_ID { get; set; }
        public string Attr_Value { get; set; }

        public CIMClassV_LSTBase(CIModelRepository repository, string Value_ID, string Value ) : base(repository, "V_LST")
        {
            Attr_Value_ID = Value_ID;
            Attr_Value = Value;
        }

        public CIMClassV_LSTBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Value_ID"], (string)attrArgs["Value"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassV_VAL CIMSuperClassV_VAL()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassV_MSVBase : CIMOOAofOOAClass, CIMClassV_MSV
    {
        public string Attr_Value_ID { get; set; }
        public string Attr_PEP_Id { get; set; }
        public string Attr_REP_Id { get; set; }
        public bool Attr_ParmListOK { get; set; }
        public int Attr_ownerNameLineNumber { get; set; }
        public int Attr_ownerNameColumn { get; set; }
        public string Attr_Target_Value_ID { get; set; }

        public CIMClassV_MSVBase(CIModelRepository repository, string Value_ID, string PEP_Id, string REP_Id, bool ParmListOK, int ownerNameLineNumber, int ownerNameColumn, string Target_Value_ID ) : base(repository, "V_MSV")
        {
            Attr_Value_ID = Value_ID;
            Attr_PEP_Id = PEP_Id;
            Attr_REP_Id = REP_Id;
            Attr_ParmListOK = ParmListOK;
            Attr_ownerNameLineNumber = ownerNameLineNumber;
            Attr_ownerNameColumn = ownerNameColumn;
            Attr_Target_Value_ID = Target_Value_ID;
        }

        public CIMClassV_MSVBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Value_ID"], (string)attrArgs["PEP_Id"], (string)attrArgs["REP_Id"], (bool)attrArgs["ParmListOK"], (int)attrArgs["ownerNameLineNumber"], (int)attrArgs["ownerNameColumn"], (string)attrArgs["Target_Value_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassSPR_PEP LinkedToR841()
        {
            var candidates = repository.GetCIInstances(domainName, "SPR_PEP").Where(i => ((CIMClassSPR_PEP)i).Attr_Id == this.Attr_PEP_Id);
            CIMClassSPR_PEP linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSPR_PEP)candidates.First();
            }
            return linked;

        }

        public CIMClassSPR_REP LinkedToR845()
        {
            var candidates = repository.GetCIInstances(domainName, "SPR_REP").Where(i => ((CIMClassSPR_REP)i).Attr_Id == this.Attr_REP_Id);
            CIMClassSPR_REP linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassSPR_REP)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAL LinkedToR851()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Target_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassV_PAR> LinkedFromR842()
        {
            var candidates = repository.GetCIInstances(domainName, "V_PAR").Where(i => ((CIMClassV_PAR)i).Attr_Invocation_Value_ID == this.Attr_Value_ID);
            var linked = new List<CIMClassV_PAR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_PAR)c);
            }
            return linked;

        }

        public CIMClassV_VAL CIMSuperClassV_VAL()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassV_MVLBase : CIMOOAofOOAClass, CIMClassV_MVL
    {
        public string Attr_Value_ID { get; set; }
        public string Attr_Root_Value_ID { get; set; }
        public string Attr_Member_ID { get; set; }
        public string Attr_DT_DT_ID { get; set; }

        public CIMClassV_MVLBase(CIModelRepository repository, string Value_ID, string Root_Value_ID, string Member_ID, string DT_DT_ID ) : base(repository, "V_MVL")
        {
            Attr_Value_ID = Value_ID;
            Attr_Root_Value_ID = Root_Value_ID;
            Attr_Member_ID = Member_ID;
            Attr_DT_DT_ID = DT_DT_ID;
        }

        public CIMClassV_MVLBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Value_ID"], (string)attrArgs["Root_Value_ID"], (string)attrArgs["Member_ID"], (string)attrArgs["DT_DT_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassS_MBR LinkedToR836()
        {
            var candidates = repository.GetCIInstances(domainName, "S_MBR").Where(i => ((CIMClassS_MBR)i).Attr_Parent_DT_DT_ID == this.Attr_DT_DT_ID && ((CIMClassS_MBR)i).Attr_Member_ID == this.Attr_Member_ID);
            CIMClassS_MBR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_MBR)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAL LinkedToR837()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Root_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAL CIMSuperClassV_VAL()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassV_PARBase : CIMOOAofOOAClass, CIMClassV_PAR
    {
        public string Attr_Value_ID { get; set; }
        public string Attr_Statement_ID { get; set; }
        public string Attr_Invocation_Value_ID { get; set; }
        public string Attr_Name { get; set; }
        public string Attr_Next_Value_ID { get; set; }
        public int Attr_labelLineNumber { get; set; }
        public int Attr_labelColumn { get; set; }

        public CIMClassV_PARBase(CIModelRepository repository, string Value_ID, string Statement_ID, string Invocation_Value_ID, string Name, string Next_Value_ID, int labelLineNumber, int labelColumn ) : base(repository, "V_PAR")
        {
            Attr_Value_ID = Value_ID;
            Attr_Statement_ID = Statement_ID;
            Attr_Invocation_Value_ID = Invocation_Value_ID;
            Attr_Name = Name;
            Attr_Next_Value_ID = Next_Value_ID;
            Attr_labelLineNumber = labelLineNumber;
            Attr_labelColumn = labelColumn;
        }

        public CIMClassV_PARBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Value_ID"], (string)attrArgs["Statement_ID"], (string)attrArgs["Invocation_Value_ID"], (string)attrArgs["Name"], (string)attrArgs["Next_Value_ID"], (int)attrArgs["labelLineNumber"], (int)attrArgs["labelColumn"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassACT_TFM LinkedToR627()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_TFM").Where(i => ((CIMClassACT_TFM)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_TFM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_TFM)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_BRG LinkedToR628()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_BRG").Where(i => ((CIMClassACT_BRG)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_BRG linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_BRG)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_SGN LinkedToR662()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SGN").Where(i => ((CIMClassACT_SGN)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_SGN linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_SGN)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_FNC LinkedToR669()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_FNC").Where(i => ((CIMClassACT_FNC)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_FNC linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_FNC)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_IOP LinkedToR679()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_IOP").Where(i => ((CIMClassACT_IOP)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassACT_IOP linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_IOP)candidates.First();
            }
            return linked;

        }

        public CIMClassE_ESS LinkedToR700()
        {
            var candidates = repository.GetCIInstances(domainName, "E_ESS").Where(i => ((CIMClassE_ESS)i).Attr_Statement_ID == this.Attr_Statement_ID);
            CIMClassE_ESS linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassE_ESS)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAL LinkedToR800()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }

        public CIMClassV_BRV LinkedToR810()
        {
            var candidates = repository.GetCIInstances(domainName, "V_BRV").Where(i => ((CIMClassV_BRV)i).Attr_Value_ID == this.Attr_Invocation_Value_ID);
            CIMClassV_BRV linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_BRV)candidates.First();
            }
            return linked;

        }

        public CIMClassV_TRV LinkedToR811()
        {
            var candidates = repository.GetCIInstances(domainName, "V_TRV").Where(i => ((CIMClassV_TRV)i).Attr_Value_ID == this.Attr_Invocation_Value_ID);
            CIMClassV_TRV linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_TRV)candidates.First();
            }
            return linked;

        }

        public CIMClassV_PAR LinkedToR816Succeeds()
        {
            var candidates = repository.GetCIInstances(domainName, "V_PAR").Where(i => ((CIMClassV_PAR)i).Attr_Value_ID == this.Attr_Next_Value_ID);
            CIMClassV_PAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_PAR)candidates.First();
            }
            return linked;

        }

        public CIMClassV_FNV LinkedToR817()
        {
            var candidates = repository.GetCIInstances(domainName, "V_FNV").Where(i => ((CIMClassV_FNV)i).Attr_Value_ID == this.Attr_Invocation_Value_ID);
            CIMClassV_FNV linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_FNV)candidates.First();
            }
            return linked;

        }

        public CIMClassV_MSV LinkedToR842()
        {
            var candidates = repository.GetCIInstances(domainName, "V_MSV").Where(i => ((CIMClassV_MSV)i).Attr_Value_ID == this.Attr_Invocation_Value_ID);
            CIMClassV_MSV linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_MSV)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_PAR LinkedFromR2063()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_PAR").Where(i => ((CIMClassTE_PAR)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassTE_PAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_PAR)candidates.First();
            }
            return linked;

        }

        public CIMClassV_PAR LinkedFromR816Precedes()
        {
            var candidates = repository.GetCIInstances(domainName, "V_PAR").Where(i => ((CIMClassV_PAR)i).Attr_Next_Value_ID == this.Attr_Value_ID);
            CIMClassV_PAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_PAR)candidates.First();
            }
            return linked;

        }

    }
    public class CIMClassV_PVLBase : CIMOOAofOOAClass, CIMClassV_PVL
    {
        public string Attr_Value_ID { get; set; }
        public string Attr_BParm_ID { get; set; }
        public string Attr_SParm_ID { get; set; }
        public string Attr_TParm_ID { get; set; }
        public string Attr_PP_Id { get; set; }

        public CIMClassV_PVLBase(CIModelRepository repository, string Value_ID, string BParm_ID, string SParm_ID, string TParm_ID, string PP_Id ) : base(repository, "V_PVL")
        {
            Attr_Value_ID = Value_ID;
            Attr_BParm_ID = BParm_ID;
            Attr_SParm_ID = SParm_ID;
            Attr_TParm_ID = TParm_ID;
            Attr_PP_Id = PP_Id;
        }

        public CIMClassV_PVLBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Value_ID"], (string)attrArgs["BParm_ID"], (string)attrArgs["SParm_ID"], (string)attrArgs["TParm_ID"], (string)attrArgs["PP_Id"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassS_BPARM LinkedToR831()
        {
            var candidates = repository.GetCIInstances(domainName, "S_BPARM").Where(i => ((CIMClassS_BPARM)i).Attr_BParm_ID == this.Attr_BParm_ID);
            CIMClassS_BPARM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_BPARM)candidates.First();
            }
            return linked;

        }

        public CIMClassS_SPARM LinkedToR832()
        {
            var candidates = repository.GetCIInstances(domainName, "S_SPARM").Where(i => ((CIMClassS_SPARM)i).Attr_SParm_ID == this.Attr_SParm_ID);
            CIMClassS_SPARM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_SPARM)candidates.First();
            }
            return linked;

        }

        public CIMClassO_TPARM LinkedToR833()
        {
            var candidates = repository.GetCIInstances(domainName, "O_TPARM").Where(i => ((CIMClassO_TPARM)i).Attr_TParm_ID == this.Attr_TParm_ID);
            CIMClassO_TPARM linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_TPARM)candidates.First();
            }
            return linked;

        }

        public CIMClassC_PP LinkedToR843()
        {
            var candidates = repository.GetCIInstances(domainName, "C_PP").Where(i => ((CIMClassC_PP)i).Attr_PP_Id == this.Attr_PP_Id);
            CIMClassC_PP linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassC_PP)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAL CIMSuperClassV_VAL()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassV_SCVBase : CIMOOAofOOAClass, CIMClassV_SCV
    {
        public string Attr_Value_ID { get; set; }
        public string Attr_Const_ID { get; set; }
        public string Attr_DT_ID_Deprecated { get; set; }

        public CIMClassV_SCVBase(CIModelRepository repository, string Value_ID, string Const_ID, string DT_ID_Deprecated ) : base(repository, "V_SCV")
        {
            Attr_Value_ID = Value_ID;
            Attr_Const_ID = Const_ID;
            Attr_DT_ID_Deprecated = DT_ID_Deprecated;
        }

        public CIMClassV_SCVBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Value_ID"], (string)attrArgs["Const_ID"], (string)attrArgs["DT_ID_Deprecated"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassCNST_SYC LinkedToR850()
        {
            var candidates = repository.GetCIInstances(domainName, "CNST_SYC").Where(i => ((CIMClassCNST_SYC)i).Attr_Const_ID == this.Attr_Const_ID);
            CIMClassCNST_SYC linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassCNST_SYC)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAL CIMSuperClassV_VAL()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassV_SLRBase : CIMOOAofOOAClass, CIMClassV_SLR
    {
        public string Attr_Value_ID { get; set; }
        public string Attr_Obj_ID { get; set; }
        public string Attr_Attr_ID { get; set; }
        public string Attr_Op_Value_ID { get; set; }

        public CIMClassV_SLRBase(CIModelRepository repository, string Value_ID, string Obj_ID, string Attr_ID, string Op_Value_ID ) : base(repository, "V_SLR")
        {
            Attr_Value_ID = Value_ID;
            Attr_Obj_ID = Obj_ID;
            Attr_Attr_ID = Attr_ID;
            Attr_Op_Value_ID = Op_Value_ID;
        }

        public CIMClassV_SLRBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Value_ID"], (string)attrArgs["Obj_ID"], (string)attrArgs["Attr_ID"], (string)attrArgs["Op_Value_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassO_ATTR LinkedToR812()
        {
            var candidates = repository.GetCIInstances(domainName, "O_ATTR").Where(i => ((CIMClassO_ATTR)i).Attr_Attr_ID == this.Attr_Attr_ID && ((CIMClassO_ATTR)i).Attr_Obj_ID == this.Attr_Obj_ID);
            CIMClassO_ATTR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_ATTR)candidates.First();
            }
            return linked;

        }

        public CIMClassV_TRV LinkedToR825()
        {
            var candidates = repository.GetCIInstances(domainName, "V_TRV").Where(i => ((CIMClassV_TRV)i).Attr_Value_ID == this.Attr_Op_Value_ID);
            CIMClassV_TRV linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_TRV)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAL CIMSuperClassV_VAL()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassV_TRNBase : CIMOOAofOOAClass, CIMClassV_TRN
    {
        public string Attr_Var_ID { get; set; }
        public string Attr_DT_ID { get; set; }
        public string Attr_Dimensions { get; set; }

        public CIMClassV_TRNBase(CIModelRepository repository, string Var_ID, string DT_ID, string Dimensions ) : base(repository, "V_TRN")
        {
            Attr_Var_ID = Var_ID;
            Attr_DT_ID = DT_ID;
            Attr_Dimensions = Dimensions;
        }

        public CIMClassV_TRNBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Var_ID"], (string)attrArgs["DT_ID"], (string)attrArgs["Dimensions"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassS_DT LinkedToR821()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DT").Where(i => ((CIMClassS_DT)i).Attr_DT_ID == this.Attr_DT_ID);
            CIMClassS_DT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_DT)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassS_DIM> LinkedFromR844()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DIM").Where(i => ((CIMClassS_DIM)i).Attr_Var_ID == this.Attr_Var_ID);
            var linked = new List<CIMClassS_DIM>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassS_DIM)c);
            }
            return linked;

        }

        public CIMClassV_VAR CIMSuperClassV_VAR()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAR").Where(i => ((CIMClassV_VAR)i).Attr_Var_ID == this.Attr_Var_ID);
            CIMClassV_VAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAR)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassV_TRVBase : CIMOOAofOOAClass, CIMClassV_TRV
    {
        public string Attr_Value_ID { get; set; }
        public string Attr_Tfr_ID { get; set; }
        public string Attr_Var_ID { get; set; }
        public bool Attr_ParmListOK { get; set; }
        public int Attr_modelClassKeyLettersLineNumber { get; set; }
        public int Attr_modelClassKeyLettersColumn { get; set; }

        public CIMClassV_TRVBase(CIModelRepository repository, string Value_ID, string Tfr_ID, string Var_ID, bool ParmListOK, int modelClassKeyLettersLineNumber, int modelClassKeyLettersColumn ) : base(repository, "V_TRV")
        {
            Attr_Value_ID = Value_ID;
            Attr_Tfr_ID = Tfr_ID;
            Attr_Var_ID = Var_ID;
            Attr_ParmListOK = ParmListOK;
            Attr_modelClassKeyLettersLineNumber = modelClassKeyLettersLineNumber;
            Attr_modelClassKeyLettersColumn = modelClassKeyLettersColumn;
        }

        public CIMClassV_TRVBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Value_ID"], (string)attrArgs["Tfr_ID"], (string)attrArgs["Var_ID"], (bool)attrArgs["ParmListOK"], (int)attrArgs["modelClassKeyLettersLineNumber"], (int)attrArgs["modelClassKeyLettersColumn"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassO_TFR LinkedToR829()
        {
            var candidates = repository.GetCIInstances(domainName, "O_TFR").Where(i => ((CIMClassO_TFR)i).Attr_Tfr_ID == this.Attr_Tfr_ID);
            CIMClassO_TFR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassO_TFR)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAR LinkedToR830()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAR").Where(i => ((CIMClassV_VAR)i).Attr_Var_ID == this.Attr_Var_ID);
            CIMClassV_VAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAR)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassV_PAR> LinkedFromR811()
        {
            var candidates = repository.GetCIInstances(domainName, "V_PAR").Where(i => ((CIMClassV_PAR)i).Attr_Invocation_Value_ID == this.Attr_Value_ID);
            var linked = new List<CIMClassV_PAR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_PAR)c);
            }
            return linked;

        }

        public CIMClassV_SLR LinkedFromR825()
        {
            var candidates = repository.GetCIInstances(domainName, "V_SLR").Where(i => ((CIMClassV_SLR)i).Attr_Op_Value_ID == this.Attr_Value_ID);
            CIMClassV_SLR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_SLR)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAL CIMSuperClassV_VAL()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassV_TVLBase : CIMOOAofOOAClass, CIMClassV_TVL
    {
        public string Attr_Value_ID { get; set; }
        public string Attr_Var_ID { get; set; }

        public CIMClassV_TVLBase(CIModelRepository repository, string Value_ID, string Var_ID ) : base(repository, "V_TVL")
        {
            Attr_Value_ID = Value_ID;
            Attr_Var_ID = Var_ID;
        }

        public CIMClassV_TVLBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Value_ID"], (string)attrArgs["Var_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassV_VAR LinkedToR805()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAR").Where(i => ((CIMClassV_VAR)i).Attr_Var_ID == this.Attr_Var_ID);
            CIMClassV_VAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAR)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAL CIMSuperClassV_VAL()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassV_UNYBase : CIMOOAofOOAClass, CIMClassV_UNY
    {
        public string Attr_Value_ID { get; set; }
        public string Attr_Operand_Value_ID { get; set; }
        public string Attr_Operator { get; set; }

        public CIMClassV_UNYBase(CIModelRepository repository, string Value_ID, string Operand_Value_ID, string Operator ) : base(repository, "V_UNY")
        {
            Attr_Value_ID = Value_ID;
            Attr_Operand_Value_ID = Operand_Value_ID;
            Attr_Operator = Operator;
        }

        public CIMClassV_UNYBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Value_ID"], (string)attrArgs["Operand_Value_ID"], (string)attrArgs["Operator"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassV_VAL LinkedToR804()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Operand_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }

        public CIMClassV_VAL CIMSuperClassV_VAL()
        {
            var candidates = repository.GetCIInstances(domainName, "V_VAL").Where(i => ((CIMClassV_VAL)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassV_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_VAL)candidates.First();
            }
            return linked;

        }
    }
    public class CIMClassV_VALBase : CIMOOAofOOAClass, CIMClassV_VAL
    {
        public string Attr_Value_ID { get; set; }
        public bool Attr_isLValue { get; set; }
        public bool Attr_isImplicit { get; set; }
        public int Attr_LineNumber { get; set; }
        public int Attr_StartPosition { get; set; }
        public int Attr_EndPosition { get; set; }
        public int Attr_firstParameterLabelLineNumber { get; set; }
        public int Attr_firstParameterLabelColumn { get; set; }
        public int Attr_currentLaterParameterLabelLineNumber { get; set; }
        public int Attr_currentLaterParameterLabelColumn { get; set; }
        public string Attr_DT_ID { get; set; }
        public string Attr_Block_ID { get; set; }

        public CIMClassV_VALBase(CIModelRepository repository, string Value_ID, bool isLValue, bool isImplicit, int LineNumber, int StartPosition, int EndPosition, int firstParameterLabelLineNumber, int firstParameterLabelColumn, int currentLaterParameterLabelLineNumber, int currentLaterParameterLabelColumn, string DT_ID, string Block_ID ) : base(repository, "V_VAL")
        {
            Attr_Value_ID = Value_ID;
            Attr_isLValue = isLValue;
            Attr_isImplicit = isImplicit;
            Attr_LineNumber = LineNumber;
            Attr_StartPosition = StartPosition;
            Attr_EndPosition = EndPosition;
            Attr_firstParameterLabelLineNumber = firstParameterLabelLineNumber;
            Attr_firstParameterLabelColumn = firstParameterLabelColumn;
            Attr_currentLaterParameterLabelLineNumber = currentLaterParameterLabelLineNumber;
            Attr_currentLaterParameterLabelColumn = currentLaterParameterLabelColumn;
            Attr_DT_ID = DT_ID;
            Attr_Block_ID = Block_ID;
        }

        public CIMClassV_VALBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Value_ID"], (bool)attrArgs["isLValue"], (bool)attrArgs["isImplicit"], (int)attrArgs["LineNumber"], (int)attrArgs["StartPosition"], (int)attrArgs["EndPosition"], (int)attrArgs["firstParameterLabelLineNumber"], (int)attrArgs["firstParameterLabelColumn"], (int)attrArgs["currentLaterParameterLabelLineNumber"], (int)attrArgs["currentLaterParameterLabelColumn"], (string)attrArgs["DT_ID"], (string)attrArgs["Block_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassS_DT LinkedToR820()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DT").Where(i => ((CIMClassS_DT)i).Attr_DT_ID == this.Attr_DT_ID);
            CIMClassS_DT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_DT)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_BLK LinkedToR826()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_BLK").Where(i => ((CIMClassACT_BLK)i).Attr_Block_ID == this.Attr_Block_ID);
            CIMClassACT_BLK linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_BLK)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_VAL LinkedFromR2040()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_VAL").Where(i => ((CIMClassTE_VAL)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassTE_VAL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_VAL)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassI_VSF> LinkedFromR2978()
        {
            var candidates = repository.GetCIInstances(domainName, "I_VSF").Where(i => ((CIMClassI_VSF)i).Attr_Value_ID == this.Attr_Value_ID);
            var linked = new List<CIMClassI_VSF>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassI_VSF)c);
            }
            return linked;

        }

        public CIMClassACT_AI LinkedFromR609()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_AI").Where(i => ((CIMClassACT_AI)i).Attr_r_Value_ID == this.Attr_Value_ID);
            CIMClassACT_AI linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_AI)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_FIW LinkedFromR610()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_FIW").Where(i => ((CIMClassACT_FIW)i).Attr_Where_Clause_Value_ID == this.Attr_Value_ID);
            CIMClassACT_FIW linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_FIW)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_SRW LinkedFromR611()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SRW").Where(i => ((CIMClassACT_SRW)i).Attr_Where_Clause_Value_ID == this.Attr_Value_ID);
            CIMClassACT_SRW linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_SRW)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_SEL LinkedFromR613()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SEL").Where(i => ((CIMClassACT_SEL)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassACT_SEL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_SEL)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_IF LinkedFromR625()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_IF").Where(i => ((CIMClassACT_IF)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassACT_IF linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_IF)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_WHL LinkedFromR626()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_WHL").Where(i => ((CIMClassACT_WHL)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassACT_WHL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_WHL)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_IOP> LinkedFromR629()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_IOP").Where(i => ((CIMClassACT_IOP)i).Attr_Value_ID == this.Attr_Value_ID);
            var linked = new List<CIMClassACT_IOP>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_IOP)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_SGN> LinkedFromR630()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SGN").Where(i => ((CIMClassACT_SGN)i).Attr_Value_ID == this.Attr_Value_ID);
            var linked = new List<CIMClassACT_SGN>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_SGN)c);
            }
            return linked;

        }

        public CIMClassACT_EL LinkedFromR659()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_EL").Where(i => ((CIMClassACT_EL)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassACT_EL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_EL)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_RET LinkedFromR668()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_RET").Where(i => ((CIMClassACT_RET)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassACT_RET linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_RET)candidates.First();
            }
            return linked;

        }

        public CIMClassACT_AI LinkedFromR689()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_AI").Where(i => ((CIMClassACT_AI)i).Attr_l_Value_ID == this.Attr_Value_ID);
            CIMClassACT_AI linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_AI)candidates.First();
            }
            return linked;

        }

        public CIMClassE_GPR LinkedFromR714()
        {
            var candidates = repository.GetCIInstances(domainName, "E_GPR").Where(i => ((CIMClassE_GPR)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassE_GPR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassE_GPR)candidates.First();
            }
            return linked;

        }

        public CIMClassV_PAR LinkedFromR800()
        {
            var candidates = repository.GetCIInstances(domainName, "V_PAR").Where(i => ((CIMClassV_PAR)i).Attr_Value_ID == this.Attr_Value_ID);
            CIMClassV_PAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_PAR)candidates.First();
            }
            return linked;

        }

        public CIMClassV_BIN LinkedFromR802()
        {
            var candidates = repository.GetCIInstances(domainName, "V_BIN").Where(i => ((CIMClassV_BIN)i).Attr_Left_Value_ID == this.Attr_Value_ID);
            CIMClassV_BIN linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_BIN)candidates.First();
            }
            return linked;

        }

        public CIMClassV_BIN LinkedFromR803()
        {
            var candidates = repository.GetCIInstances(domainName, "V_BIN").Where(i => ((CIMClassV_BIN)i).Attr_Right_Value_ID == this.Attr_Value_ID);
            CIMClassV_BIN linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_BIN)candidates.First();
            }
            return linked;

        }

        public CIMClassV_UNY LinkedFromR804()
        {
            var candidates = repository.GetCIInstances(domainName, "V_UNY").Where(i => ((CIMClassV_UNY)i).Attr_Operand_Value_ID == this.Attr_Value_ID);
            CIMClassV_UNY linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_UNY)candidates.First();
            }
            return linked;

        }

        public CIMClassV_AVL LinkedFromR807()
        {
            var candidates = repository.GetCIInstances(domainName, "V_AVL").Where(i => ((CIMClassV_AVL)i).Attr_Root_Value_ID == this.Attr_Value_ID);
            CIMClassV_AVL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_AVL)candidates.First();
            }
            return linked;

        }

        public CIMClassV_MVL LinkedFromR837()
        {
            var candidates = repository.GetCIInstances(domainName, "V_MVL").Where(i => ((CIMClassV_MVL)i).Attr_Root_Value_ID == this.Attr_Value_ID);
            CIMClassV_MVL linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_MVL)candidates.First();
            }
            return linked;

        }

        public CIMClassV_AER LinkedFromR838()
        {
            var candidates = repository.GetCIInstances(domainName, "V_AER").Where(i => ((CIMClassV_AER)i).Attr_Root_Value_ID == this.Attr_Value_ID);
            CIMClassV_AER linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_AER)candidates.First();
            }
            return linked;

        }

        public CIMClassV_AER LinkedFromR839()
        {
            var candidates = repository.GetCIInstances(domainName, "V_AER").Where(i => ((CIMClassV_AER)i).Attr_Index_Value_ID == this.Attr_Value_ID);
            CIMClassV_AER linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_AER)candidates.First();
            }
            return linked;

        }

        public CIMClassV_ALV LinkedFromR840()
        {
            var candidates = repository.GetCIInstances(domainName, "V_ALV").Where(i => ((CIMClassV_ALV)i).Attr_Array_Value_ID == this.Attr_Value_ID);
            CIMClassV_ALV linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassV_ALV)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassV_MSV> LinkedFromR851()
        {
            var candidates = repository.GetCIInstances(domainName, "V_MSV").Where(i => ((CIMClassV_MSV)i).Attr_Target_Value_ID == this.Attr_Value_ID);
            var linked = new List<CIMClassV_MSV>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_MSV)c);
            }
            return linked;

        }

        public CIMSubClassR801 SubClassR801()
        {
            var subClassNames = new List<string>() { "V_FNV", "V_PVL", "V_SLR", "V_BRV", "V_IRF", "V_AVL", "V_LIN", "V_LST", "V_UNY", "V_TRV", "V_ISR", "V_EDV", "V_TVL", "V_LRL", "V_LBO", "V_BIN", "V_LEN", "V_MVL", "V_AER", "V_ALV", "V_MSV", "V_SCV" };
            CIMSubClassR801 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR801)i).CIMSuperClassV_VAL() != null && (((CIMSubClassR801)i).CIMSuperClassV_VAL().Attr_Value_ID == this.Attr_Value_ID));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR801)candidates.First();
                    break;
                }
            }
            return subClass;

        }

    }
    public class CIMClassV_VARBase : CIMOOAofOOAClass, CIMClassV_VAR
    {
        public string Attr_Var_ID { get; set; }
        public string Attr_Block_ID { get; set; }
        public string Attr_Name { get; set; }
        public bool Attr_Declared { get; set; }
        public string Attr_DT_ID { get; set; }

        public CIMClassV_VARBase(CIModelRepository repository, string Var_ID, string Block_ID, string Name, bool Declared, string DT_ID ) : base(repository, "V_VAR")
        {
            Attr_Var_ID = Var_ID;
            Attr_Block_ID = Block_ID;
            Attr_Name = Name;
            Attr_Declared = Declared;
            Attr_DT_ID = DT_ID;
        }

        public CIMClassV_VARBase(CIModelRepository repository, IDictionary<string, object>attrArgs ) : this(repository, (string)attrArgs["Var_ID"], (string)attrArgs["Block_ID"], (string)attrArgs["Name"], (bool)attrArgs["Declared"], (string)attrArgs["DT_ID"])
        {
            ;
        }

        public void Dispose()
        {
            ;
        }

        public bool Validate()
        {
            return true;
        }

        public CIMClassACT_BLK LinkedToR823()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_BLK").Where(i => ((CIMClassACT_BLK)i).Attr_Block_ID == this.Attr_Block_ID);
            CIMClassACT_BLK linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassACT_BLK)candidates.First();
            }
            return linked;

        }

        public CIMClassS_DT LinkedToR848()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DT").Where(i => ((CIMClassS_DT)i).Attr_DT_ID == this.Attr_DT_ID);
            CIMClassS_DT linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassS_DT)candidates.First();
            }
            return linked;

        }

        public CIMClassTE_VAR LinkedFromR2039()
        {
            var candidates = repository.GetCIInstances(domainName, "TE_VAR").Where(i => ((CIMClassTE_VAR)i).Attr_Var_ID == this.Attr_Var_ID);
            CIMClassTE_VAR linked = null;
            if (candidates.Count() > 0)
            {
                linked = (CIMClassTE_VAR)candidates.First();
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_FOR> LinkedFromR614()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_FOR").Where(i => ((CIMClassACT_FOR)i).Attr_Loop_Var_ID == this.Attr_Var_ID);
            var linked = new List<CIMClassACT_FOR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_FOR)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_REL> LinkedFromR615()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_REL").Where(i => ((CIMClassACT_REL)i).Attr_One_Side_Var_ID == this.Attr_Var_ID);
            var linked = new List<CIMClassACT_REL>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_REL)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_REL> LinkedFromR616()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_REL").Where(i => ((CIMClassACT_REL)i).Attr_Other_Side_Var_ID == this.Attr_Var_ID);
            var linked = new List<CIMClassACT_REL>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_REL)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_RU> LinkedFromR617()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_RU").Where(i => ((CIMClassACT_RU)i).Attr_One_Side_Var_ID == this.Attr_Var_ID);
            var linked = new List<CIMClassACT_RU>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_RU)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_RU> LinkedFromR618()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_RU").Where(i => ((CIMClassACT_RU)i).Attr_Other_Side_Var_ID == this.Attr_Var_ID);
            var linked = new List<CIMClassACT_RU>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_RU)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_RU> LinkedFromR619()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_RU").Where(i => ((CIMClassACT_RU)i).Attr_Associative_Var_ID == this.Attr_Var_ID);
            var linked = new List<CIMClassACT_RU>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_RU)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_UNR> LinkedFromR620()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_UNR").Where(i => ((CIMClassACT_UNR)i).Attr_One_Side_Var_ID == this.Attr_Var_ID);
            var linked = new List<CIMClassACT_UNR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_UNR)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_UNR> LinkedFromR621()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_UNR").Where(i => ((CIMClassACT_UNR)i).Attr_Other_Side_Var_ID == this.Attr_Var_ID);
            var linked = new List<CIMClassACT_UNR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_UNR)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_URU> LinkedFromR622()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_URU").Where(i => ((CIMClassACT_URU)i).Attr_One_Side_Var_ID == this.Attr_Var_ID);
            var linked = new List<CIMClassACT_URU>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_URU)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_URU> LinkedFromR623()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_URU").Where(i => ((CIMClassACT_URU)i).Attr_Other_Side_Var_ID == this.Attr_Var_ID);
            var linked = new List<CIMClassACT_URU>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_URU)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_URU> LinkedFromR624()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_URU").Where(i => ((CIMClassACT_URU)i).Attr_Associative_Var_ID == this.Attr_Var_ID);
            var linked = new List<CIMClassACT_URU>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_URU)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_CR> LinkedFromR633()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_CR").Where(i => ((CIMClassACT_CR)i).Attr_Var_ID == this.Attr_Var_ID);
            var linked = new List<CIMClassACT_CR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_CR)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_DEL> LinkedFromR634()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_DEL").Where(i => ((CIMClassACT_DEL)i).Attr_Var_ID == this.Attr_Var_ID);
            var linked = new List<CIMClassACT_DEL>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_DEL)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_SEL> LinkedFromR638()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_SEL").Where(i => ((CIMClassACT_SEL)i).Attr_Var_ID == this.Attr_Var_ID);
            var linked = new List<CIMClassACT_SEL>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_SEL)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_FIO> LinkedFromR639()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_FIO").Where(i => ((CIMClassACT_FIO)i).Attr_Var_ID == this.Attr_Var_ID);
            var linked = new List<CIMClassACT_FIO>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_FIO)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_FOR> LinkedFromR652()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_FOR").Where(i => ((CIMClassACT_FOR)i).Attr_Set_Var_ID == this.Attr_Var_ID);
            var linked = new List<CIMClassACT_FOR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_FOR)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_FIW> LinkedFromR665()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_FIW").Where(i => ((CIMClassACT_FIW)i).Attr_Var_ID == this.Attr_Var_ID);
            var linked = new List<CIMClassACT_FIW>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_FIW)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassACT_TFM> LinkedFromR667()
        {
            var candidates = repository.GetCIInstances(domainName, "ACT_TFM").Where(i => ((CIMClassACT_TFM)i).Attr_Var_ID == this.Attr_Var_ID);
            var linked = new List<CIMClassACT_TFM>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassACT_TFM)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassE_CES> LinkedFromR710()
        {
            var candidates = repository.GetCIInstances(domainName, "E_CES").Where(i => ((CIMClassE_CES)i).Attr_Var_ID == this.Attr_Var_ID);
            var linked = new List<CIMClassE_CES>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassE_CES)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassE_CEI> LinkedFromR711()
        {
            var candidates = repository.GetCIInstances(domainName, "E_CEI").Where(i => ((CIMClassE_CEI)i).Attr_Var_ID == this.Attr_Var_ID);
            var linked = new List<CIMClassE_CEI>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassE_CEI)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassE_GEN> LinkedFromR712()
        {
            var candidates = repository.GetCIInstances(domainName, "E_GEN").Where(i => ((CIMClassE_GEN)i).Attr_Var_ID == this.Attr_Var_ID);
            var linked = new List<CIMClassE_GEN>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassE_GEN)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassV_TVL> LinkedFromR805()
        {
            var candidates = repository.GetCIInstances(domainName, "V_TVL").Where(i => ((CIMClassV_TVL)i).Attr_Var_ID == this.Attr_Var_ID);
            var linked = new List<CIMClassV_TVL>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_TVL)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassV_IRF> LinkedFromR808()
        {
            var candidates = repository.GetCIInstances(domainName, "V_IRF").Where(i => ((CIMClassV_IRF)i).Attr_Var_ID == this.Attr_Var_ID);
            var linked = new List<CIMClassV_IRF>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_IRF)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassV_ISR> LinkedFromR809()
        {
            var candidates = repository.GetCIInstances(domainName, "V_ISR").Where(i => ((CIMClassV_ISR)i).Attr_Var_ID == this.Attr_Var_ID);
            var linked = new List<CIMClassV_ISR>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_ISR)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassV_TRV> LinkedFromR830()
        {
            var candidates = repository.GetCIInstances(domainName, "V_TRV").Where(i => ((CIMClassV_TRV)i).Attr_Var_ID == this.Attr_Var_ID);
            var linked = new List<CIMClassV_TRV>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_TRV)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassV_LOC> LinkedFromR835()
        {
            var candidates = repository.GetCIInstances(domainName, "V_LOC").Where(i => ((CIMClassV_LOC)i).Attr_Var_ID == this.Attr_Var_ID);
            var linked = new List<CIMClassV_LOC>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassV_LOC)c);
            }
            return linked;

        }

        public IEnumerable<CIMClassS_DIM> LinkedFromR849()
        {
            var candidates = repository.GetCIInstances(domainName, "S_DIM").Where(i => ((CIMClassS_DIM)i).Attr_Var_ID == this.Attr_Var_ID);
            var linked = new List<CIMClassS_DIM>();
            foreach(var c in candidates)
            {
                linked.Add((CIMClassS_DIM)c);
            }
            return linked;

        }

        public CIMSubClassR814 SubClassR814()
        {
            var subClassNames = new List<string>() { "V_INT", "V_INS", "V_TRN" };
            CIMSubClassR814 subClass = null;
            foreach (var scName in subClassNames)
            {
                var candidates = repository.GetCIInstances(domainName, scName).Where(i=> ((CIMSubClassR814)i).CIMSuperClassV_VAR() != null && (((CIMSubClassR814)i).CIMSuperClassV_VAR().Attr_Var_ID == this.Attr_Var_ID));
                if (candidates.Count() > 0)
                {
                    subClass = (CIMSubClassR814)candidates.First();
                    break;
                }
            }
            return subClass;

        }

    }
}
